{
  "contractName": "TestContract",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getTellorValues",
      "outputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_didGet",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "endValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "disputeOptimisticValue",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfValuesPerTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isValue",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputedValues",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "endDateTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentValue",
      "outputs": [
        {
          "name": "ifRetrieve",
          "type": "bool"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_request",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "requestData",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_request",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "requestDataWithEther",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdsIncluded",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "granularity",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTimestamps",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "disputePeriod",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFirstVerifiedDataAfter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getNumberOfDisputedValues",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFirstUndisputedValueAfter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDisputedValueByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "addTip",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startDateTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setValue",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isDisputed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contractEnded",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIsValue",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_userContract",
          "type": "address"
        }
      ],
      "name": "setUserContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestIds",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDisputedValues",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "disputeFee",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "longWins",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAnyDataAfter",
      "outputs": [
        {
          "name": "_ifRetrieve",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdsIncluded",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMyValuesByTimestamp",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_tip",
          "type": "uint256"
        }
      ],
      "name": "addTipWithEther",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_userContract",
          "type": "address"
        },
        {
          "name": "_disputeFeeRequired",
          "type": "uint256"
        },
        {
          "name": "_disputePeriod",
          "type": "uint256"
        },
        {
          "name": "_requestIds",
          "type": "uint256[]"
        },
        {
          "name": "_granularity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_svalue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_evalue",
          "type": "uint256"
        }
      ],
      "name": "ContractSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "NewValueSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ValueDisputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TellorValuePlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "testContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "settleContracts",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTellorValues\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_didGet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"testContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"disputeOptimisticValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getNumberOfValuesPerTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"name\":\"ifRetrieve\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_request\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_request\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"requestDataWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdsIncluded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disputePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getFirstVerifiedDataAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfDisputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getFirstUndisputedValueAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDisputedValueByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"addTip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isDisputed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userContract\",\"type\":\"address\"}],\"name\":\"setUserContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disputeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"longWins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getAnyDataAfter\",\"outputs\":[{\"name\":\"_ifRetrieve\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdsIncluded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMyValuesByTimestamp\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"addTipWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_userContract\",\"type\":\"address\"},{\"name\":\"_disputeFeeRequired\",\"type\":\"uint256\"},{\"name\":\"_disputePeriod\",\"type\":\"uint256\"},{\"name\":\"_requestIds\",\"type\":\"uint256[]\"},{\"name\":\"_granularity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_svalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evalue\",\"type\":\"uint256\"}],\"name\":\"ContractSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NewValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_disputer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ValueDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TellorValuePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addTip(uint256,uint256)\":{\"details\":\"Allows the user to tip miners for the specified request using Tributes\",\"params\":{\"_requestId\":\"to tip\",\"_tip\":\"amount\"}},\"addTipWithEther(uint256,uint256)\":{\"details\":\"Allows user to add tip with Ether by sending the ETH to the userContract and exchanging it for Tributes at the price specified by the userContract owner.\",\"params\":{\"_requestId\":\"to tip\",\"_tip\":\"amount\"}},\"constructor\":{\"details\":\"This constructor function is used to pass variables to the optimistic contract's constructor and the function is blank\",\"params\":{\"_disputeFeeRequired\":\"the fee to dispute the optimistic price(price sumbitted by known trusted party)\",\"_disputePeriod\":\"is the time frame a value can be disputed after being imputed\",\"_granularity\":\"is the amount of decimals desired on the requested value\",\"_requestIds\":\"are the requests Id's on the Tellor System corresponding to the data types used on this contract. It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor System be sure to create some.\",\"_userContract\":\"address for UserContract\"}},\"disputeOptimisticValue(uint256)\":{\"details\":\"allows user to initiate dispute on the value of the specified timestamp\",\"params\":{\"_timestamp\":\"is the timestamp for the value to be disputed\"}},\"getAnyDataAfter(uint256,uint256)\":{\"details\":\"Allows the user to get the first value for the requestId after the specified timestamp\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\",\"_timestamp\":\"after which to search for first verified value\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp\"},\"getCurrentValue()\":{\"details\":\"Getter function for latest value available\",\"return\":\"latest value available\"},\"getCurrentValue(uint256)\":{\"details\":\"Allows the user to get the latest value for the requestId specified\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp\"},\"getDisputedValueByIndex(uint256)\":{\"details\":\"Getter function for the dispute value by index\",\"return\":\"the value\"},\"getDisputedValues()\":{\"details\":\"Getter function for all disputed values\",\"return\":\"the array with all values under dispute\"},\"getFirstUndisputedValueAfter(uint256)\":{\"details\":\"Get the first undisputed value after the timestamp specified. This function is used within the getTellorValues but can be used on its own.\",\"params\":{\"_timestamp\":\"to search the first undisputed value there after\"}},\"getFirstVerifiedDataAfter(uint256,uint256)\":{\"details\":\"Allows the user to get the first verified value for the requestId after the specified timestamp\",\"params\":{\"_requestId\":\"is the requestId to look up the value for\",\"_timestamp\":\"after which to search for first verified value\"},\"return\":\"bool true if it is able to retreive a value, the value, and the value's timestamp, the timestamp after which it searched for the first verified value\"},\"getIsValue(uint256)\":{\"details\":\"Checks to if a value exists for the specifived timestamp\",\"params\":{\"_timestamp\":\"to verify\"},\"return\":\"ture if it exists\"},\"getMyValuesByTimestamp(uint256)\":{\"details\":\"Getter function for the value based on the timestamp specified\",\"params\":{\"_timestamp\":\"to retreive value from\"}},\"getNumberOfDisputedValues()\":{\"details\":\"Getter function for the number of disputed values\",\"return\":\"uint count of number of values for the spedified timestamp\"},\"getNumberOfValuesPerTimestamp(uint256)\":{\"details\":\"Getter function for the number of RequestIds associated with a timestamp, based on the timestamp specified\",\"params\":{\"_timestamp\":\"to retreive number of requestIds\"},\"return\":\"uint count of number of values for the spedified timestamp\"},\"getRequestIds()\":{\"details\":\"Getter function for the requests Ids' from Tellor associated with this price feed\",\"return\":\"uint array of requests Ids'\"},\"getRequestIdsIncluded(uint256)\":{\"details\":\"Getter function for the requests Ids' from Tellor associated with this price feed at the specified timestamp. This only gets populated after a dispute is initiated and the function getTellorValues is ran.\",\"params\":{\"_timestamp\":\"to retreive the requestIds\"},\"return\":\"uint array of requests Ids' included in the calcluation of the value\"},\"getTellorValues(uint256)\":{\"details\":\"This function gets the Tellor requestIds values for the disputed timestamp. It averages the values on the requestsIds and replaces the value set by the contract owner, centralized party.\",\"params\":{\"_timestamp\":\"to get Tellor data from\"},\"return\":\"uint of new value and true if it was able to get Tellor data\"},\"getTimestamps()\":{\"details\":\"Getter function for the timestamps available\",\"return\":\"uint array of timestamps available\"},\"isDisputed(uint256)\":{\"details\":\"This checks if the value for the specified timestamp is under dispute\",\"params\":{\"_timestamp\":\"to check if it is under dispute\"},\"return\":\"true if it is under dispute\"},\"requestData(string,string,uint256,uint256)\":{\"details\":\"Allows the user to submit a request for data to the oracle using Tributes Allowing this prevents us from increasing spread too high (since if we set the price too hight users will just go to an exchange and get tokens from there)\",\"params\":{\"_granularity\":\"is the number of decimals miners should include on the submitted value\",\"_request\":\"string API being requested to be mined\",\"_symbol\":\"is the short string symbol for the api request\",\"_tip\":\"amount the requester is willing to pay to be get on queue. Miners mine the onDeckQueryHash, or the api with the highest payout pool\"}},\"requestDataWithEther(string,string,uint256,uint256)\":{\"details\":\"Allows the user to submit a request for data to the oracle using ETH\",\"params\":{\"_granularity\":\"is the number of decimals miners should include on the submitted value\",\"_request\":\"string API being requested to be mined\",\"_symbol\":\"is the short string symbol for the api request\",\"_tip\":\"amount the requester is willing to pay to be get on queue. Miners mine the onDeckQueryHash, or the api with the highest payout pool\"}},\"setUserContract(address)\":{\"details\":\"allows owner to set the user contract address\",\"params\":{\"_userContract\":\"address\"}},\"setValue(uint256,uint256)\":{\"details\":\"allows contract owner, a centralized party to enter value\",\"params\":{\"_timestamp\":\"is the timestamp for the value\",\"_value\":\"is the value for the timestamp specified\"}},\"settleContracts()\":{\"details\":\"testing fucntion that settles the contract by getting the first undisputed value after the startDateTime and the first undisputed value after the end time of the contract and settleling(payin off) it.\"},\"testContract(uint256)\":{\"details\":\"creates a start(now) and end time(now + duration specified) for testing a contract start and end period\",\"params\":{\"_duration\":\"in seconds\"}},\"transferOwnership(address)\":{\"details\":\"allows owner to transfer ownership\",\"params\":{\"_newOwner\":\"address\"}},\"withdrawETH()\":{\"details\":\"Allows the contract owner(Tellor) to withdraw ETH from this contract\"}},\"title\":\"Reader This contracts is a pretend contract using Tellor that compares two time values\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/mdcoon/git/TellorCore/contracts/userFiles/TestContract.sol\":\"TestContract\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/mdcoon/git/TellorCore/contracts/Tellor.sol\":{\"keccak256\":\"0xbbe523c169286fd40837209c56db4c95810d55a770ccae249e2165237c72e794\",\"urls\":[\"bzzr://c5a9c13ba66e4d850a4bd78509adf4d6a60317ee825094a47e91d89e0ece55c4\"]},\"/Users/mdcoon/git/TellorCore/contracts/TellorGetters.sol\":{\"keccak256\":\"0x80d17c85e3f15a9f94661b141f44b5b40302e75b5a038cccef1006bab8ff12a9\",\"urls\":[\"bzzr://bef39b25be640e7a4a38c89236deac83d195cad94045724b0abbe6a29b31a868\"]},\"/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol\":{\"keccak256\":\"0x067f075f9c8354a50c73352f6ed39349d9bd9124952ba8bb3cad14b1b80a8e1b\",\"urls\":[\"bzzr://694e2a77175763773dda8d5c39a16d83009310f7f0e5b7a58de81feec7ed5c23\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x0231a344c6dd588804879d1f7be0f1fe3b2e8f3b3e90e47c61b5012122917f5e\",\"urls\":[\"bzzr://1fab8d3512b4a6af21edc4d51047d809882999b8a02230d44ed5d723fc234c62\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorDispute.sol\":{\"keccak256\":\"0x192d07730a2ebc3380d7d2bc4138558a47e29e59db6a0abfc0e71fa002a5f7eb\",\"urls\":[\"bzzr://4aa1ba1c2a6db42bc8dafb3af372627de9bf78beefb26df3020bded8ed06097d\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0x2036c4c41dbf50893b91c17e7f49228e5981610598d8d315a04b46ce56a06b3d\",\"urls\":[\"bzzr://a03069761177e6fdb25156ecdd9129dcf5354f6bc965446c89f528919d1d26ed\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorLibrary.sol\":{\"keccak256\":\"0x439bdd80e1c593513074075118e77b83b283140a8d881bc21831f393c8608136\",\"urls\":[\"bzzr://3194d0402449a63e0725f1c14b579dc7224ed8b6fa4038792433b8879f511acd\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorStake.sol\":{\"keccak256\":\"0x8d87f36fe79eda90490140970e34e95b5dc5439ef140c530d46c3f5510fa05d8\",\"urls\":[\"bzzr://b08aabeb106650e219d7073d9671a8972cf4b3c93c09c47036e52d0f32eeeec6\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorStorage.sol\":{\"keccak256\":\"0x896d6e467dad53caf544c18342b1c31848e1c914096f5a246cfc9aeafa653a02\",\"urls\":[\"bzzr://f628c3feb7a819f8926644b6898c969d0679ecf7575bad9f36f3e7ac278b64f2\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorTransfer.sol\":{\"keccak256\":\"0x3209d8cf6f4249f88789e471222ad8db113e30c2c6db8817ea57d607ecc3540f\",\"urls\":[\"bzzr://458584f13777e33e02d19b534b82ab76fc19b7620a6c4d7b1555f12191b8f208\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/Utilities.sol\":{\"keccak256\":\"0x3d77df89f5b82b9d911b6269a67cf34efa168edd07501b8e71a971c8c83ddcb0\",\"urls\":[\"bzzr://2c49e5c10172e7a9d741485cf80cdb71867e725056200ac2331271d09b018261\"]},\"/Users/mdcoon/git/TellorCore/contracts/userFiles/Optimistic.sol\":{\"keccak256\":\"0x3e70b5e151dbb51cdfc21994028ddbacae88a5baeee282e68e3cd3975461dca1\",\"urls\":[\"bzzr://86aed01e4ae6c49a77d96b09bb45fdaecf25840838188aeee6bef64635987d54\"]},\"/Users/mdcoon/git/TellorCore/contracts/userFiles/TestContract.sol\":{\"keccak256\":\"0xb4818aacc9402f013460db020c01736b7f546d1057f6453c2cf12f86bd24da0f\",\"urls\":[\"bzzr://62b74ea5d46a70a934f6aede4f482f275dda74a2bbf788a6989d424b1e298a56\"]},\"/Users/mdcoon/git/TellorCore/contracts/userFiles/UserContract.sol\":{\"keccak256\":\"0x0ed2fb4601de1307c8a7be6083944c39c4dc9642d92171257428c113cc58c4fb\",\"urls\":[\"bzzr://33fe971bfb46192f195ea457655c56ce2e9c07975e3d33a4872cf22e0ed487ad\"]},\"/Users/mdcoon/git/TellorCore/contracts/userFiles/UsingTellor.sol\":{\"keccak256\":\"0x8d004f93bd54a08ef9a28beb777e9f929fcc850b5a01d2f96403cf8bfd434b2e\",\"urls\":[\"bzzr://e62e41d3380e445350057ee1ee5343a068b810a20c280c18da9b47239df8fa8d\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e7338038062002e73833981018060405260a08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080516401000000008111156200006e57600080fd5b828101905060208101848111156200008557600080fd5b8151856020820283011164010000000082111715620000a357600080fd5b505092919060200180519060200190929190505050848484848484806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505083600a8190555082600b819055508060098190555081600790805190602001906200016d9291906200017e565b5050505050505050505050620001f8565b828054828255906000526020600020908101928215620001bd579160200282015b82811115620001bc5782518255916020019190600101906200019f565b5b509050620001cc9190620001d0565b5090565b620001f591905b80821115620001f1576000816000905550600101620001d7565b5090565b90565b612c6b80620002086000396000f3fe60806040526004361061023b5760003560e01c806371d8dd191161012e578063ac33a273116100ab578063dc7ebf0e1161006f578063dc7ebf0e14610d1d578063e086e5ec14610dad578063e631def714610dc4578063e723e3b514610e13578063f2fde38b14610e4b5761023b565b8063ac33a27314610b80578063b63f210a14610bec578063b9ce896b14610c58578063bad4d21e14610c83578063d269a83c14610cb25761023b565b806387105801116100f25780638710580114610a3f5780638da5cb5b14610a5657806391bf116f14610aad5780639a64f07014610adc578063a1206d4e14610b2f5761023b565b806371d8dd19146108e8578063752d49a114610937578063775f75df1461097c5780637b8d56e3146109a75780637ccc586e146109ec5761023b565b80633fcad964116101bc57806359abbfe41161018057806359abbfe41461075a5780635bf31d4d146107c65780635f059f3e146107f1578063681012e51461085c57806369949a86146108875761023b565b80633fcad964146104a45780633fff2816146105055780634482e6f3146105f4578063550921d4146106d6578063556f0dc71461072f5761023b565b80632aa0bc1f116102035780632aa0bc1f1461035957806336e9d632146103a857806337ae9e43146103fb5780633c9177cd1461044e5780633f35ff32146104795761023b565b8063062777ff146102405780630f76c1141461029a57806316e72abb146102c55780631714b0c5146102f0578063292b8cce1461032b575b600080fd5b34801561024c57600080fd5b506102796004803603602081101561026357600080fd5b8101908080359060200190929190505050610e9c565b60405180838152602001821515151581526020019250505060405180910390f35b3480156102a657600080fd5b506102af611453565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b506102da6114fc565b6040518082815260200191505060405180910390f35b3480156102fc57600080fd5b506103296004803603602081101561031357600080fd5b8101908080359060200190929190505050611502565b005b6103576004803603602081101561034157600080fd5b810190808035906020019092919050505061152f565b005b34801561036557600080fd5b506103926004803603602081101561037c57600080fd5b8101908080359060200190929190505050611785565b6040518082815260200191505060405180910390f35b3480156103b457600080fd5b506103e1600480360360208110156103cb57600080fd5b81019080803590602001909291905050506117a5565b604051808215151515815260200191505060405180910390f35b34801561040757600080fd5b506104346004803603602081101561041e57600080fd5b81019080803590602001909291905050506117c5565b604051808215151515815260200191505060405180910390f35b34801561045a57600080fd5b506104636117e5565b6040518082815260200191505060405180910390f35b34801561048557600080fd5b5061048e6117eb565b6040518082815260200191505060405180910390f35b3480156104b057600080fd5b506104dd600480360360208110156104c757600080fd5b81019080803590602001909291905050506117f1565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b34801561051157600080fd5b506105f26004803603608081101561052857600080fd5b810190808035906020019064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b90919293919293908035906020019064010000000081111561059a57600080fd5b8201836020820111156105ac57600080fd5b803590602001918460018302840111640100000000831117156105ce57600080fd5b909192939192939080359060200190929190803590602001909291905050506118c4565b005b6106d46004803603608081101561060a57600080fd5b810190808035906020019064010000000081111561062757600080fd5b82018360208201111561063957600080fd5b8035906020019184600183028401116401000000008311171561065b57600080fd5b90919293919293908035906020019064010000000081111561067c57600080fd5b82018360208201111561068e57600080fd5b803590602001918460018302840111640100000000831117156106b057600080fd5b90919293919293908035906020019092919080359060200190929190505050611bc0565b005b3480156106e257600080fd5b50610719600480360360408110156106f957600080fd5b810190808035906020019092919080359060200190929190505050611cc5565b6040518082815260200191505060405180910390f35b34801561073b57600080fd5b50610744611cf3565b6040518082815260200191505060405180910390f35b34801561076657600080fd5b5061076f611cf9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107b2578082015181840152602081019050610797565b505050509050019250505060405180910390f35b3480156107d257600080fd5b506107db611d51565b6040518082815260200191505060405180910390f35b3480156107fd57600080fd5b506108346004803603604081101561081457600080fd5b810190808035906020019092919080359060200190929190505050611d57565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b34801561086857600080fd5b50610871611e32565b6040518082815260200191505060405180910390f35b34801561089357600080fd5b506108c0600480360360208110156108aa57600080fd5b8101908080359060200190929190505050611e3f565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b3480156108f457600080fd5b506109216004803603602081101561090b57600080fd5b8101908080359060200190929190505050611f3b565b6040518082815260200191505060405180910390f35b34801561094357600080fd5b5061097a6004803603604081101561095a57600080fd5b810190808035906020019092919080359060200190929190505050611f5c565b005b34801561098857600080fd5b506109916121e2565b6040518082815260200191505060405180910390f35b3480156109b357600080fd5b506109ea600480360360408110156109ca57600080fd5b8101908080359060200190929190803590602001909291905050506121e8565b005b3480156109f857600080fd5b50610a2560048036036020811015610a0f57600080fd5b81019080803590602001909291905050506123d9565b604051808215151515815260200191505060405180910390f35b348015610a4b57600080fd5b50610a54612403565b005b348015610a6257600080fd5b50610a6b6124d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ab957600080fd5b50610ac26124fe565b604051808215151515815260200191505060405180910390f35b348015610ae857600080fd5b50610b1560048036036020811015610aff57600080fd5b8101908080359060200190929190505050612511565b604051808215151515815260200191505060405180910390f35b348015610b3b57600080fd5b50610b7e60048036036020811015610b5257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061253b565b005b348015610b8c57600080fd5b50610b95612641565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bd8578082015181840152602081019050610bbd565b505050509050019250505060405180910390f35b348015610bf857600080fd5b50610c01612699565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c44578082015181840152602081019050610c29565b505050509050019250505060405180910390f35b348015610c6457600080fd5b50610c6d6126f1565b6040518082815260200191505060405180910390f35b348015610c8f57600080fd5b50610c986126f7565b604051808215151515815260200191505060405180910390f35b348015610cbe57600080fd5b50610cf560048036036040811015610cd557600080fd5b81019080803590602001909291908035906020019092919050505061270a565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b348015610d2957600080fd5b50610d5660048036036020811015610d4057600080fd5b81019080803590602001909291905050506127e5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d99578082015181840152602081019050610d7e565b505050509050019250505060405180910390f35b348015610db957600080fd5b50610dc2612850565b005b348015610dd057600080fd5b50610dfd60048036036020811015610de757600080fd5b8101908080359060200190929190505050612995565b6040518082815260200191505060405180910390f35b610e4960048036036040811015610e2957600080fd5b8101908080359060200190929190803590602001909291905050506129b2565b005b348015610e5757600080fd5b50610e9a60048036036020811015610e6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a4b565b005b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0857600080fd5b505afa158015610f1c573d6000803e3d6000fd5b505050506040513d6020811015610f3257600080fd5b8101908080519060200190929190505050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015610fae57600080fd5b505afa158015610fc2573d6000803e3d6000fd5b505050506040513d6020811015610fd857600080fd5b810190808051906020019092919050505090506000808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561106b57600080fd5b505afa15801561107f573d6000803e3d6000fd5b505050506040513d602081101561109557600080fd5b810190808051906020019092919050505090506000600190505b6007805490508111611449576110c58189611d57565b80955081995082985050505085156112f557600060095484816110e457fe5b06840390506000600160056000848152602001908152602001600020805490500160056000848152602001908152602001600020805490506003600085815260200190815260200160002054028a018161113a57fe5b0490508060036000848152602001908152602001600020819055507f11d6fa234e47ea0871bd2e6efeb4e7be326a7216c36990b799a61a501cfcf1c38282604051808381526020018281526020019250505060405180910390a160056000838152602001908152602001600020839080600181540180825580915050906001820390600052602060002001600090919290919091505550600015156002600084815260200190815260200160002060009054906101000a900460ff161515141561129357600682908060018154018082558091505090600182039060005260206000200160009091929091909150555060016002600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817f2afa03c814297ffc234ff967b6f0863d3c358be243103f20217c8d3a4d39f9c08a6040518082815260200191505060405180910390a26112ee565b600115156004600084815260200190815260200160002060009054906101000a900460ff16151514156112ed5760006004600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b505061143c565b6007805490508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d60208110156113a257600080fd5b8101908080519060200190929190505050111561143b578373ffffffffffffffffffffffffffffffffffffffff1663752d49a18260078054905085816113e457fe5b046040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b505050505b5b80806001019150506110af565b5050505050915091565b600080600680549050116114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f54696d657374616d707327206c656e677468206973203000000000000000000081525060200191505060405180910390fd5b6114f76006600160068054905003815481106114e757fe5b9060005260206000200154612995565b905090565b600f5481565b600954428161150d57fe5b064203600c8190555080600954428161152257fe5b06420301600d8190555050565b600a543410156115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f56616c75652069732062656c6f7720646973707574652066656500000000000081525060200191505060405180910390fd5b6002600082815260200190815260200160002060009054906101000a900460ff1661161d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180612c0c6034913960400191505060405180910390fd5b600b548101600954428161162d57fe5b06420311156116a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4469737075746520706572696f6420697320636c6f736564000000000000000081525060200191505060405180910390fd5b60016004600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055507fb199747b7b98ffd681a09c542f7f62ba4972f6f5b7d791b6f8bba36862cbdd2b33826003600085815260200190815260200160002054604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150565b600060056000838152602001908152602001600020805490509050919050565b60026020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b600d5481565b600e5481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633fcad964856040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b15801561186857600080fd5b505afa15801561187c573d6000803e3d6000fd5b505050506040513d606081101561189257600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509193909250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b15801561192d57600080fd5b505afa158015611941573d6000803e3d6000fd5b505050506040513d602081101561195757600080fd5b810190808051906020019092919050505090506000821115611adc578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d6020811015611a5857600080fd5b8101908080519060200190929190505050611adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b5b8073ffffffffffffffffffffffffffffffffffffffff16633fff28168888888888886040518763ffffffff1660e01b81526004018080602001806020018581526020018481526020018381038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508381038252878782818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b5050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634482e6f3348888888888886040518863ffffffff1660e01b81526004018080602001806020018581526020018481526020018381038352898982818152602001925080828437600081840152601f19601f8201169050808301925050508381038252878782818152602001925080828437600081840152601f19601f820116905080830192505050985050505050505050506000604051808303818588803b158015611ca457600080fd5b505af1158015611cb8573d6000803e3d6000fd5b5050505050505050505050565b60056020528160005260406000208181548110611cde57fe5b90600052602060002001600091509150505481565b60095481565b60606006805480602002602001604051908101604052809291908181526020018280548015611d4757602002820191906000526020600020905b815481526020019060010190808311611d33575b5050505050905090565b600b5481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f059f3e86866040518363ffffffff1660e01b8152600401808381526020018281526020019250505060606040518083038186803b158015611dd657600080fd5b505afa158015611dea573d6000803e3d6000fd5b505050506040513d6060811015611e0057600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509250925092565b6000600880549050905090565b60008060008060068054905090506000811115611f215760008190505b6000811115611efe578560066001830381548110611e7657fe5b906000526020600020015410158015611ecd5750600015156004600060066001850381548110611ea257fe5b9060005260206000200154815260200190815260200160002060009054906101000a900460ff161515145b15611ef05760066001820381548110611ee257fe5b906000526020600020015492505b808060019003915050611e5c565b506000821115611f20576001611f1383612995565b8393509350935050611f34565b5b6000806000819150809050935093509350505b9193909250565b600060088281548110611f4a57fe5b90600052602060002001549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a80209736040518163ffffffff1660e01b815260040160206040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d6020811015611fef57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156120bd57600080fd5b505af11580156120d1573d6000803e3d6000fd5b505050506040513d60208110156120e757600080fd5b810190808051906020019092919050505061216a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663752d49a184846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156121c557600080fd5b505af11580156121d9573d6000803e3d6000fd5b50505050505050565b600c5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b600015156122b883612511565b15151461232d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f54696d657374616d7020697320616c726561647920736574000000000000000081525060200191505060405180910390fd5b80600360008481526020019081526020016000208190555060016002600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506006829080600181540180825580915050906001820390600052602060002001600090919290919091505550817f2afa03c814297ffc234ff967b6f0863d3c358be243103f20217c8d3a4d39f9c0826040518082815260200191505060405180910390a25050565b60006004600083815260200190815260200160002060009054906101000a900460ff169050919050565b600080612411600c54611e3f565b600e6000829550839190505582945050505081156124d457612434600d54611e3f565b600f6000829550839190505582945050505081156124d357600e54600f541115612474576001601060006101000a81548160ff0219169083151502179055505b6001601060016101000a81548160ff0219169083151502179055507fbbdea414ca4370d674fd5e370fbc6d7da2dafff34ec019faaf1c36b1180a314b600e54600f54604051808381526020018281526020019250505060405180910390a15b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060019054906101000a900460ff1681565b60006002600083815260200190815260200160002060009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600780548060200260200160405190810160405280929190818152602001828054801561268f57602002820191906000526020600020905b81548152602001906001019080831161267b575b5050505050905090565b606060088054806020026020016040519081016040528092919081815260200182805480156126e757602002820191906000526020600020905b8154815260200190600101908083116126d3575b5050505050905090565b600a5481565b601060009054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d269a83c86866040518363ffffffff1660e01b8152600401808381526020018281526020019250505060606040518083038186803b15801561278957600080fd5b505afa15801561279d573d6000803e3d6000fd5b505050506040513d60608110156127b357600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092509250925092565b60606005600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561284457602002820191906000526020600020905b815481526020019060010190808311612830575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612913576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612992573d6000803e3d6000fd5b50565b600060036000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e723e3b53484846040518463ffffffff1660e01b815260040180838152602001828152602001925050506000604051808303818588803b158015612a2e57600080fd5b505af1158015612a42573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b0e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f53656e646572206973206e6f74206f776e65720000000000000000000000000081525060200191505060405180910390fd5b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe56616c756520666f72207468652074696d657374616d70206265696e6720646973707574656420646f65736e2774206578697374a165627a7a723058204389c80a12c4cea71bcdea2a2a798626b13d245afdd6a773c6a1b3de294f37240029",
  "deployedBytecode": "",
  "sourceMap": "157:2425:26:-;;;1215:259;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:259:26;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1215:259:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1215:259:26;;;;;;;;;;;;;;;;;1389:13;1404:19;1425:14;1441:11;1454:12;2513:13:25;631::28;597:18;;:48;;;;;;;;;;;;;;;;;;663:10;655:5;;:18;;;;;;;;;;;;;;;;;;545:135;2555:19:25;2542:10;:32;;;;2600:14;2584:13;:30;;;;2638:12;2624:11;:26;;;;2673:11;2660:10;:24;;;;;;;;;;;;:::i;:::-;;2338:353;;;;;1215:259:26;;;;;157:2425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "157:2425:26:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4895:2955:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4895:2955:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4895:2955:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10093:207;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10093:207:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;296:23:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;296:23:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1644:169;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1644:169:26;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1644:169:26;;;;;;;;;;;;;;;;;:::i;:::-;;3774:773:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3774:773:25;;;;;;;;;;;;;;;;;:::i;:::-;;9564:152;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9564:152:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9564:152:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;308:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:39:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;308:39:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;509:46;;8:9:-1;5:2;;;30:1;27;20:12;5:2;509:46:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;509:46:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;233:26:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;233:26:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;265:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:25:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;960:197:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;960:197:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;960:197:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3138:397;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3138:397:28;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;3138:397:28;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3138:397:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3138:397:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3138:397:28;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3138:397:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3138:397:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3138:397:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4018:246;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;4018:246:28;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4018:246:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4018:246:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4018:246:28;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4018:246:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4018:246:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4018:246:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;638:55:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;638:55:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;638:55:25;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1137:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1137:26:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10426:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10426:100:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10426:100:25;;;;;;;;;;;;;;;;;1214:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1214:28:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1639:232:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1639:232:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1639:232:28;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11466:119:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11466:119:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8357:639;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8357:639:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8357:639:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12246:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12246:132:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12246:132:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4423:273:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4423:273:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4423:273:28;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;199:28:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;199:28:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2915:685:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2915:685:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2915:685:25;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12024:119;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12024:119:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12024:119:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2052:528:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2052:528:26;;;:::i;:::-;;274:28:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;274:28:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;351:25:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;351:25:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9871:110:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9871:110:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9871:110:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5231:203:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5231:203:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5231:203:28;;;;;;;;;;;;;;;;;;;:::i;:::-;;10682:100:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10682:100:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10682:100:25;;;;;;;;;;;;;;;;;11711:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11711:113:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11711:113:25;;;;;;;;;;;;;;;;;1169:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1169:25:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;325:20:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;325:20:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2223:259:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2223:259:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2223:259:28;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11165:146:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11165:146:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11165:146:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11165:146:25;;;;;;;;;;;;;;;;;7951:156;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7951:156:25;;;:::i;:::-;;9154:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9154:141:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9154:141:25;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4944:174:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4944:174:28;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5532:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5532:211:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5532:211:28;;;;;;;;;;;;;;;;;;;:::i;:::-;;4895:2955:25;4956:14;4972:12;5212:20;5248:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5248:41:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5248:41:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5248:41:25;;;;;;;;;;;;;;;;5212:78;;5300:18;5328;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5328:41:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5328:41:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5328:41:25;;;;;;;;;;;;;;;;5300:70;;5380:27;5417:23;5443:7;:17;;;5469:4;5443:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5443:32:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5443:32:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5443:32:25;;;;;;;;;;;;;;;;5417:58;;5664:9;5676:1;5664:13;;5659:2185;5684:10;:17;;;;5679:1;:22;5659:2185;;5949:40;5975:1;5978:10;5949:25;:40::i;:::-;5908:81;;;;;;;;;;;;6007:7;6003:1831;;;6034:16;6098:11;;6076:19;:33;;;;;;6053:19;:57;6034:76;;6262:17;6420:1;6382:18;:28;6401:8;6382:28;;;;;;;;;;;:35;;;;:39;6322:18;:28;6341:8;6322:28;;;;;;;;;;;:35;;;;6292:17;:27;6310:8;6292:27;;;;;;;;;;;;:65;6283:6;:74;6282:140;;;;;;6262:160;;6542:9;6512:17;:27;6530:8;6512:27;;;;;;;;;;;:39;;;;6574:38;6592:8;6602:9;6574:38;;;;;;;;;;;;;;;;;;;;;;;;6750:18;:28;6769:8;6750:28;;;;;;;;;;;6784:1;6750:36;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;6750:36:25;;;;;;;;;;;;;;;;;;;;;;7136:5;7115:26;;:7;:17;7123:8;7115:17;;;;;;;;;;;;;;;;;;;;;:26;;;7111:317;;;7165:10;7181:8;7165:25;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;7165:25:25;;;;;;;;;;;;;;;;;;;;;;7232:4;7212:7;:17;7220:8;7212:17;;;;;;;;;;;;:24;;;;;;;;;;;;;;;;;;7275:8;7263:29;7285:6;7263:29;;;;;;;;;;;;;;;;;;7111:317;;;7349:4;7321:32;;:14;:24;7336:8;7321:24;;;;;;;;;;;;;;;;;;;;;:32;;;7317:111;;;7404:5;7377:14;:24;7392:8;7377:24;;;;;;;;;;;;:32;;;;;;;;;;;;;;;;;;7317:111;7111:317;6003:1831;;;;;7661:10;:17;;;;7626:7;:17;;;7652:4;7626:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7626:32:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7626:32:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7626:32:25;;;;;;;;;;;;;;;;:52;7622:212;;;7761:11;:18;;;7780:1;7801:10;:17;;;;7783:15;:35;;;;;;7761:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7761:58:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7761:58:25;;;;7622:212;6003:1831;5703:3;;;;;;;5659:2185;;;;4895:2955;;;;;;;:::o;10093:207::-;10143:7;10190:1;10170:10;:17;;;;:21;10162:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10236;10259:10;10290:1;10270:10;:17;;;;:21;10259:33;;;;;;;;;;;;;;;;10236:22;:57::i;:::-;10229:64;;10093:207;:::o;296:23:26:-;;;;:::o;1644:169::-;1733:11;;1727:3;:17;;;;;;1720:3;:25;1704:13;:41;;;;1797:9;1782:11;;1776:3;:17;;;;;;1769:3;:25;:37;1755:11;:51;;;;1644:169;:::o;3774:773:25:-;3874:10;;3861:9;:23;;3853:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4014:7;:19;4022:10;4014:19;;;;;;;;;;;;;;;;;;;;;4006:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4196:13;;4183:10;:26;4167:11;;4161:3;:17;;;;;;4154:3;:25;:55;;4146:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4343:4;4314:14;:26;4329:10;4314:26;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;4421:19;4446:10;4421:36;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;4421:36:25;;;;;;;;;;;;;;;;;;;;;;4472:68;4486:10;4498;4510:17;:29;4528:10;4510:29;;;;;;;;;;;;4472:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3774:773;:::o;9564:152::-;9646:7;9672:18;:30;9691:10;9672:30;;;;;;;;;;;:37;;;;9665:44;;9564:152;;;:::o;308:39::-;;;;;;;;;;;;;;;;;;;;;;:::o;509:46::-;;;;;;;;;;;;;;;;;;;;;;:::o;233:26:26:-;;;;:::o;265:25::-;;;;:::o;960:197:28:-;1026:15;1043:13;1058:27;1104:18;;;;;;;;;;;:34;;;1139:10;1104:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1104:46:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1104:46:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1104:46:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1097:53;;;;;;960:197;;;;;:::o;3138:397::-;3265:14;3289:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3289:41:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3289:41:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3289:41:28;;;;;;;;;;;;;;;;3265:66;;3352:1;3345:4;:8;3341:120;;;3377:7;:20;;;3398:10;3418:4;3425;3377:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3377:53:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3377:53:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3377:53:28;;;;;;;;;;;;;;;;3369:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3341:120;3470:7;:19;;;3490:8;;3500:7;;3509:12;3523:4;3470:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3470:58:28;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3470:58:28;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3470:58:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3470:58:28;;;;3138:397;;;;;;;:::o;4018:246::-;4162:18;;;;;;;;;;;:39;;;4208:9;4219:8;;4229:7;;4238:12;4252:4;4162:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4162:95:28;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4162:95:28;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4162:95:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4162:95:28;;;;;4018:246;;;;;;:::o;638:55:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1137:26::-;;;;:::o;10426:100::-;10474:16;10509:10;10502:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10426:100;:::o;1214:28::-;;;;:::o;1639:232:28:-;1735:4;1741:7;1750:27;1796:18;;;;;;;;;;;:44;;;1841:10;1853;1796:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1796:68:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1796:68:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1796:68:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1789:75;;;;;;1639:232;;;;;:::o;11466:119:25:-;11526:7;11552:19;:26;;;;11545:33;;11466:119;:::o;8357:639::-;8436:4;8442:7;8451:27;8490:14;8507:10;:17;;;;8490:34;;8547:1;8538:6;:10;8534:426;;;8569:9;8581:6;8569:18;;8564:232;8593:1;8589;:5;8564:232;;;8644:10;8623;8638:1;8634;:5;8623:17;;;;;;;;;;;;;;;;:31;;:77;;;;;8695:5;8658:42;;:14;:33;8673:10;8688:1;8684;:5;8673:17;;;;;;;;;;;;;;;;8658:33;;;;;;;;;;;;;;;;;;;;;:42;;;8623:77;8619:163;;;8746:10;8761:1;8757;:5;8746:17;;;;;;;;;;;;;;;;8724:39;;8619:163;8596:3;;;;;;;;8564:232;;;;8835:1;8813:19;:23;8809:141;;;8864:4;8870:43;8893:19;8870:22;:43::i;:::-;8915:19;8856:79;;;;;;;;;8809:141;8534:426;8977:5;8984:1;8987;8969:20;;;;;;;;;;;;;8357:639;;;;;;:::o;12246:132::-;12318:7;12344:19;12364:6;12344:27;;;;;;;;;;;;;;;;12337:34;;12246:132;;;:::o;4423:273:28:-;4490:14;4514:18;;;;;;;;;;;:39;;;:41;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4514:41:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4514:41:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4514:41:28;;;;;;;;;;;;;;;;4490:66;;4574:7;:20;;;4595:10;4615:4;4622;4574:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4574:53:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4574:53:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4574:53:28;;;;;;;;;;;;;;;;4566:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4657:7;:14;;;4672:10;4684:4;4657:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4657:32:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4657:32:28;;;;4423:273;;;:::o;199:28:26:-;;;;:::o;2915:685:25:-;3051:5;;;;;;;;;;;3037:19;;:10;:19;;;3029:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3194:5;3168:31;;:22;3179:10;3168;:22::i;:::-;:31;;;3160:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3295:6;3263:17;:29;3281:10;3263:29;;;;;;;;;;;:38;;;;3382:4;3360:7;:19;3368:10;3360:19;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;3445:10;3461;3445:27;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3445:27:25;;;;;;;;;;;;;;;;;;;;;;3573:10;3561:31;3585:6;3561:31;;;;;;;;;;;;;;;;;;2915:685;;:::o;12024:119::-;12087:4;12110:14;:26;12125:10;12110:26;;;;;;;;;;;;;;;;;;;;;12103:33;;12024:119;;;:::o;2052:528:26:-;2098:12;2120:13;2174:43;2203:13;;2174:28;:43::i;:::-;2153:10;;2143:74;;;;;;;;;;;;;;2231:7;2227:347;;;2283:41;2312:11;;2283:28;:41::i;:::-;2264:8;;2254:70;;;;;;;;;;;;;;2342:7;2338:226;;;2384:10;;2373:8;;:21;2369:83;;;2429:4;2418:8;;:15;;;;;;;;;;;;;;;;;;2369:83;2485:4;2469:13;;:20;;;;;;;;;;;;;;;;;;2512:37;2528:10;;2540:8;;2512:37;;;;;;;;;;;;;;;;;;;;;;;;2338:226;2227:347;2052:528;;:::o;274:28:28:-;;;;;;;;;;;;;:::o;351:25:26:-;;;;;;;;;;;;;:::o;9871:110:25:-;9932:4;9955:7;:19;9963:10;9955:19;;;;;;;;;;;;;;;;;;;;;9948:26;;9871:110;;;:::o;5231:203:28:-;5318:5;;;;;;;;;;;5304:19;;:10;:19;;;5296:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5413:13;5379:18;;:48;;;;;;;;;;;;;;;;;;5231:203;:::o;10682:100:25:-;10730:16;10765:10;10758:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10682:100;:::o;11711:113::-;11763:16;11798:19;11791:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11711:113;:::o;1169:25::-;;;;:::o;325:20:26:-;;;;;;;;;;;;;:::o;2223:259:28:-;2333:16;2351:14;2367:27;2417:18;;;;;;;;;;;:34;;;2452:10;2464;2417:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2417:58:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2417:58:28;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2417:58:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2410:65;;;;;;2223:259;;;;;:::o;11165:146:25:-;11239:16;11274:18;:30;11293:10;11274:30;;;;;;;;;;;11267:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11165:146;;;:::o;7951:156::-;8015:5;;;;;;;;;;;8001:19;;:10;:19;;;7993:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8062:5;;;;;;;;;;;8054:23;;:46;8086:4;8078:21;;;8054:46;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8054:46:25;7951:156::o;9154:141::-;9227:13;9259:17;:29;9277:10;9259:29;;;;;;;;;;;;9252:36;;9154:141;;;:::o;4944:174:28:-;5041:18;;;;;;;;;;;5028:48;;;5083:9;5094:10;5106:4;5028:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5028:83:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5028:83:28;;;;;4944:174;;:::o;5532:211::-;5627:5;;;;;;;;;;;5613:19;;:10;:19;;;5605:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5671:38;5692:5;;;;;;;;;;;5699:9;5671:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5727:9;5719:5;;:17;;;;;;;;;;;;;;;;;;5532:211;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./Optimistic.sol\";\n/**\n* @title Reader\n* This contracts is a pretend contract using Tellor that compares two time values\n*/\ncontract TestContract is Optimistic {\n    uint256 public startDateTime;\n    uint256 public endDateTime;\n    uint256 public startValue;\n    uint256 public endValue;\n    bool public longWins;\n    bool public contractEnded;\n    event ContractSettled(uint256 _svalue, uint256 _evalue);\n    /**\n    * @dev This constructor function is used to pass variables to the optimistic contract's constructor\n    * and the function is blank\n    * @param _userContract address for UserContract\n    * @param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\n    * @param _disputePeriod is the time frame a value can be disputed after being imputed\n    * @param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\n    * It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\n    * System be sure to create some.\n    * @param _granularity is the amount of decimals desired on the requested value\n    */\n    constructor(address _userContract, uint256 _disputeFeeRequired, uint256 _disputePeriod, uint256[] memory _requestIds, uint256 _granularity)\n        public\n        Optimistic(_userContract, _disputeFeeRequired, _disputePeriod, _requestIds, _granularity)\n    {}\n\n    /**\n    * @dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\n    * @param _duration in seconds\n    */\n    function testContract(uint256 _duration) external {\n        startDateTime = now - (now % granularity);\n        endDateTime = now - (now % granularity) + _duration;\n    }\n\n    /**\n    * @dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\n    * and the first undisputed value after the end time of the contract and settleling(payin off) it.\n    */\n    function settleContracts() external {\n        bool _didGet;\n        uint256 _time;\n        (_didGet, startValue, _time) = getFirstUndisputedValueAfter(startDateTime);\n        if (_didGet) {\n            (_didGet, endValue, _time) = getFirstUndisputedValueAfter(endDateTime);\n            if (_didGet) {\n                if (endValue > startValue) {\n                    longWins = true;\n                }\n                contractEnded = true;\n                emit ContractSettled(startValue, endValue);\n            }\n        }\n    }\n}\n",
  "sourcePath": "/Users/mdcoon/git/TellorCore/contracts/userFiles/TestContract.sol",
  "ast": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/userFiles/TestContract.sol",
    "exportedSymbols": {
      "TestContract": [
        12194
      ]
    },
    "id": 12195,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12072,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:26"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/userFiles/Optimistic.sol",
        "file": "./Optimistic.sol",
        "id": 12073,
        "nodeType": "ImportDirective",
        "scope": 12195,
        "sourceUnit": 12071,
        "src": "25:26:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12074,
              "name": "Optimistic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12070,
              "src": "182:10:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Optimistic_$12070",
                "typeString": "contract Optimistic"
              }
            },
            "id": 12075,
            "nodeType": "InheritanceSpecifier",
            "src": "182:10:26"
          }
        ],
        "contractDependencies": [
          12070,
          12901
        ],
        "contractKind": "contract",
        "documentation": "@title Reader\nThis contracts is a pretend contract using Tellor that compares two time values",
        "fullyImplemented": true,
        "id": 12194,
        "linearizedBaseContracts": [
          12194,
          12070,
          12901
        ],
        "name": "TestContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12077,
            "name": "startDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "199:28:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12076,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "199:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12079,
            "name": "endDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "233:26:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12078,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "233:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12081,
            "name": "startValue",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "265:25:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12080,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "265:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12083,
            "name": "endValue",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "296:23:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12082,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "296:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12085,
            "name": "longWins",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "325:20:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 12084,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "325:4:26",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12087,
            "name": "contractEnded",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "351:25:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 12086,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "351:4:26",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 12093,
            "name": "ContractSettled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 12092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12089,
                  "indexed": false,
                  "name": "_svalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 12093,
                  "src": "404:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12088,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12091,
                  "indexed": false,
                  "name": "_evalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 12093,
                  "src": "421:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12090,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "421:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:34:26"
            },
            "src": "382:56:26"
          },
          {
            "body": {
              "id": 12114,
              "nodeType": "Block",
              "src": "1472:2:26",
              "statements": []
            },
            "documentation": "@dev This constructor function is used to pass variables to the optimistic contract's constructor\nand the function is blank\n@param _userContract address for UserContract\n@param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\n@param _disputePeriod is the time frame a value can be disputed after being imputed\n@param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\nIt is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\nSystem be sure to create some.\n@param _granularity is the amount of decimals desired on the requested value",
            "id": 12115,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 12107,
                    "name": "_userContract",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12095,
                    "src": "1389:13:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12108,
                    "name": "_disputeFeeRequired",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12097,
                    "src": "1404:19:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12109,
                    "name": "_disputePeriod",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12099,
                    "src": "1425:14:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12110,
                    "name": "_requestIds",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12102,
                    "src": "1441:11:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12111,
                    "name": "_granularity",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12104,
                    "src": "1454:12:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 12112,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 12106,
                  "name": "Optimistic",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 12070,
                  "src": "1378:10:26",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Optimistic_$12070_$",
                    "typeString": "type(contract Optimistic)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1378:89:26"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12095,
                  "name": "_userContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1227:21:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12094,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1227:7:26",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12097,
                  "name": "_disputeFeeRequired",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1250:27:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1250:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12099,
                  "name": "_disputePeriod",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1279:22:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12098,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1279:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12102,
                  "name": "_requestIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1303:28:26",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12100,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1303:7:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12101,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1303:9:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12104,
                  "name": "_granularity",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1333:20:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12103,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1333:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1226:128:26"
            },
            "returnParameters": {
              "id": 12113,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1472:0:26"
            },
            "scope": 12194,
            "src": "1215:259:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12140,
              "nodeType": "Block",
              "src": "1694:119:26",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12127,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 12120,
                      "name": "startDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12077,
                      "src": "1704:13:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 12126,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 12121,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12918,
                        "src": "1720:3:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 12124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 12122,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12918,
                              "src": "1727:3:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 12123,
                              "name": "granularity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11503,
                              "src": "1733:11:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1727:17:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 12125,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1726:19:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1720:25:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1704:41:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 12128,
                  "nodeType": "ExpressionStatement",
                  "src": "1704:41:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 12129,
                      "name": "endDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12079,
                      "src": "1755:11:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 12137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 12135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 12130,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12918,
                          "src": "1769:3:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 12133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 12131,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12918,
                                "src": "1776:3:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 12132,
                                "name": "granularity",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11503,
                                "src": "1782:11:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1776:17:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 12134,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1775:19:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1769:25:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 12136,
                        "name": "_duration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12117,
                        "src": "1797:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1769:37:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1755:51:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 12139,
                  "nodeType": "ExpressionStatement",
                  "src": "1755:51:26"
                }
              ]
            },
            "documentation": "@dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\n@param _duration in seconds",
            "id": 12141,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12117,
                  "name": "_duration",
                  "nodeType": "VariableDeclaration",
                  "scope": 12141,
                  "src": "1666:17:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1666:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1665:19:26"
            },
            "returnParameters": {
              "id": 12119,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1694:0:26"
            },
            "scope": 12194,
            "src": "1644:169:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 12192,
              "nodeType": "Block",
              "src": "2088:492:26",
              "statements": [
                {
                  "assignments": [
                    12145
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 12145,
                      "name": "_didGet",
                      "nodeType": "VariableDeclaration",
                      "scope": 12192,
                      "src": "2098:12:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 12144,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2098:4:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 12146,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2098:12:26"
                },
                {
                  "assignments": [
                    12148
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 12148,
                      "name": "_time",
                      "nodeType": "VariableDeclaration",
                      "scope": 12192,
                      "src": "2120:13:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 12147,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2120:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 12149,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2120:13:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "id": 12150,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12145,
                          "src": "2144:7:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 12151,
                          "name": "startValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12081,
                          "src": "2153:10:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 12152,
                          "name": "_time",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12148,
                          "src": "2165:5:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 12153,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "2143:28:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 12155,
                          "name": "startDateTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12077,
                          "src": "2203:13:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 12154,
                        "name": "getFirstUndisputedValueAfter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11936,
                        "src": "2174:28:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                          "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                        }
                      },
                      "id": 12156,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2174:43:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "src": "2143:74:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12158,
                  "nodeType": "ExpressionStatement",
                  "src": "2143:74:26"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 12159,
                    "name": "_didGet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12145,
                    "src": "2231:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 12191,
                  "nodeType": "IfStatement",
                  "src": "2227:347:26",
                  "trueBody": {
                    "id": 12190,
                    "nodeType": "Block",
                    "src": "2240:334:26",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 12167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 12160,
                                "name": "_didGet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12145,
                                "src": "2255:7:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 12161,
                                "name": "endValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12083,
                                "src": "2264:8:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 12162,
                                "name": "_time",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12148,
                                "src": "2274:5:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 12163,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "2254:26:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 12165,
                                "name": "endDateTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12079,
                                "src": "2312:11:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 12164,
                              "name": "getFirstUndisputedValueAfter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11936,
                              "src": "2283:28:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                                "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                              }
                            },
                            "id": 12166,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2283:41:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "src": "2254:70:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 12168,
                        "nodeType": "ExpressionStatement",
                        "src": "2254:70:26"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 12169,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12145,
                          "src": "2342:7:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 12189,
                        "nodeType": "IfStatement",
                        "src": "2338:226:26",
                        "trueBody": {
                          "id": 12188,
                          "nodeType": "Block",
                          "src": "2351:213:26",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 12172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 12170,
                                  "name": "endValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12083,
                                  "src": "2373:8:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 12171,
                                  "name": "startValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12081,
                                  "src": "2384:10:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2373:21:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 12178,
                              "nodeType": "IfStatement",
                              "src": "2369:83:26",
                              "trueBody": {
                                "id": 12177,
                                "nodeType": "Block",
                                "src": "2396:56:26",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 12175,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 12173,
                                        "name": "longWins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 12085,
                                        "src": "2418:8:26",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 12174,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2429:4:26",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "2418:15:26",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 12176,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2418:15:26"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 12181,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 12179,
                                  "name": "contractEnded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12087,
                                  "src": "2469:13:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 12180,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2485:4:26",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "2469:20:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 12182,
                              "nodeType": "ExpressionStatement",
                              "src": "2469:20:26"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 12184,
                                    "name": "startValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 12081,
                                    "src": "2528:10:26",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 12185,
                                    "name": "endValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 12083,
                                    "src": "2540:8:26",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 12183,
                                  "name": "ContractSettled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12093,
                                  "src": "2512:15:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 12186,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2512:37:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 12187,
                              "nodeType": "EmitStatement",
                              "src": "2507:42:26"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\nand the first undisputed value after the end time of the contract and settleling(payin off) it.",
            "id": 12193,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "settleContracts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12142,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2076:2:26"
            },
            "returnParameters": {
              "id": 12143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2088:0:26"
            },
            "scope": 12194,
            "src": "2052:528:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 12195,
        "src": "157:2425:26"
      }
    ],
    "src": "0:2583:26"
  },
  "legacyAST": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/userFiles/TestContract.sol",
    "exportedSymbols": {
      "TestContract": [
        12194
      ]
    },
    "id": 12195,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12072,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:26"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/userFiles/Optimistic.sol",
        "file": "./Optimistic.sol",
        "id": 12073,
        "nodeType": "ImportDirective",
        "scope": 12195,
        "sourceUnit": 12071,
        "src": "25:26:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 12074,
              "name": "Optimistic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12070,
              "src": "182:10:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Optimistic_$12070",
                "typeString": "contract Optimistic"
              }
            },
            "id": 12075,
            "nodeType": "InheritanceSpecifier",
            "src": "182:10:26"
          }
        ],
        "contractDependencies": [
          12070,
          12901
        ],
        "contractKind": "contract",
        "documentation": "@title Reader\nThis contracts is a pretend contract using Tellor that compares two time values",
        "fullyImplemented": true,
        "id": 12194,
        "linearizedBaseContracts": [
          12194,
          12070,
          12901
        ],
        "name": "TestContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12077,
            "name": "startDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "199:28:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12076,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "199:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12079,
            "name": "endDateTime",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "233:26:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12078,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "233:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12081,
            "name": "startValue",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "265:25:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12080,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "265:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12083,
            "name": "endValue",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "296:23:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 12082,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "296:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12085,
            "name": "longWins",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "325:20:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 12084,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "325:4:26",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12087,
            "name": "contractEnded",
            "nodeType": "VariableDeclaration",
            "scope": 12194,
            "src": "351:25:26",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 12086,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "351:4:26",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 12093,
            "name": "ContractSettled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 12092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12089,
                  "indexed": false,
                  "name": "_svalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 12093,
                  "src": "404:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12088,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12091,
                  "indexed": false,
                  "name": "_evalue",
                  "nodeType": "VariableDeclaration",
                  "scope": 12093,
                  "src": "421:15:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12090,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "421:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:34:26"
            },
            "src": "382:56:26"
          },
          {
            "body": {
              "id": 12114,
              "nodeType": "Block",
              "src": "1472:2:26",
              "statements": []
            },
            "documentation": "@dev This constructor function is used to pass variables to the optimistic contract's constructor\nand the function is blank\n@param _userContract address for UserContract\n@param _disputeFeeRequired the fee to dispute the optimistic price(price sumbitted by known trusted party)\n@param _disputePeriod is the time frame a value can be disputed after being imputed\n@param _requestIds are the requests Id's on the Tellor System corresponding to the data types used on this contract.\nIt is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor\nSystem be sure to create some.\n@param _granularity is the amount of decimals desired on the requested value",
            "id": 12115,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 12107,
                    "name": "_userContract",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12095,
                    "src": "1389:13:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12108,
                    "name": "_disputeFeeRequired",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12097,
                    "src": "1404:19:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12109,
                    "name": "_disputePeriod",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12099,
                    "src": "1425:14:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12110,
                    "name": "_requestIds",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12102,
                    "src": "1441:11:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                      "typeString": "uint256[] memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 12111,
                    "name": "_granularity",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12104,
                    "src": "1454:12:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 12112,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 12106,
                  "name": "Optimistic",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 12070,
                  "src": "1378:10:26",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Optimistic_$12070_$",
                    "typeString": "type(contract Optimistic)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1378:89:26"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12095,
                  "name": "_userContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1227:21:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12094,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1227:7:26",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12097,
                  "name": "_disputeFeeRequired",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1250:27:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1250:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12099,
                  "name": "_disputePeriod",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1279:22:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12098,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1279:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12102,
                  "name": "_requestIds",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1303:28:26",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12100,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1303:7:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12101,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1303:9:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12104,
                  "name": "_granularity",
                  "nodeType": "VariableDeclaration",
                  "scope": 12115,
                  "src": "1333:20:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12103,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1333:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1226:128:26"
            },
            "returnParameters": {
              "id": 12113,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1472:0:26"
            },
            "scope": 12194,
            "src": "1215:259:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12140,
              "nodeType": "Block",
              "src": "1694:119:26",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12127,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 12120,
                      "name": "startDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12077,
                      "src": "1704:13:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 12126,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 12121,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12918,
                        "src": "1720:3:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 12124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 12122,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12918,
                              "src": "1727:3:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 12123,
                              "name": "granularity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11503,
                              "src": "1733:11:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1727:17:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 12125,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1726:19:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1720:25:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1704:41:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 12128,
                  "nodeType": "ExpressionStatement",
                  "src": "1704:41:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 12129,
                      "name": "endDateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12079,
                      "src": "1755:11:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 12137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 12135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 12130,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12918,
                          "src": "1769:3:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 12133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 12131,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12918,
                                "src": "1776:3:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 12132,
                                "name": "granularity",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11503,
                                "src": "1782:11:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1776:17:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 12134,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1775:19:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1769:25:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "id": 12136,
                        "name": "_duration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12117,
                        "src": "1797:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "1769:37:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1755:51:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 12139,
                  "nodeType": "ExpressionStatement",
                  "src": "1755:51:26"
                }
              ]
            },
            "documentation": "@dev creates a start(now) and end time(now + duration specified) for testing a contract start and end period\n@param _duration in seconds",
            "id": 12141,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12117,
                  "name": "_duration",
                  "nodeType": "VariableDeclaration",
                  "scope": 12141,
                  "src": "1666:17:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1666:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1665:19:26"
            },
            "returnParameters": {
              "id": 12119,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1694:0:26"
            },
            "scope": 12194,
            "src": "1644:169:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 12192,
              "nodeType": "Block",
              "src": "2088:492:26",
              "statements": [
                {
                  "assignments": [
                    12145
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 12145,
                      "name": "_didGet",
                      "nodeType": "VariableDeclaration",
                      "scope": 12192,
                      "src": "2098:12:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 12144,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2098:4:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 12146,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2098:12:26"
                },
                {
                  "assignments": [
                    12148
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 12148,
                      "name": "_time",
                      "nodeType": "VariableDeclaration",
                      "scope": 12192,
                      "src": "2120:13:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 12147,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2120:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 12149,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2120:13:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "components": [
                        {
                          "argumentTypes": null,
                          "id": 12150,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12145,
                          "src": "2144:7:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 12151,
                          "name": "startValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12081,
                          "src": "2153:10:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 12152,
                          "name": "_time",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12148,
                          "src": "2165:5:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 12153,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "2143:28:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 12155,
                          "name": "startDateTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12077,
                          "src": "2203:13:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 12154,
                        "name": "getFirstUndisputedValueAfter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11936,
                        "src": "2174:28:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                          "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                        }
                      },
                      "id": 12156,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2174:43:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "tuple(bool,uint256,uint256)"
                      }
                    },
                    "src": "2143:74:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12158,
                  "nodeType": "ExpressionStatement",
                  "src": "2143:74:26"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 12159,
                    "name": "_didGet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12145,
                    "src": "2231:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 12191,
                  "nodeType": "IfStatement",
                  "src": "2227:347:26",
                  "trueBody": {
                    "id": 12190,
                    "nodeType": "Block",
                    "src": "2240:334:26",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 12167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 12160,
                                "name": "_didGet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12145,
                                "src": "2255:7:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 12161,
                                "name": "endValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12083,
                                "src": "2264:8:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 12162,
                                "name": "_time",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12148,
                                "src": "2274:5:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 12163,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "2254:26:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 12165,
                                "name": "endDateTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 12079,
                                "src": "2312:11:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 12164,
                              "name": "getFirstUndisputedValueAfter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11936,
                              "src": "2283:28:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$",
                                "typeString": "function (uint256) view returns (bool,uint256,uint256)"
                              }
                            },
                            "id": 12166,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2283:41:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(bool,uint256,uint256)"
                            }
                          },
                          "src": "2254:70:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 12168,
                        "nodeType": "ExpressionStatement",
                        "src": "2254:70:26"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 12169,
                          "name": "_didGet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12145,
                          "src": "2342:7:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 12189,
                        "nodeType": "IfStatement",
                        "src": "2338:226:26",
                        "trueBody": {
                          "id": 12188,
                          "nodeType": "Block",
                          "src": "2351:213:26",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 12172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 12170,
                                  "name": "endValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12083,
                                  "src": "2373:8:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 12171,
                                  "name": "startValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12081,
                                  "src": "2384:10:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2373:21:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 12178,
                              "nodeType": "IfStatement",
                              "src": "2369:83:26",
                              "trueBody": {
                                "id": 12177,
                                "nodeType": "Block",
                                "src": "2396:56:26",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 12175,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 12173,
                                        "name": "longWins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 12085,
                                        "src": "2418:8:26",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 12174,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2429:4:26",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "2418:15:26",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 12176,
                                    "nodeType": "ExpressionStatement",
                                    "src": "2418:15:26"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 12181,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "id": 12179,
                                  "name": "contractEnded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12087,
                                  "src": "2469:13:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 12180,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2485:4:26",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "2469:20:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 12182,
                              "nodeType": "ExpressionStatement",
                              "src": "2469:20:26"
                            },
                            {
                              "eventCall": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 12184,
                                    "name": "startValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 12081,
                                    "src": "2528:10:26",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 12185,
                                    "name": "endValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 12083,
                                    "src": "2540:8:26",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 12183,
                                  "name": "ContractSettled",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12093,
                                  "src": "2512:15:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 12186,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2512:37:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 12187,
                              "nodeType": "EmitStatement",
                              "src": "2507:42:26"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev testing fucntion that settles the contract by getting the first undisputed value after the startDateTime\nand the first undisputed value after the end time of the contract and settleling(payin off) it.",
            "id": 12193,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "settleContracts",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12142,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2076:2:26"
            },
            "returnParameters": {
              "id": 12143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2088:0:26"
            },
            "scope": 12194,
            "src": "2052:528:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 12195,
        "src": "157:2425:26"
      }
    ],
    "src": "0:2583:26"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-10-02T13:26:13.781Z",
  "devdoc": {
    "methods": {
      "addTip(uint256,uint256)": {
        "details": "Allows the user to tip miners for the specified request using Tributes",
        "params": {
          "_requestId": "to tip",
          "_tip": "amount"
        }
      },
      "addTipWithEther(uint256,uint256)": {
        "details": "Allows user to add tip with Ether by sending the ETH to the userContract and exchanging it for Tributes at the price specified by the userContract owner.",
        "params": {
          "_requestId": "to tip",
          "_tip": "amount"
        }
      },
      "constructor": {
        "details": "This constructor function is used to pass variables to the optimistic contract's constructor and the function is blank",
        "params": {
          "_disputeFeeRequired": "the fee to dispute the optimistic price(price sumbitted by known trusted party)",
          "_disputePeriod": "is the time frame a value can be disputed after being imputed",
          "_granularity": "is the amount of decimals desired on the requested value",
          "_requestIds": "are the requests Id's on the Tellor System corresponding to the data types used on this contract. It is recommended to use several requestId's that pull from several API's. If requestsId's don't exist in the Tellor System be sure to create some.",
          "_userContract": "address for UserContract"
        }
      },
      "disputeOptimisticValue(uint256)": {
        "details": "allows user to initiate dispute on the value of the specified timestamp",
        "params": {
          "_timestamp": "is the timestamp for the value to be disputed"
        }
      },
      "getAnyDataAfter(uint256,uint256)": {
        "details": "Allows the user to get the first value for the requestId after the specified timestamp",
        "params": {
          "_requestId": "is the requestId to look up the value for",
          "_timestamp": "after which to search for first verified value"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp"
      },
      "getCurrentValue()": {
        "details": "Getter function for latest value available",
        "return": "latest value available"
      },
      "getCurrentValue(uint256)": {
        "details": "Allows the user to get the latest value for the requestId specified",
        "params": {
          "_requestId": "is the requestId to look up the value for"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp"
      },
      "getDisputedValueByIndex(uint256)": {
        "details": "Getter function for the dispute value by index",
        "return": "the value"
      },
      "getDisputedValues()": {
        "details": "Getter function for all disputed values",
        "return": "the array with all values under dispute"
      },
      "getFirstUndisputedValueAfter(uint256)": {
        "details": "Get the first undisputed value after the timestamp specified. This function is used within the getTellorValues but can be used on its own.",
        "params": {
          "_timestamp": "to search the first undisputed value there after"
        }
      },
      "getFirstVerifiedDataAfter(uint256,uint256)": {
        "details": "Allows the user to get the first verified value for the requestId after the specified timestamp",
        "params": {
          "_requestId": "is the requestId to look up the value for",
          "_timestamp": "after which to search for first verified value"
        },
        "return": "bool true if it is able to retreive a value, the value, and the value's timestamp, the timestamp after which it searched for the first verified value"
      },
      "getIsValue(uint256)": {
        "details": "Checks to if a value exists for the specifived timestamp",
        "params": {
          "_timestamp": "to verify"
        },
        "return": "ture if it exists"
      },
      "getMyValuesByTimestamp(uint256)": {
        "details": "Getter function for the value based on the timestamp specified",
        "params": {
          "_timestamp": "to retreive value from"
        }
      },
      "getNumberOfDisputedValues()": {
        "details": "Getter function for the number of disputed values",
        "return": "uint count of number of values for the spedified timestamp"
      },
      "getNumberOfValuesPerTimestamp(uint256)": {
        "details": "Getter function for the number of RequestIds associated with a timestamp, based on the timestamp specified",
        "params": {
          "_timestamp": "to retreive number of requestIds"
        },
        "return": "uint count of number of values for the spedified timestamp"
      },
      "getRequestIds()": {
        "details": "Getter function for the requests Ids' from Tellor associated with this price feed",
        "return": "uint array of requests Ids'"
      },
      "getRequestIdsIncluded(uint256)": {
        "details": "Getter function for the requests Ids' from Tellor associated with this price feed at the specified timestamp. This only gets populated after a dispute is initiated and the function getTellorValues is ran.",
        "params": {
          "_timestamp": "to retreive the requestIds"
        },
        "return": "uint array of requests Ids' included in the calcluation of the value"
      },
      "getTellorValues(uint256)": {
        "details": "This function gets the Tellor requestIds values for the disputed timestamp. It averages the values on the requestsIds and replaces the value set by the contract owner, centralized party.",
        "params": {
          "_timestamp": "to get Tellor data from"
        },
        "return": "uint of new value and true if it was able to get Tellor data"
      },
      "getTimestamps()": {
        "details": "Getter function for the timestamps available",
        "return": "uint array of timestamps available"
      },
      "isDisputed(uint256)": {
        "details": "This checks if the value for the specified timestamp is under dispute",
        "params": {
          "_timestamp": "to check if it is under dispute"
        },
        "return": "true if it is under dispute"
      },
      "requestData(string,string,uint256,uint256)": {
        "details": "Allows the user to submit a request for data to the oracle using Tributes Allowing this prevents us from increasing spread too high (since if we set the price too hight users will just go to an exchange and get tokens from there)",
        "params": {
          "_granularity": "is the number of decimals miners should include on the submitted value",
          "_request": "string API being requested to be mined",
          "_symbol": "is the short string symbol for the api request",
          "_tip": "amount the requester is willing to pay to be get on queue. Miners mine the onDeckQueryHash, or the api with the highest payout pool"
        }
      },
      "requestDataWithEther(string,string,uint256,uint256)": {
        "details": "Allows the user to submit a request for data to the oracle using ETH",
        "params": {
          "_granularity": "is the number of decimals miners should include on the submitted value",
          "_request": "string API being requested to be mined",
          "_symbol": "is the short string symbol for the api request",
          "_tip": "amount the requester is willing to pay to be get on queue. Miners mine the onDeckQueryHash, or the api with the highest payout pool"
        }
      },
      "setUserContract(address)": {
        "details": "allows owner to set the user contract address",
        "params": {
          "_userContract": "address"
        }
      },
      "setValue(uint256,uint256)": {
        "details": "allows contract owner, a centralized party to enter value",
        "params": {
          "_timestamp": "is the timestamp for the value",
          "_value": "is the value for the timestamp specified"
        }
      },
      "settleContracts()": {
        "details": "testing fucntion that settles the contract by getting the first undisputed value after the startDateTime and the first undisputed value after the end time of the contract and settleling(payin off) it."
      },
      "testContract(uint256)": {
        "details": "creates a start(now) and end time(now + duration specified) for testing a contract start and end period",
        "params": {
          "_duration": "in seconds"
        }
      },
      "transferOwnership(address)": {
        "details": "allows owner to transfer ownership",
        "params": {
          "_newOwner": "address"
        }
      },
      "withdrawETH()": {
        "details": "Allows the contract owner(Tellor) to withdraw ETH from this contract"
      }
    },
    "title": "Reader This contracts is a pretend contract using Tellor that compares two time values"
  },
  "userdoc": {
    "methods": {}
  }
}