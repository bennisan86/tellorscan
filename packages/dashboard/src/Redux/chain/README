This package contains chain-related code that updates the redux store.

actions represent the state change functions that trigger reducer functions.

reducers are what manipulate the redux store state.

operations are what components can call through redux dispatch to start the
redux state change process.

Since blockchain operates asynchronously outside of the UI lifecyle, we need
a way to trigger state changes based on blockchain activity. This is what the
procs directory contains.

The main element of the procs directory is the EthProcessor. It's job is to
wire up specific processors of new blocks. The processor itself subscribes to
new blocks and calls on sub-processors to extract, transform, and enrich
transactions in the block and ultimately to update the redux store.

The flow is something like:

block --> ABIParse -> [redux store enrichment] -> EmitEvents -> local storage

Inside the redux store enrichment, specific handlers are called depending on
the function called on the smart contract. This is referred to as the txn 'fn'
or 'fnContext' (function context). It is derived by parsing the input data of
a txn and matching with the function signature in the contract's ABI. Depending
on which function was called, handlers will extract events and update the redux
store accordingly.

Since we have a limited set of contract functions being called, it makes handler
logic pretty straight forward.
