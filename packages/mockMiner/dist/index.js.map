{"version":3,"sources":["../src/index.js"],"names":["require","config","DEFAULT_MINE_SLEEP","PERIODS","s","m","h","d","parseDuration","length","t","num","i","c","charAt","isNaN","substring","actualPeriod","console","log","moment","duration","asMilliseconds","main","addr","process","env","CONTRACT_ADDRESS","Error","web3Url","WEB3_URL","startsWith","sleepTime","MINE_SLEEP_CYCLE","requestRate","REQUEST_RATE","queryStr","QUERY_STR","provider","Web3","providers","WebsocketProvider","initRequired","INIT_REQUIRED","trim","undefined","Promise","done","err","chain","Chain","mnemonic","masterAddress","init","then","task","TaskHandler","miningSleepTime","queryString","queryRate","start"],"mappings":"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","file":"index.js","sourcesContent":["import \"babel-polyfill\";\nimport Chain from './ChainWrapper';\nimport TaskHandler from './TaskHandler';\nimport Web3 from 'web3';\nimport moment from 'moment';\nrequire(\"dotenv\").config();\n\nconst DEFAULT_MINE_SLEEP = '65s';\n\nconst PERIODS = {\n  s: \"seconds\",\n  m: \"minutes\",\n  h: \"hours\",\n  d: \"days\"\n}\n\nconst parseDuration = d => {\n  if(!d || d.length === 0) {\n    return 0;\n  }\n\n  let t = '';\n  let num = '';\n  for(let i=d.length-1;i>=0;i--) {\n    let c = d.charAt(i);\n    if(isNaN(c)) {\n      t = c + t;\n    } else {\n      num = d.substring(0,i+1);\n      break;\n    }\n  }\n  let actualPeriod = PERIODS[t];\n  if(!actualPeriod) {\n    return 0;\n  }\n  console.log(\"Duration\", d, num-0, actualPeriod);\n  return moment.duration(num-0, actualPeriod).asMilliseconds();\n}\n\nconst main = async () => {\n  let addr = process.env.CONTRACT_ADDRESS;\n  if(!addr) {\n    throw new Error(\"Missing CONTRACT_ADDRESS environment var\")\n  }\n  let web3Url = process.env.WEB3_URL;\n  if(!web3Url) {\n    throw new Error(\"Missing WEB3_URL environment var\");\n  }\n  if(!web3Url.startsWith(\"ws\")) {\n    throw new Error(\"Only support websocket based web3 url: \" + web3Url);\n  }\n  let sleepTime = process.env.MINE_SLEEP_CYCLE || DEFAULT_MINE_SLEEP;\n  sleepTime = parseDuration(sleepTime);\n\n  console.log(\"Mining sleep time\", sleepTime);\n\n  let requestRate = process.env.REQUEST_RATE || '0';\n  requestRate = parseDuration(requestRate);\n  console.log(\"Request rate\", requestRate);\n\n  let queryStr = process.env.QUERY_STR;\n\n  let provider = new Web3.providers.WebsocketProvider(web3Url);\n\n  let initRequired = process.env.INIT_REQUIRED;\n  if(initRequired && initRequired.trim().length === 0){\n    initRequired = undefined;\n  }\n\n  return new Promise((done,err)=>{\n    let chain = new Chain({\n      mnemonic: \"nick lucian brenda kevin sam fiscal patch fly damp ocean produce wish\",\n      masterAddress: addr,\n      provider\n    });\n\n    chain.init().then(async ()=>{\n      let task = new TaskHandler({\n        chain,\n        initRequired,\n        miningSleepTime: sleepTime,\n        queryString: queryStr,\n        queryRate: requestRate\n      });\n      await task.start();\n      done();\n    });\n  });\n}\n\nconsole.log(\"Starting mock miner...\");\nmain().then(()=>{\n  console.log(\"Done\");\n});\n"]}