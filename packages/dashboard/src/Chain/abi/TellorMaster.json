{
  "contractName": "TellorMaster",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256[9]"
        },
        {
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[9]\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor.  The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,  TellorGettersLibrary, and TellorStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  \",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp Only needs to be in library\",\"params\":{\"_newDeity\":\"the new Deity in the contract\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the \"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getName()\":{\"details\":\"Get the name of the token return string of the token name\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp \",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getSymbol()\":{\"details\":\"Get the symbol of the token return string of the token symbol\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable  \"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}},\"title\":\"Tellor Master\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorMaster.sol\":\"TellorMaster\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorGetters.sol\":{\"keccak256\":\"0x8ed463380ce18c3603328843304771f92ce5050526162e6c29a84216efeeb2fa\",\"urls\":[\"bzzr://5fcb36f424b7abc17ac903b90c719f2a188099034521adb098e0ceb020495313\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorMaster.sol\":{\"keccak256\":\"0xd305a18aa947d750d4726df98b1cf5d1a0f90aae0cb9bd347cffeccd165af744\",\"urls\":[\"bzzr://0921f78c39b35f7bb5abc9d60e94359d09c22167cb69c48e4e91a68e76225f92\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/OldTellorDispute.sol\":{\"keccak256\":\"0x57cd0dc9d42f1eb6aa9fb170cc8f6023eefbf86850936354ebe5db9bd08a4bb6\",\"urls\":[\"bzzr://6858e15fba3f43c694b856a318bdc34d011b2591acf32bfff25589793d9e111a\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/OldTellorTransfer.sol\":{\"keccak256\":\"0xbf2c0aca1da2b976aab744ac138644539ead27a3cf07dc8dfa2f3c2c6f4d4477\",\"urls\":[\"bzzr://a6a9a0f559da00cd64f4f4ba3c604564ce97c0a9e4211e58890dc4c3a3c9943a\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x536b8239017cc14773e30459c671447b3564adca6e0c2ab24d0ee70c85912830\",\"urls\":[\"bzzr://c26363f199291757c3891c37b66deddcf11c2449d5a6a4c376b7aca0922e309f\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0x31c8d3c7792ee1a9fac98ec809cc766a500421caff269b9c0c0753d95956732a\",\"urls\":[\"bzzr://e2cbdb3911ef3b9debd03020b8e3465b795f53609eb71703f4b4d201aa805bef\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/TellorStake.sol\":{\"keccak256\":\"0x984bb7fc76ec6e7f53065e92eae4aff930f540f683650ed0b79111d1eef301da\",\"urls\":[\"bzzr://c8de88727f95429d9774733e784530756642e4dc339a89d0190bd8cb7c4f4dba\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/TellorStorage.sol\":{\"keccak256\":\"0xc4705e47846af08077f685a50eaf01afbbfe9b32f5cdf62fa2489ba6b8ae6d92\",\"urls\":[\"bzzr://9101b29a2e3df0bee696d17b51bac53be3e8ab1c9330db867c1de8f3aac41414\"]},\"/Users/mdcoon/git/TellorCore/contracts/oldContracts/libraries/Utilities.sol\":{\"keccak256\":\"0x85b9b3dc3f792b50a8c256813fc2d6ddeed17253d7ed3fea7d9e8f6ea565224a\",\"urls\":[\"bzzr://c56f21a0920fa10b709188f05647397e442f6363888bb9e878779fdb0766383f\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051602080620031e78339810180604052602081101561003157600080fd5b8101908080519060200190929190505050600073__TellorStake___________________________634601f1cd90916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561009457600080fd5b505af41580156100a8573d6000803e3d6000fd5b50505050336000603f01600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150612f2980620002be6000396000f3fe6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca611276565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a611287565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611298565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b81019080803590602001909291905050506112b2565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b81019080803590602001909291905050506112cf565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b8101908080359060200190929190803590602001909291905050506112ef565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b810190808035906020019092919050505061130f565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132c565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611343565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b8101908080359060200190929190505050611415565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b8101908080359060200190929190505050611432565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061144f565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b81019080803590602001909291908035906020019092919050505061146f565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611495565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061155e565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b81019080803590602001909291908035906020019092919050505061157e565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b81019080803590602001909291908035906020019092919050505061159e565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b8101908080359060200190929190803590602001909291905050506115be565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115de565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c196116b0565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d8565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f8565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b810190808035906020019092919050505061170f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf611757565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b81019080803590602001909291908035906020019092919050505061176e565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b810190808035906020019092919050505061178e565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ab565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b8101908080359060200190929190803590602001909291905050506118a9565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b81019080803590602001909291905050506118c9565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e46118fb565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061191090919063ffffffff16565b9050919050565b61122a612e73565b611240838360006119309092919063ffffffff16565b905092915050565b600061125e8260006119a690919063ffffffff16565b9050919050565b606061127160006119e6565b905090565b60606112826000611a25565b905090565b60006112936000611a64565b905090565b60008060606112a76000611ab8565b925092509250909192565b60006112c8826000611bec90919063ffffffff16565b9050919050565b6000806112e6836000611c0c90919063ffffffff16565b91509150915091565b600061130783836000611c859092919063ffffffff16565b905092915050565b6000611325826000611cc790919063ffffffff16565b9050919050565b611340816000611ced90919063ffffffff16565b50565b60008073__OldTellorTransfer_____________________633f48b1ff909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b600061142b826000611e1c90919063ffffffff16565b9050919050565b6000611448826000611e3c90919063ffffffff16565b9050919050565b600061146783836000611e6a9092919063ffffffff16565b905092915050565b611477612e95565b61148d83836000611ed59092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________6393b182b39091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561151c57600080fd5b505af4158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b81019080805190602001909291905050509050919050565b600080611575836000611f8190919063ffffffff16565b91509150915091565b6000611596838360006120199092919063ffffffff16565b905092915050565b60006115b6838360006120529092919063ffffffff16565b905092915050565b60006115d6838360006120879092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________63acaab9e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561166d57600080fd5b505af4158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b8101908080519060200190929190505050905092915050565b600080600060606000806116c460006120bc565b955095509550955095509550909192939495565b60006116f0838360006123c69092919063ffffffff16565b905092915050565b61170c81600061243490919063ffffffff16565b50565b6000806000806000806000611722612eb7565b60006117388a60006125c690919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b61175f612eda565b611769600061299c565b905090565b6000611786838360006129eb9092919063ffffffff16565b905092915050565b60006117a4826000612a2090919063ffffffff16565b9050919050565b60008073__OldTellorTransfer_____________________63bf32006c909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561186657600080fd5b505af415801561187a573d6000803e3d6000fd5b505050506040513d602081101561189057600080fd5b8101908080519060200190929190505050905092915050565b60006118c183836000612a409092919063ffffffff16565b905092915050565b6060806000806000806118e6876000612a7590919063ffffffff16565b95509550955095509550955091939550919395565b6000806119086000612cd4565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611938612e73565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611998576020028201915b815481526020019060010190808311611984575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606040518060400160405280600281526020017f54540000000000000000000000000000000000000000000000000000000000008152509050919050565b60606040518060400160405280600f81526020017f54656c6c6f7220547269627574657300000000000000000000000000000000008152509050919050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611ac885612d96565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd75780601f10611bac57610100808354040283529160200191611bd7565b820191906000526020600020905b815481529060010190602001808311611bba57829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c7257611c66858583600301600185600301805490500381548110611c5657fe5b9060005260206000200154612087565b60019250925050611c7e565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d8f57600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e4c57600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611edd612e95565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f73576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f29575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061203e57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124d657600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125d9612eb7565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6129a4612eda565b816001016033806020026040519081016040528092919082603380156129df576020028201915b8154815260200190600101908083116129cb575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cb65780601f10612c8b57610100808354040283529160200191612cb6565b820191906000526020600020905b815481529060010190602001808311612c9957829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d8b8384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612087565b600191509150915091565b6000806000612de384600101603380602002604051908101604052809291908260338015612dd9576020028201915b815481526020019060010190808311612dc5575b5050505050612e0a565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612e1a57fe5b602002015191506000600190505b6033811015612e6d5782848260338110612e3e57fe5b60200201511115612e6057838160338110612e5557fe5b602002015192508091505b8080600101915050612e28565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea165627a7a72305820d2edd1842a92594d0c6514e65cf80e548cc34a185f93e7b442d84fcc78b4d0220029",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca611276565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a611287565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611298565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b81019080803590602001909291905050506112b2565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b81019080803590602001909291905050506112cf565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b8101908080359060200190929190803590602001909291905050506112ef565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b810190808035906020019092919050505061130f565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132c565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611343565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b8101908080359060200190929190505050611415565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b8101908080359060200190929190505050611432565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061144f565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b81019080803590602001909291908035906020019092919050505061146f565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611495565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061155e565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b81019080803590602001909291908035906020019092919050505061157e565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b81019080803590602001909291908035906020019092919050505061159e565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b8101908080359060200190929190803590602001909291905050506115be565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115de565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c196116b0565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d8565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f8565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b810190808035906020019092919050505061170f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf611757565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b81019080803590602001909291908035906020019092919050505061176e565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b810190808035906020019092919050505061178e565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ab565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b8101908080359060200190929190803590602001909291905050506118a9565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b81019080803590602001909291905050506118c9565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e46118fb565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061191090919063ffffffff16565b9050919050565b61122a612e73565b611240838360006119309092919063ffffffff16565b905092915050565b600061125e8260006119a690919063ffffffff16565b9050919050565b606061127160006119e6565b905090565b60606112826000611a25565b905090565b60006112936000611a64565b905090565b60008060606112a76000611ab8565b925092509250909192565b60006112c8826000611bec90919063ffffffff16565b9050919050565b6000806112e6836000611c0c90919063ffffffff16565b91509150915091565b600061130783836000611c859092919063ffffffff16565b905092915050565b6000611325826000611cc790919063ffffffff16565b9050919050565b611340816000611ced90919063ffffffff16565b50565b60008073__OldTellorTransfer_____________________633f48b1ff909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b600061142b826000611e1c90919063ffffffff16565b9050919050565b6000611448826000611e3c90919063ffffffff16565b9050919050565b600061146783836000611e6a9092919063ffffffff16565b905092915050565b611477612e95565b61148d83836000611ed59092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________6393b182b39091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561151c57600080fd5b505af4158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b81019080805190602001909291905050509050919050565b600080611575836000611f8190919063ffffffff16565b91509150915091565b6000611596838360006120199092919063ffffffff16565b905092915050565b60006115b6838360006120529092919063ffffffff16565b905092915050565b60006115d6838360006120879092919063ffffffff16565b905092915050565b60008073__OldTellorTransfer_____________________63acaab9e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561166d57600080fd5b505af4158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b8101908080519060200190929190505050905092915050565b600080600060606000806116c460006120bc565b955095509550955095509550909192939495565b60006116f0838360006123c69092919063ffffffff16565b905092915050565b61170c81600061243490919063ffffffff16565b50565b6000806000806000806000611722612eb7565b60006117388a60006125c690919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b61175f612eda565b611769600061299c565b905090565b6000611786838360006129eb9092919063ffffffff16565b905092915050565b60006117a4826000612a2090919063ffffffff16565b9050919050565b60008073__OldTellorTransfer_____________________63bf32006c909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561186657600080fd5b505af415801561187a573d6000803e3d6000fd5b505050506040513d602081101561189057600080fd5b8101908080519060200190929190505050905092915050565b60006118c183836000612a409092919063ffffffff16565b905092915050565b6060806000806000806118e6876000612a7590919063ffffffff16565b95509550955095509550955091939550919395565b6000806119086000612cd4565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611938612e73565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611998576020028201915b815481526020019060010190808311611984575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606040518060400160405280600281526020017f54540000000000000000000000000000000000000000000000000000000000008152509050919050565b60606040518060400160405280600f81526020017f54656c6c6f7220547269627574657300000000000000000000000000000000008152509050919050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611ac885612d96565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd75780601f10611bac57610100808354040283529160200191611bd7565b820191906000526020600020905b815481529060010190602001808311611bba57829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c7257611c66858583600301600185600301805490500381548110611c5657fe5b9060005260206000200154612087565b60019250925050611c7e565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d8f57600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e4c57600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611edd612e95565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f73576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f29575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061203e57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124d657600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125d9612eb7565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6129a4612eda565b816001016033806020026040519081016040528092919082603380156129df576020028201915b8154815260200190600101908083116129cb575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cb65780601f10612c8b57610100808354040283529160200191612cb6565b820191906000526020600020905b815481529060010190602001808311612c9957829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d8b8384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612087565b600191509150915091565b6000806000612de384600101603380602002604051908101604052809291908260338015612dd9576020028201915b815481526020019060010190808311612dc5575b5050505050612e0a565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612e1a57fe5b602002015191506000600190505b6033811015612e6d5782848260338110612e3e57fe5b60200201511115612e6057838160338110612e5557fe5b602002015192508091505b8080600101915050612e28565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea165627a7a72305820d2edd1842a92594d0c6514e65cf80e548cc34a185f93e7b442d84fcc78b4d0220029",
  "sourceMap": "326:2127:15:-;;;713:321;8:9:-1;5:2;;;30:1;27;20:12;5:2;713:321:15;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;713:321:15;;;;;;;;;;;;;;;;768:6;:11;;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;768:13:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;768:13:15;;;;833:10;791:6;:18;;:39;810:19;;;;;;;;;;;;;;;;;;;791:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;895:10;853:6;:18;;:39;872:19;;;;;;;;;;;;;;;;;;;853:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;964:15;915:6;:18;;:47;934:27;;;;;;;;;;;;;;;;;;;915:47;;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;994:33;1011:15;994:33;;;;;;;;;;;;;;;;;;;;;;713:321;326:2127;;;;;;",
  "deployedSourceMap": "326:2127:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1826:12;1841:6;:18;;:47;1860:27;;;;;;;;;;;;;;;;;;;1841:47;;;;;;;;;;;;;;;;;;;;;1826:62;;1898:22;1923:8;;1898:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1898:33:15;;;;;;;;2048:1;2045;2033:9;2027:16;2020:4;2009:9;2005:20;1999:4;1995:1;1991:6;1978:72;2075:14;2119:4;2113:11;2160:4;2157:1;2152:3;2137:28;2358:6;2370:1;2365:28;;;;2428:4;2423:3;2416:17;2365:28;2386:4;2381:3;2374:17;8557:147:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8557:147:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8557:147:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11250:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11250:185:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11250:185:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11250:185:14;;;;;;;;;;;;;;;;3322:121;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3322:121:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3322:121:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11535:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11535:99:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11535:99:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7478:95;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7478:95:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7478:95:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13988;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13988:95:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12952:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12952:132:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12952:132:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8920:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8920:146:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8920:146:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6391:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6391:140:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6391:140:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13361:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13361:147:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13361:147:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7936:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7936:151:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7936:151:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1242:94:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1242:94:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1242:94:15;;;;;;;;;;;;;;;;;;;:::i;:::-;;2050:146:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2050:146:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2050:146:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12606:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12606:108:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12606:108:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8255:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8255:143:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8255:143:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2502:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2502:137:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2502:137:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7179:202;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7179:202:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7179:202:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7179:202:14;;;;;;;;;;;;;;;;1666:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1666:111:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1666:111:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10828:125;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10828:125:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10828:125:14;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;11852:179;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11852:179:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11852:179:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5676:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5676:153:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5676:153:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13727:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13727:151:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13727:151:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1325:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1325:139:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1325:139:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4689:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4689:153:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4689:153:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2835:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2835:138:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2835:138:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1526:124:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1526:124:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1526:124:15;;;;;;;;;;;;;;;;;;;:::i;:::-;;4203:197:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4203:197:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4203:197:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4203:197:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9172:103;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9172:103:14;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9172:103:14;;;;;;;;;;;;;;;;6775:157;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6775:157:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6775:157:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5038:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5038:141:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5038:141:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;936:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;936:136:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;936:136:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9845:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9845:153:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9845:153:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10412:175;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10412:175:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10412:175:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10412:175:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10412:175:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6041:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6041:107:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8557:147;8629:4;8655:42;8686:10;8655:6;:30;;:42;;;;:::i;:::-;8648:49;;8557:147;;;:::o;11250:185::-;11341:14;;:::i;:::-;11373:55;11406:10;11417;11373:6;:32;;:55;;;;;:::i;:::-;11366:62;;11250:185;;;;:::o;3322:121::-;3383:7;3408:28;3430:5;3408:6;:21;;:28;;;;:::i;:::-;3401:35;;3322:121;;;:::o;11535:99::-;11578:13;11609:18;:6;:16;:18::i;:::-;11602:25;;11535:99;:::o;7478:95::-;7519:13;7550:16;:6;:14;:16::i;:::-;7543:23;;7478:95;:::o;13988:::-;14034:4;14056:20;:6;:18;:20::i;:::-;14049:27;;13988:95;:::o;12952:132::-;13004:4;13010;13015:13;13050:27;:6;:25;:27::i;:::-;13043:34;;;;;;12952:132;;;:::o;8920:146::-;8993:4;9019:40;9050:8;9019:6;:30;;:40;;;;:::i;:::-;9012:47;;8920:146;;;:::o;6391:140::-;6459:4;6464;6486:38;6513:10;6486:6;:26;;:38;;;;:::i;:::-;6479:45;;;;6391:140;;;:::o;13361:147::-;13438:4;13460:41;13479:10;13490;13460:6;:18;;:41;;;;;:::i;:::-;13453:48;;13361:147;;;;:::o;7936:151::-;8012:4;8034:46;8069:10;8034:6;:34;;:46;;;;:::i;:::-;8027:53;;7936:151;;;:::o;1242:94:15:-;1300:29;1319:9;1300:6;:18;;:29;;;;:::i;:::-;1242:94;:::o;2050:146:14:-;2128:4;2151:6;:18;;;;2170:5;2176:12;2151:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2151:38:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2151:38:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2151:38:14;;;;;;;;;;;;;;;;2144:45;;2050:146;;;;:::o;12606:108::-;12661:4;12683:24;12701:5;12683:6;:17;;:24;;;;:::i;:::-;12676:31;;12606:108;;;:::o;8255:143::-;8327:4;8349:42;8384:6;8349;:34;;:42;;;;:::i;:::-;8342:49;;8255:143;;;:::o;2502:137::-;2577:4;2599:33;2614:10;2625:6;2599;:14;;:33;;;;;:::i;:::-;2592:40;;2502:137;;;;:::o;7179:202::-;7277:17;;:::i;:::-;7312:62;7352:10;7363;7312:6;:39;;:62;;;;;:::i;:::-;7305:69;;7179:202;;;;:::o;1666:111::-;1723:4;1747:6;:16;;;;1764:5;1747:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1747:23:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1747:23:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1747:23:14;;;;;;;;;;;;;;;;1740:30;;1666:111;;;:::o;10828:125::-;10890:4;10895;10917:29;10938:7;10917:6;:20;;:29;;;;:::i;:::-;10910:36;;;;10828:125;;;:::o;11852:179::-;11945:4;11967:57;12006:10;12017:6;11967;:38;;:57;;;;;:::i;:::-;11960:64;;11852:179;;;;:::o;5676:153::-;5757:4;5779:43;5805:10;5816:5;5779:6;:25;;:43;;;;;:::i;:::-;5772:50;;5676:153;;;;:::o;13727:151::-;13806:4;13829:42;13849:10;13860;13829:6;:19;;:42;;;;;:::i;:::-;13822:49;;13727:151;;;;:::o;1325:139::-;1399:4;1421:6;:21;;;;1443:5;1449:7;1421:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1421:36:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1421:36:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1421:36:14;;;;;;;;;;;;;;;;1414:43;;1325:139;;;;:::o;4689:153::-;4742:7;4751:4;4757;4762:13;4776:4;4781;4807:28;:6;:26;:28::i;:::-;4800:35;;;;;;;;;;;;4689:153;;;;;;:::o;2835:138::-;2909:4;2931:35;2946:10;2957:8;2931:6;:14;;:35;;;;;:::i;:::-;2924:42;;2835:138;;;;:::o;1526:124:15:-;1599:44;1627:15;1599:6;:27;;:44;;;;:::i;:::-;1526:124;:::o;4203:197:14:-;4267:7;4276:4;4282;4288;4294:7;4303;4312;4320:14;;:::i;:::-;4336:3;4357:36;4382:10;4357:6;:24;;:36;;;;:::i;:::-;4350:43;;;;;;;;;;;;;;;;;;4203:197;;;;;;;;;;;:::o;9172:103::-;9215:15;;:::i;:::-;9248:20;:6;:18;:20::i;:::-;9241:27;;9172:103;:::o;6775:157::-;6857:4;6879:46;6903:10;6914;6879:6;:23;;:46;;;;;:::i;:::-;6872:53;;6775:157;;;;:::o;5038:141::-;5110:4;5133:39;5166:5;5133:6;:32;;:39;;;;:::i;:::-;5125:47;;5038:141;;;:::o;936:136::-;1011:4;1033:6;:16;;;;1050:5;1056:8;1033:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1033:32:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1033:32:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1033:32:14;;;;;;;;;;;;;;;;1026:39;;936:136;;;;:::o;9845:153::-;9926:4;9948:43;9974:10;9985:5;9948:6;:25;;:43;;;;;:::i;:::-;9941:50;;9845:153;;;;:::o;10412:175::-;10475:13;10490;10504:7;10512:4;10518;10524;10547:33;10569:10;10547:6;:21;;:33;;;;:::i;:::-;10540:40;;;;;;;;;;;;10412:175;;;;;;;:::o;6041:107::-;6090:4;6095;6117:24;:6;:22;:24::i;:::-;6110:31;;;;6041:107;;:::o;10002:190:21:-;10122:4;10148;:25;;:37;10174:10;10148:37;;;;;;;;;;;;10141:44;;10002:190;;;;:::o;13271:239::-;13410:14;;:::i;:::-;13442:4;:19;;:31;13462:10;13442:31;;;;;;;;;;;:49;;:61;13492:10;13442:61;;;;;;;;;;;13435:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13271:239;;;;;:::o;2821:164::-;2930:7;2955:4;:16;;:23;2972:5;2955:23;;;;;;;;;;;;;;;;;;;;;2948:30;;2821:164;;;;:::o;13611:131::-;13700:13;13724:11;;;;;;;;;;;;;;;;;;;13611:131;;;:::o;8744:142::-;8831:13;8855:24;;;;;;;;;;;;;;;;;;;8744:142;;;:::o;17058:161::-;17150:4;17172;:13;;:40;17186:25;;;;;;;;;;;;;;;;;;;17172:40;;;;;;;;;;;;17165:47;;17058:161;;;:::o;15153:328::-;15251:4;15257;15262:13;15287:17;15307:21;15323:4;15307:15;:21::i;:::-;15287:41;;15346:12;15359:4;:19;;:33;15379:12;15359:33;;;;;;;;;;;:45;;:68;15405:21;;;;;;;;;;;;;;;;;;;15359:68;;;;;;;;;;;;15428:4;:19;;:33;15448:12;15428:33;;;;;;;;;;;:45;;15338:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15153:328;;;;;:::o;10405:193::-;10528:4;10554;:25;;:37;10580:10;10554:37;;;;;;;;;;;;10547:44;;10405:193;;;;:::o;7250:453::-;7365:4;7370;7385:38;7426:4;:19;;:31;7446:10;7426:31;;;;;;;;;;;7385:72;;7507:1;7471:8;:26;;:33;;;;:37;7468:229;;;7531:95;7544:4;7549:10;7560:8;:26;;7623:1;7587:8;:26;;:33;;;;:37;7560:65;;;;;;;;;;;;;;;;7531:12;:95::i;:::-;7627:4;7523:109;;;;;;;7468:229;7678:1;7680:5;7670:16;;;;;;;;7250:453;;;;;;:::o;16289:207::-;16414:4;16436;:19;;:31;16456:10;16436:31;;;;;;;;;;;:41;;:53;16478:10;16436:53;;;;;;;;;;;;;;;;;;;;;16429:60;;16289:207;;;;;:::o;9249:209::-;9373:4;9395;:19;;:31;9415:10;9395:31;;;;;;;;;;;:49;;:56;;;;9388:63;;9249:209;;;;:::o;806:231::-;961:10;920:51;;:4;:16;;:37;937:19;;;;;;;;;;;;;;;;;;;920:37;;;;;;;;;;;;;;;;;;;;;:51;;;912:60;;;;;;1021:9;982:4;:16;;:37;999:19;;;;;;;;;;;;;;;;;;;982:37;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;806:231;;:::o;14762:153::-;14866:4;14888;:13;;:20;14902:5;14888:20;;;;;;;;;;;;14881:27;;14762:153;;;;:::o;9626:217::-;9746:4;9779:2;9769:6;:12;;9761:21;;;;;;9799:4;:29;;:37;9829:6;9799:37;;;;;;;;;;;;9792:44;;9626:217;;;;:::o;1874:193::-;1996:4;2018;:22;;:34;2041:10;2018:34;;;;;;;;;;;:42;2053:6;2018:42;;;;;;;;;;;;;;;;;;;;;;;;;2011:49;;1874:193;;;;;:::o;8401:245::-;8547:17;;:::i;:::-;8582:4;:19;;:31;8602:10;8582:31;;;;;;;;;;;:45;;:57;8628:10;8582:57;;;;;;;;;;;8575:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8401:245;;;;;:::o;12757:224::-;12866:4;12871;12894;:18;;:27;12913:7;12894:27;;;;;;;;;;;;;;;:41;;;12936:4;:18;;:27;12955:7;12936:27;;;;;;;;;;;;;;;:37;;;12886:88;;;;12757:224;;;;;:::o;13961:226::-;14101:4;14123;:19;;:31;14143:10;14123:31;;;;;;;;;;;:49;;14173:6;14123:57;;;;;;;;;;;;;;;;14116:64;;13961:226;;;;;:::o;6306:209::-;6434:4;6456;:17;;:29;6474:10;6456:29;;;;;;;;;;;:45;;:52;6502:5;6456:52;;;;;;;;;;;;6449:59;;6306:209;;;;;:::o;16736:212::-;16863:4;16886;:19;;:31;16906:10;16886:31;;;;;;;;;;;:43;;:55;16930:10;16886:55;;;;;;;;;;;;16879:62;;16736:212;;;;;:::o;4872:561::-;4971:7;4980:4;4986;4991:13;5005:4;5010;5037;:21;;;5059:4;:13;;:44;5073:29;;;;;;;;;;;;;;;;;;;5059:44;;;;;;;;;;;;5104:4;:13;;:38;5118:23;;;;;;;;;;;;;;;;;;;5104:38;;;;;;;;;;;;5143:4;:19;;:65;5163:4;:13;;:44;5177:29;;;;;;;;;;;;;;;;;;;5163:44;;;;;;;;;;;;5143:65;;;;;;;;;;;:77;;5221:4;:19;;:65;5241:4;:13;;:44;5255:29;;;;;;;;;;;;;;;;;;;5241:44;;;;;;;;;;;;5221:65;;;;;;;;;;;:77;;:103;5299:24;;;;;;;;;;;;;;;;;;;5221:103;;;;;;;;;;;;5325:4;:19;;:65;5345:4;:13;;:44;5359:29;;;;;;;;;;;;;;;;;;;5345:44;;;;;;;;;;;;5325:65;;;;;;;;;;;:77;;:100;5403:21;;;;;;;;;;;;;;;;;;;5325:100;;;;;;;;;;;;5029:397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4872:561;;;;;;;:::o;2277:195::-;2398:4;2420;:17;;:29;2438:10;2420:29;;;;;;;;;;;:35;;:45;2456:8;2420:45;;;;;;;;;;;;;;;;;;;;;;;;;2413:52;;2277:195;;;;;:::o;1236:307::-;1405:10;1364:51;;:4;:16;;:37;1381:19;;;;;;;;;;;;;;;;;;;1364:37;;;;;;;;;;;;;;;;;;;;;:51;;;1356:60;;;;;;1473:15;1426:4;:16;;:45;1443:27;;;;;;;;;;;;;;;;;;;1426:45;;;;;;;;;;;;:62;;;;;;;;;;;;;;;;;;1503:33;1520:15;1503:33;;;;;;;;;;;;;;;;;;;;;;1236:307;;:::o;3745:842::-;3858:7;3867:4;3873;3879;3885:7;3894;3903;3911:14;;:::i;:::-;3927:3;3941:34;3978:4;:17;;:29;3996:10;3978:29;;;;;;;;;;;3941:66;;4024:4;:9;;;4034:4;:13;;;;;;;;;;;;4049:4;:22;;;;;;;;;;;;4073:4;:15;;;;;;;;;;;;4090:4;:18;;;;;;;;;;;;4110:4;:19;;;;;;;;;;;;4130:4;:24;;;;;;;;;;;;4017:563;;;;;;;;4156:4;:20;;:44;4177:22;;;;;;;;;;;;;;;;;;;4156:44;;;;;;;;;;;;4017:563;;;;4202:4;:20;;:44;4223:22;;;;;;;;;;;;;;;;;;;4202:44;;;;;;;;;;;;4017:563;;;;4248:4;:20;;:40;4269:18;;;;;;;;;;;;;;;;;;;4248:40;;;;;;;;;;;;4017:563;;;;4290:4;:20;;:51;4311:29;;;;;;;;;;;;;;;;;;;4290:51;;;;;;;;;;;;4017:563;;;;4343:4;:20;;:48;4364:26;;;;;;;;;;;;;;;;;;;4343:48;;;;;;;;;;;;4017:563;;;;4393:4;:20;;:46;4414:24;;;;;;;;;;;;;;;;;;;4393:46;;;;;;;;;;;;4017:563;;;;4441:4;:20;;:44;4462:22;;;;;;;;;;;;;;;;;;;4441:44;;;;;;;;;;;;4017:563;;;;4487:4;:20;;:41;4508:19;;;;;;;;;;;;;;;;;;;4487:41;;;;;;;;;;;;4017:563;;;;4529:4;:20;;:38;4550:16;;;;;;;;;;;;;;;;;;;4529:38;;;;;;;;;;;;4017:563;;;4569:4;:10;;;4017:563;;;;;;;;;;;;;;;;;;;3745:842;;;;;;;;;;;:::o;10704:144::-;10795:15;;:::i;:::-;10828:4;:13;;10821:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10704:144;;;:::o;7939:215::-;8068:4;8090;:19;;:31;8110:10;8090:31;;;;;;;;;;;:45;;:57;8136:10;8090:57;;;;;;;;;;;;8083:64;;7939:215;;;;;:::o;5630:183::-;5749:4;5772;:27;;:34;5800:5;5772:34;;;;;;;;;;;;5764:42;;5630:183;;;;:::o;11418:207::-;11546:4;11568;:19;;:31;11588:10;11568:31;;;;;;;;;;;:43;;:50;11612:5;11568:50;;;;;;;;;;;;11561:57;;11418:207;;;;;:::o;12039:477::-;12149:13;12163;12178:7;12186:4;12192;12198;12214:38;12255:4;:19;;:31;12275:10;12255:31;;;;;;;;;;;12214:72;;12305:8;:20;;12326:8;:19;;12346:8;:18;;;12366:8;:20;;:46;12387:24;;;;;;;;;;;;;;;;;;;12366:46;;;;;;;;;;;;12413:8;:20;;:51;12434:29;;;;;;;;;;;;;;;;;;;12413:51;;;;;;;;;;;;12465:8;:20;;:43;12486:21;;;;;;;;;;;;;;;;;;;12465:43;;;;;;;;;;;;12297:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12039:477;;;;;;;;:::o;6731:276::-;6826:4;6831;6854:140;6867:4;6872;:25;;:73;6898:4;:13;;:46;6912:31;;;;;;;;;;;;;;;;;;;6898:46;;;;;;;;;;;;6872:73;;;;;;;;;;;;6947:4;:13;;:46;6961:31;;;;;;;;;;;;;;;;;;;6947:46;;;;;;;;;;;;6854:12;:140::i;:::-;6995:4;6846:154;;;;6731:276;;;:::o;15724:292::-;15819:15;15849:9;15872:11;15913:31;15930:4;:13;;15913:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:31::i;:::-;15897:47;;;;;;;;15972:4;:29;;:37;16002:6;15972:37;;;;;;;;;;;;15959:50;;15724:292;;;;;:::o;309:301:24:-;369:11;381:16;415:4;420:1;415:7;;;;;;;;;;;409:13;;454:6;461:1;454:8;;450:154;467:11;463:1;:15;450:154;;;510:3;500:4;505:1;500:7;;;;;;;;;;;:13;497:97;;;538:4;543:1;538:7;;;;;;;;;;;532:13;;574:1;563:12;;497:97;479:3;;;;;;;450:154;;;;309:301;;;:::o;326:2127:15:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;326:2127:15;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;326:2127:15;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;326:2127:15;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;326:2127:15;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./TellorGetters.sol\";\n\n/**\n* @title Tellor Master\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \n* TellorGettersLibrary, and TellorStake\n*/\ncontract TellorMaster is TellorGetters{\n    \n    event NewTellorAddress(address _newTellor);\n\n    /**\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \n    * @param _tellorContract is the address for the tellor contract\n    */\n    constructor (address _tellorContract)  public{\n        tellor.init();\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\n        tellor.addressVars[keccak256(\"tellorContract\")]= _tellorContract;\n        emit NewTellorAddress(_tellorContract);\n    }\n    \n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @dev Only needs to be in library\n    * @param _newDeity the new Deity in the contract\n    */\n\n    function changeDeity(address _newDeity) external{\n        tellor.changeDeity(_newDeity);\n    }\n\n\n    /**\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n    * @param _tellorContract the address of the new Tellor Contract\n    */\n    function changeTellorContract(address _tellorContract) external{\n        tellor.changeTellorContract(_tellorContract);\n    }\n  \n\n    /**\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\n    */\n    function () external payable {\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\n        bytes memory _calldata = msg.data;\n        assembly {\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}",
  "sourcePath": "/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorMaster.sol",
  "ast": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        6649
      ]
    },
    "id": 6650,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6551,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:15"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 6552,
        "nodeType": "ImportDirective",
        "scope": 6650,
        "sourceUnit": 6550,
        "src": "25:29:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6553,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6549,
              "src": "351:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$6549",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 6554,
            "nodeType": "InheritanceSpecifier",
            "src": "351:13:15"
          }
        ],
        "contractDependencies": [
          6549
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6649,
        "linearizedBaseContracts": [
          6649,
          6549
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6558,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6556,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6558,
                  "src": "398:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6555,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "398:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "397:20:15"
            },
            "src": "375:43:15"
          },
          {
            "body": {
              "id": 6604,
              "nodeType": "Block",
              "src": "758:276:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6563,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "768:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6565,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11008,
                      "src": "768:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "768:13:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6567,
                  "nodeType": "ExpressionStatement",
                  "src": "768:13:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6568,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "791:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6573,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "791:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6574,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6571,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "820:8:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6570,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "810:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6572,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "810:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "791:39:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12914,
                        "src": "833:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "833:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "791:52:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6578,
                  "nodeType": "ExpressionStatement",
                  "src": "791:52:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6579,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "853:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6584,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "853:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6585,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "882:8:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6581,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "872:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6583,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "872:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "853:39:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6586,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12914,
                        "src": "895:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6587,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "895:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "853:52:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6589,
                  "nodeType": "ExpressionStatement",
                  "src": "853:52:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6590,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "915:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6595,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "915:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6596,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6593,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "944:16:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6592,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "934:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6594,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "934:27:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "915:47:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6597,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6560,
                      "src": "964:15:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "915:64:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6599,
                  "nodeType": "ExpressionStatement",
                  "src": "915:64:15"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6601,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6560,
                        "src": "1011:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6600,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6558,
                      "src": "994:16:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "994:33:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6603,
                  "nodeType": "EmitStatement",
                  "src": "989:38:15"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \n@param _tellorContract is the address for the tellor contract",
            "id": 6605,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6560,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6605,
                  "src": "726:23:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6559,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "725:25:15"
            },
            "returnParameters": {
              "id": 6562,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "758:0:15"
            },
            "scope": 6649,
            "src": "713:321:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6616,
              "nodeType": "Block",
              "src": "1290:46:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6613,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6607,
                        "src": "1319:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6610,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1300:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6612,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10007,
                      "src": "1300:18:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6614,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1300:29:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6615,
                  "nodeType": "ExpressionStatement",
                  "src": "1300:29:15"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6617,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6607,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6617,
                  "src": "1263:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6606,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1263:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1262:19:15"
            },
            "returnParameters": {
              "id": 6609,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:0:15"
            },
            "scope": 6649,
            "src": "1242:94:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6628,
              "nodeType": "Block",
              "src": "1589:61:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6625,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6619,
                        "src": "1627:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6622,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1599:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6624,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10041,
                      "src": "1599:27:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6626,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1599:44:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6627,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:44:15"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6629,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6620,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6619,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6629,
                  "src": "1556:23:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6618,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1556:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1555:25:15"
            },
            "returnParameters": {
              "id": 6621,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:15"
            },
            "scope": 6649,
            "src": "1526:124:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6647,
              "nodeType": "Block",
              "src": "1816:635:15",
              "statements": [
                {
                  "assignments": [
                    6633
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6633,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6647,
                      "src": "1826:12:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6632,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1826:7:15",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6640,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6634,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1841:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6635,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11305,
                      "src": "1841:18:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6639,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1870:16:15",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6636,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12908,
                        "src": "1860:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6638,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1860:27:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1841:47:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1826:62:15"
                },
                {
                  "assignments": [
                    6642
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6642,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6647,
                      "src": "1898:22:15",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6641,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1898:5:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6645,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6643,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12914,
                      "src": "1923:3:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6644,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1923:8:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1898:33:15"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6642,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2033:9:15",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6642,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2009:9:15",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6633,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1999:4:15",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6646,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "1941:504:15"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6648,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1796:2:15"
            },
            "returnParameters": {
              "id": 6631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1816:0:15"
            },
            "scope": 6649,
            "src": "1787:664:15",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6650,
        "src": "326:2127:15"
      }
    ],
    "src": "0:2453:15"
  },
  "legacyAST": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        6649
      ]
    },
    "id": 6650,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6551,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:15"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/oldContracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 6552,
        "nodeType": "ImportDirective",
        "scope": 6650,
        "sourceUnit": 6550,
        "src": "25:29:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6553,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6549,
              "src": "351:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$6549",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 6554,
            "nodeType": "InheritanceSpecifier",
            "src": "351:13:15"
          }
        ],
        "contractDependencies": [
          6549
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 6649,
        "linearizedBaseContracts": [
          6649,
          6549
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 6558,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6556,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 6558,
                  "src": "398:18:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6555,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "398:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "397:20:15"
            },
            "src": "375:43:15"
          },
          {
            "body": {
              "id": 6604,
              "nodeType": "Block",
              "src": "758:276:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6563,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "768:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6565,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11008,
                      "src": "768:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 6566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "768:13:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6567,
                  "nodeType": "ExpressionStatement",
                  "src": "768:13:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6568,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "791:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6573,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "791:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6574,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 6571,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "820:8:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 6570,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "810:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6572,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "810:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "791:39:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6575,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12914,
                        "src": "833:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "833:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "791:52:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6578,
                  "nodeType": "ExpressionStatement",
                  "src": "791:52:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6579,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "853:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6584,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "853:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6585,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 6582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "882:8:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 6581,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "872:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6583,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "872:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "853:39:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6586,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12914,
                        "src": "895:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 6587,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "895:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "853:52:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6589,
                  "nodeType": "ExpressionStatement",
                  "src": "853:52:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 6598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 6590,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6060,
                          "src": "915:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 6595,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11305,
                        "src": "915:18:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 6596,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 6593,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "944:16:15",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 6592,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 12908,
                          "src": "934:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 6594,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "934:27:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "915:47:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 6597,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6560,
                      "src": "964:15:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "915:64:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 6599,
                  "nodeType": "ExpressionStatement",
                  "src": "915:64:15"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6601,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6560,
                        "src": "1011:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 6600,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6558,
                      "src": "994:16:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 6602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "994:33:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6603,
                  "nodeType": "EmitStatement",
                  "src": "989:38:15"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \n@param _tellorContract is the address for the tellor contract",
            "id": 6605,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6560,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6605,
                  "src": "726:23:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6559,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "725:25:15"
            },
            "returnParameters": {
              "id": 6562,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "758:0:15"
            },
            "scope": 6649,
            "src": "713:321:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6616,
              "nodeType": "Block",
              "src": "1290:46:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6613,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6607,
                        "src": "1319:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6610,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1300:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6612,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10007,
                      "src": "1300:18:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6614,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1300:29:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6615,
                  "nodeType": "ExpressionStatement",
                  "src": "1300:29:15"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 6617,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6607,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 6617,
                  "src": "1263:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6606,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1263:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1262:19:15"
            },
            "returnParameters": {
              "id": 6609,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1290:0:15"
            },
            "scope": 6649,
            "src": "1242:94:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6628,
              "nodeType": "Block",
              "src": "1589:61:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6625,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6619,
                        "src": "1627:15:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6622,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1599:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6624,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10041,
                      "src": "1599:27:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$11355_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 6626,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1599:44:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 6627,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:44:15"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 6629,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6620,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6619,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 6629,
                  "src": "1556:23:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6618,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1556:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1555:25:15"
            },
            "returnParameters": {
              "id": 6621,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:15"
            },
            "scope": 6649,
            "src": "1526:124:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 6647,
              "nodeType": "Block",
              "src": "1816:635:15",
              "statements": [
                {
                  "assignments": [
                    6633
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6633,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 6647,
                      "src": "1826:12:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 6632,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1826:7:15",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6640,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 6634,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6060,
                        "src": "1841:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$11355_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 6635,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11305,
                      "src": "1841:18:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 6639,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 6637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1870:16:15",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 6636,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12908,
                        "src": "1860:9:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 6638,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1860:27:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1841:47:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1826:62:15"
                },
                {
                  "assignments": [
                    6642
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6642,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 6647,
                      "src": "1898:22:15",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6641,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1898:5:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6645,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 6643,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12914,
                      "src": "1923:3:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 6644,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1923:8:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1898:33:15"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 6642,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2033:9:15",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 6642,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2009:9:15",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6633,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1999:4:15",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6646,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "1941:504:15"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 6648,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1796:2:15"
            },
            "returnParameters": {
              "id": 6631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1816:0:15"
            },
            "scope": 6649,
            "src": "1787:664:15",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 6650,
        "src": "326:2127:15"
      }
    ],
    "src": "0:2453:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {
    "1566652721142": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_spender",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_from",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_to",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0xeceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da64": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_miner",
              "type": "address"
            }
          ],
          "name": "NewDispute",
          "type": "event",
          "signature": "0xeceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da64"
        },
        "0x86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeID",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_position",
              "type": "bool"
            },
            {
              "indexed": true,
              "name": "_voter",
              "type": "address"
            }
          ],
          "name": "Voted",
          "type": "event",
          "signature": "0x86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0"
        },
        "0x21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e10434739": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeID",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_result",
              "type": "int256"
            },
            {
              "indexed": true,
              "name": "_reportedMiner",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_reportingParty",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_active",
              "type": "bool"
            }
          ],
          "name": "DisputeVoteTallied",
          "type": "event",
          "signature": "0x21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e10434739"
        },
        "0xc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "_newTellor",
              "type": "address"
            }
          ],
          "name": "NewTellorAddress",
          "type": "event",
          "signature": "0xc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d"
        },
        "0x46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e2": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "NewStake",
          "type": "event",
          "signature": "0x46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e2"
        },
        "0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "StakeWithdrawn",
          "type": "event",
          "signature": "0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec"
        },
        "0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "StakeWithdrawRequested",
          "type": "event",
          "signature": "0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf"
        }
      },
      "links": {
        "TellorTransfer": "0x731A4E84fd77618A758883DDa92323EdD291b313",
        "TellorStake": "0xeAE06175F23E0a52B49392D05188CAd1c988AaEe"
      },
      "address": "0x7DdC408C0Cd13D3543156AE2bc5772C56E91AA0f",
      "transactionHash": "0x3c0fc9c3546fbf69c503735145bbf41ded68751e7fab30017832c3e2aab547e1"
    }
  },
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-29T18:14:30.906Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor.  The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,  TellorGettersLibrary, and TellorStake",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount  ",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp Only needs to be in library",
        "params": {
          "_newDeity": "the new Deity in the contract"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address ",
        "params": {
          "_tellorContract": "is the address for the tellor contract"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the "
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request "
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct",
          "_disputeId": "is the dispute id;"
        },
        "return": "uint value for the bytes32 data submitted"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available",
        "params": {
          "_requestId": "being requested"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getName()": {
        "details": "Get the name of the token return string of the token name"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp ",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct",
          "_requestId": "to look up"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getSymbol()": {
        "details": "Get the symbol of the token return string of the token symbol"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable  "
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    },
    "title": "Tellor Master"
  },
  "userdoc": {
    "methods": {}
  }
}