{"version":3,"sources":["../src/TaskHandler.js"],"names":["NUM_MINERS","SLEEP_BETWEEN_CHECKS","SLEEP_BETWEEN_MINES","MINER_ADDRESSES","sleep","Promise","done","setTimeout","time","TaskHandler","props","chain","miners","i","m","Miner","account","push","forEach","fn","bind","console","log","running","contract","getCurrentVariables","next","_challenge","_runMiningCycle","all","canMine","length","getStakerInfo","stat","status","mine","challenge","queryString","_queryString","difficulty","_difficulty","nonces","n","_getValue","value","isNaN","_granularity","_submitNonce","miner","nonce","jsonField","startsWith","substr","lastIndexOf","s","substring","indexOf","axios","get","r","data","JSON","parse","submitMiningSolution","_requestId"],"mappings":"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","file":"TaskHandler.js","sourcesContent":["import Miner from './Miner';\nimport axios from 'axios';\n\nconst NUM_MINERS = 6;\nconst SLEEP_BETWEEN_CHECKS = 5000;\nconst SLEEP_BETWEEN_MINES = 10000; //65000;\n\nconst MINER_ADDRESSES = [\n                         \"0xe010aC6e0248790e08F42d5F697160DEDf97E024\",\n                         \"0xE037EC8EC9ec423826750853899394dE7F024fee\",\n                         \"0xcdd8FA31AF8475574B8909F135d510579a8087d3\",\n                         \"0xb9dD5AfD86547Df817DA2d0Fb89334A6F8eDd891\",\n                         \"0x230570cD052f40E14C14a81038c6f3aa685d712B\",\n                         \"0x3233afA02644CCd048587F8ba6e99b3C00A34DcC\"\n                       ];\n\nconst sleep = time => {\n  return new Promise((done)=> {\n    setTimeout(()=>done(), time);\n  });\n}\n\nexport default class TaskHandler {\n  constructor(props) {\n    this.chain = props.chain;\n    this.miners = [];\n    for(let i=0;i<NUM_MINERS;++i) {\n      let m = new Miner({\n        chain: this.chain,\n        account: MINER_ADDRESSES[i]\n      });\n      this.miners.push(m);\n    }\n    [\n      'start',\n      'stop',\n      '_runMiningCycle',\n      '_submitNonce',\n      '_getValue'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  async start() {\n    console.log(\"Mining tasker starting up\");\n    this.running = true;\n    while(this.running) {\n      let next = await this.chain.contract.getCurrentVariables();\n      console.log(\"New challenge to be mined: \", next)\n      if(next._challenge) {\n        await this._runMiningCycle(next);\n        console.log(\"Waiting for next mining cycle...\");\n        await sleep(SLEEP_BETWEEN_MINES);\n      } else {\n        await sleep(SLEEP_BETWEEN_CHECKS);\n      }\n    }\n    console.log(\"Mining tasker shutting down\");\n  }\n\n  async stop() {\n    this.running = false;\n  }\n\n  async\n  async _runMiningCycle(next) {\n\n    let all = [];\n    let canMine = [];\n    for(let i=0;i<this.miners.length;++i) {\n      let m = this.miners[i];\n      let stat = await this.chain.contract.getStakerInfo(m.account);\n      console.log(\"Address, Status\", m.account, stat);\n      if(stat.status === 1 && canMine.length < 5) {\n        canMine.push(m);\n      }\n    }\n    if(canMine.length < 5) {\n      console.log(\"Don't have enough mock miners to run mining cycle!\");\n      return;\n    }\n\n    canMine.forEach(m=>{\n      all.push(m.mine({\n      challenge: next._challenge,\n      queryString: next._queryString,\n      difficulty: next._difficulty\n    }))});\n    let nonces = await Promise.all(all);\n    for(let i=0;i<nonces.length;++i) {\n      let n = nonces[i];\n      if(n > 0) {\n        let value = await this._getValue(next._queryString);\n        if(!isNaN(value)) {\n          value *= next._granularity;\n          await this._submitNonce({...next, miner: canMine[i].account, nonce: n, value});\n        }\n      }\n    }\n  }\n\n  async _getValue(queryString) {\n    let jsonField = null;\n    if(queryString.startsWith(\"json\")) {\n      jsonField = queryString.substr(queryString.lastIndexOf(\".\")+1);\n      let s = queryString.substring(queryString.indexOf(\"(\")+1, queryString.lastIndexOf(\")\"));\n      queryString = s;\n    }\n    //console.log(\"Will query value\", queryString, jsonField);\n    let r = await axios.get(queryString);\n    let data = r.data;\n    if(typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    if(jsonField) {\n      return data[jsonField]-0;\n    }\n    return data-0;\n  }\n\n  async _submitNonce(props) {\n    try {\n      console.log(\"Submitting solution\", props);\n      await this.chain.contract.submitMiningSolution(props.miner, \"\"+props.nonce, props._requestId, props.value);\n      console.log(\"Submitted mining solution\", props);\n    } catch (e) {\n      console.log(\"Failed to submit mining solution\", e);\n    }\n  }\n}\n"]}