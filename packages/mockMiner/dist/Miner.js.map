{"version":3,"sources":["../src/Miner.js"],"names":["yup","propsSchema","object","shape","account","string","required","randint","min","max","Math","floor","random","generate_random_number","trim0x","s","startsWith","substr","Miner","props","validateSync","chain","Error","forEach","fn","bind","challenge","queryString","difficulty","getBlockNumber","last_block","x","j","jEnc","Buffer","from","nonce","toString","n","util","sha256","abi","solidityPack","ripemd160","keccak256","console","log","comp","BN","diffBN","mod","_block","contract","getCurrentVariables","_challenge","_requestId","_difficulty","_queryString"],"mappings":";;;;;;;;AAAA;;IAAYA,G;;AACZ;;;;AACA;;;;;;;;;;;;AAEA;AACA;;AAEA,IAAMC,cAAcD,IAAIE,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,WAASJ,IAAIK,MAAJ,GAAaC,QAAb,CAAsB,iBAAtB;AAD4B,CAAnB,CAApB;;AAIA,IAAMC,UAAU,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,SAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBH,MAAMD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFD;AAGA,IAAMK,yBAAyB,SAAzBA,sBAAyB,GAAM;AACjC,SAAON,QAAQ,OAAR,EAAgB,OAAhB,CAAP;AACH,CAFD;;AAIA,IAAMO,SAAS,SAATA,MAAS,IAAK;AAClB,MAAGC,EAAEC,UAAF,CAAa,IAAb,CAAH,EAAuB;AACrB,WAAOD,EAAEE,MAAF,CAAS,CAAT,CAAP;AACD;AACD,SAAOF,CAAP;AACD,CALD;;IAOqBG,K;AACnB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjBlB,gBAAYmB,YAAZ,CAAyBD,KAAzB;AACA,SAAKf,OAAL,GAAee,MAAMf,OAArB;AACA,SAAKiB,KAAL,GAAaF,MAAME,KAAnB;AACA,QAAG,CAAC,KAAKA,KAAT,EAAgB;AACd,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,KACE,MADF,EAEEC,OAFF,CAEU;AAAA,aAAI,MAAKC,EAAL,IAAS,MAAKA,EAAL,EAASC,IAAT,CAAc,KAAd,CAAb;AAAA,KAFV;AAGD;;;;;;YAEWC,S,SAAAA,S;YAAWC,W,SAAAA,W;YAAaC,U,SAAAA,U;;;;;;;;;uBACX,KAAKP,KAAL,CAAWQ,cAAX,E;;;AAAnBC,0B;AACDC,iB,GAAI,C;;;qBACF,I;;;;;AACLA,qBAAK,CAAL;AACIC,iB,GAAInB,wB;AACFoB,oB,GAAOC,OAAOC,IAAP,CAAY,KAAGH,CAAf,C;AACPI,qB,GAAQH,KAAKI,QAAL,CAAc,KAAd,C,EAAoB;;AAC5BC,iB,GACFC,yBAAKC,MAAL,CACEC,wBAAIC,YAAJ,CACE,CAAC,SAAD,CADF,EAEE,CACEH,yBAAKI,SAAL,CACEF,wBAAIC,YAAJ,CACE,CAAC,SAAD,CADF,EAEE,CACEH,yBAAKK,SAAL,CACE9B,OAAOY,SAAP,IAAoBZ,OAAO,KAAKV,OAAZ,CAApB,GAA2CU,OAAOsB,KAAP;AAC3C;;;;;;AAFF,iBADF,CAFF,CADF,CADF,CAFF,CADF,C;;;AAyBFS,wBAAQC,GAAR,CAAY,GAAZ,EAAiBR,EAAED,QAAF,CAAW,KAAX,CAAjB;AACIU,oB,GAAO,IAAIR,yBAAKS,EAAT,CAAYV,EAAED,QAAF,CAAW,KAAX,CAAZ,C;AACPY,sB,GAAS,IAAIV,yBAAKS,EAAT,CAAY,KAAGpB,UAAf,C;;AAEb;;;;;;;;;;;;;;;;sBAgBImB,KAAKG,GAAL,CAASD,MAAT,EAAiBZ,QAAjB,KAA4B,CAA7B,KAAoC,C;;;;;iDAC9BL,C;;;sBAGRD,IAAI,KAAJ,KAAc,C;;;;;;uBACM,KAAKV,KAAL,CAAWQ,cAAX,E;;;AAAfsB,sB;;sBACDrB,cAAcqB,M;;;;;;uBAC8C,KAAK9B,KAAL,CAAW+B,QAAX,CAAoBC,mBAApB,E;;;;AAAxDC,0B,SAAAA,U;AAAWC,0B,SAAAA,U;AAAWC,2B,SAAAA,W;AAAYC,4B,SAAAA,Y;;sBACxC/B,cAAc4B,U;;;;;iDACJ,C;;;;;;;;;;;;;;;;;;;;;;;;;kBA7EEpC,K","file":"Miner.js","sourcesContent":["import * as yup from 'yup';\nimport abi from 'ethereumjs-abi';\nimport util from 'ethereumjs-util';\n\n//import * as ethUtils from 'web3-utils';\n//var RIPEMD160 = require('ripemd160')\n\nconst propsSchema = yup.object().shape({\n  account: yup.string().required(\"Missing account\")\n});\n\nconst randint = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nconst generate_random_number = () => {\n    return randint(1000000,9999999)\n}\n\nconst trim0x = s => {\n  if(s.startsWith('0x')) {\n    return s.substr(2);\n  }\n  return s;\n}\n\nexport default class Miner {\n  constructor(props) {\n    propsSchema.validateSync(props);\n    this.account = props.account;\n    this.chain = props.chain;\n    if(!this.chain) {\n      throw new Error(\"Missing chain in props\");\n    }\n\n    [\n      'mine'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  async mine({challenge, queryString, difficulty}) {\n    let last_block = await this.chain.getBlockNumber();\n  \tlet x = 0;\n  \twhile(true) {\n  \t\tx += 1;\n  \t\tlet j = generate_random_number()\n      let jEnc = Buffer.from(\"\"+j);\n      let nonce = jEnc.toString(\"hex\")//ethUtils.toHex(jEnc.toString(\"\"));\n      let n =\n        util.sha256(\n          abi.solidityPack(\n            ['bytes20'],\n            [\n              util.ripemd160(\n                abi.solidityPack(\n                  ['bytes32'],\n                  [\n                    util.keccak256(\n                      trim0x(challenge) + trim0x(this.account) + trim0x(nonce)\n                      /*\n                      abi.solidityPack(\n                          ['bytes32', 'address', 'string'],\n                          [challenge, this.account, nonce]\n                      )\n                      */\n                    )\n                  ]\n                )\n              )\n            ]\n          )\n        );\n\n\n      console.log(\"N\", n.toString('hex'));\n      let comp = new util.BN(n.toString('hex'));\n      let diffBN = new util.BN(\"\"+difficulty);\n\n      /*from solidity\n        sha256(\n          abi.encodePacked(\n            ripemd160(\n              abi.encodePacked(\n                keccak256(\n                  abi.encodePacked(\n                    self.currentChallenge,msg.sender,_nonce\n                  )\n                )\n              )\n            )\n          )\n        );\n      */\n\n      if((comp.mod(diffBN).toString()-0) === 0) {\n        return j;\n      }\n\n  \t\tif(x % 10000 === 0) {\n        let _block = await this.chain.getBlockNumber();\n        if(last_block != _block) {\n          let {_challenge,_requestId,_difficulty,_queryString} = await this.chain.contract.getCurrentVariables();\n  \t\t\t\tif(challenge !== _challenge) {\n            return 0;\n          }\n        }\n      }\n    }\n  }\n\n}\n"]}