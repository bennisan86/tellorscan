{"version":3,"sources":["../src/TaskHandler.js"],"names":["NUM_MINERS","SLEEP_BETWEEN_CHECKS","MINER_ADDRESSES","sleep","Promise","done","setTimeout","time","TaskHandler","props","chain","miners","initRequired","miningSleepTime","queryString","queryRate","lastQuery","i","m","Miner","account","push","forEach","fn","bind","console","log","running","contract","tellorPostConstructor","getCurrentVariables","next","_challenge","_runMiningCycle","diff","Date","now","_requestData","con","requestData","all","canMine","length","getStakerInfo","stat","status","mine","challenge","_queryString","difficulty","_difficulty","nonces","n","_getValue","value","isNaN","Math","ceil","_granularity","_submitNonce","miner","nonce","jsonFields","startsWith","fields","substr","lastIndexOf","s","substring","indexOf","split","r","axios","get","data","JSON","parse","finalVal","d","f","trim","price","submitMiningSolution","_requestId"],"mappings":"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","file":"TaskHandler.js","sourcesContent":["import Miner from './Miner';\nimport axios from 'axios';\n\nconst NUM_MINERS = 6;\nconst SLEEP_BETWEEN_CHECKS = 15000;\n//const SLEEP_BETWEEN_MINES = 65000; //10000;\n\nconst MINER_ADDRESSES = [\n                         \"0xe010aC6e0248790e08F42d5F697160DEDf97E024\",\n                         \"0xE037EC8EC9ec423826750853899394dE7F024fee\",\n                         \"0xcdd8FA31AF8475574B8909F135d510579a8087d3\",\n                         \"0xb9dD5AfD86547Df817DA2d0Fb89334A6F8eDd891\",\n                         \"0x230570cD052f40E14C14a81038c6f3aa685d712B\",\n                         \"0x3233afA02644CCd048587F8ba6e99b3C00A34DcC\"\n                       ];\n\nconst sleep = time => {\n  return new Promise((done)=> {\n    setTimeout(done, time);\n  });\n}\n\nexport default class TaskHandler {\n  constructor(props) {\n    this.chain = props.chain;\n    this.miners = [];\n    this.initRequired = props.initRequired;\n    this.miningSleepTime = props.miningSleepTime;\n    this.queryString = props.queryString;\n    this.queryRate = props.queryRate;\n    this.lastQuery = 0;\n\n    for(let i=0;i<NUM_MINERS;++i) {\n      let m = new Miner({\n        chain: this.chain,\n        account: MINER_ADDRESSES[i]\n      });\n      this.miners.push(m);\n    }\n    [\n      'start',\n      'stop',\n      '_runMiningCycle',\n      '_submitNonce',\n      '_getValue',\n      '_requestData'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  async start() {\n    console.log(\"Mining tasker starting up\");\n    this.running = true;\n    if(this.initRequired) {\n      await this.chain.contract.tellorPostConstructor(MINER_ADDRESSES[0]);\n      console.log(\"Contract initialized\");\n    }\n    while(this.running) {\n      try {\n        let next = await this.chain.contract.getCurrentVariables();\n\n        if(next._challenge) {\n          console.log(\"New challenge to be mined: \", next)\n          await this._runMiningCycle(next);\n          console.log(\"Waiting\",this.miningSleepTime,\"ms for next mining cycle...\");\n          await sleep(this.miningSleepTime);\n        } else {\n          if(this.queryRate) {\n            let diff = Date.now() - this.lastQuery;\n            if(diff > this.queryRate) {\n              await this._requestData();\n            }\n          }\n          console.log(\"Waiting to check for new tasking...\");\n          await sleep(SLEEP_BETWEEN_CHECKS);\n        }\n      } catch (e) {\n        console.log(\"Problem in task run loop\", e);\n      }\n    }\n    console.log(\"Mining tasker shutting down\");\n  }\n\n  async _requestData() {\n    try {\n      console.log(\"Requesting data...\");\n      let con = this.chain.contract;\n      await con.requestData(MINER_ADDRESSES[0], this.queryString, \"BTC/USD\", 1000, 0);\n      this.lastQuery= Date.now();\n    } catch (e) {\n      console.log(\"Problem requesting data\", e);\n    }\n  }\n\n  async stop() {\n    this.running = false;\n  }\n\n  async _runMiningCycle(next) {\n\n    let all = [];\n    let canMine = [];\n    for(let i=0;i<this.miners.length;++i) {\n      let m = this.miners[i];\n      let stat = await this.chain.contract.getStakerInfo(m.account);\n      console.log(\"Address, Status\", m.account, stat);\n      if(stat.status === 1 && canMine.length < 5) {\n        canMine.push(m);\n      }\n    }\n    if(canMine.length < 5) {\n      console.log(\"Don't have enough mock miners to run mining cycle!\");\n      return;\n    }\n\n    canMine.forEach(m=>{\n      all.push(m.mine({\n      challenge: next._challenge,\n      queryString: next._queryString,\n      difficulty: next._difficulty\n    }))});\n    let nonces = await Promise.all(all);\n    for(let i=0;i<nonces.length;++i) {\n      let n = nonces[i];\n      if(n > 0) {\n        let value = await this._getValue(next._queryString);\n        if(!isNaN(value)) {\n          value = Math.ceil(value * next._granularity);\n          await this._submitNonce({...next, miner: canMine[i].account, nonce: n, value});\n        }\n      }\n    }\n  }\n\n  async _getValue(queryString) {\n    let jsonFields = null;\n    if(queryString.startsWith(\"json\") || queryString.startsWith(\"xjson\")) {\n      let fields = queryString.substr(queryString.lastIndexOf(\")\")+1);\n      let s = queryString.substring(queryString.indexOf(\"(\")+1, queryString.lastIndexOf(\")\"));\n      queryString = s;\n      jsonFields = fields.split(\".\");\n    }\n    //console.log(\"Will query value\", queryString, jsonField);\n    let r = null;\n    try {\n      r = await axios.get(queryString);\n    } catch (e) {\n      console.log(\"Problem with query string\", queryString, e);\n      return 0;\n    }\n\n    let data = r.data;\n    if(typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    if(!data) {\n      return 0;\n    }\n\n    if(jsonFields) {\n      let finalVal = null;\n      let d = data;\n      for(let i=0;i<jsonFields.length;++i) {\n        let f = jsonFields[i];\n        if(f.trim().length > 0) {\n          d = d[f];\n          if(!d) {\n            return 0;\n          }\n        }\n      }\n      return d-0;\n    }\n    if(isNaN(data)) {\n      if(data.price) {\n        return data.price - 0;\n      }\n      return 0;\n    }\n    return data-0;\n  }\n\n  async _submitNonce(props) {\n    try {\n      console.log(\"Submitting solution\", props);\n      await this.chain.contract.submitMiningSolution(props.miner, \"\"+props.nonce, props._requestId, props.value);\n      console.log(\"Submitted mining solution\", props);\n    } catch (e) {\n      console.log(\"Failed to submit mining solution\", e);\n    }\n  }\n}\n"]}