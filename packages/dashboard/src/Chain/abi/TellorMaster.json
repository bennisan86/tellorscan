{
  "contractName": "TellorMaster",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x0f0b424d"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x11c98512"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x133bee5e"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x15070401"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x17d7de7c"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x18160ddd"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x19e8e03b"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x1db842f0"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x3df0777b"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x46eee1c4"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x4ee2cd7e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x612c8f7f"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x6173c0b8"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x63bb82ad"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x69026d63"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x70a08231"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x733bdef0"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x77fbb663"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x93fa4915"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x999cf26c"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xa22e407a"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xa7c438bc"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256[8]"
        },
        {
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xaf0b1327"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xb5413029"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xc775b542"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xda379941"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xdd62ed3e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xe1eee6d6"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xfc7cf0a0"
    },
    {
      "inputs": [
        {
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[8]\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  \",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account.\"},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the \"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]*\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"address of reported mineraddress of reporting partydisputed apiIddisputed minimum execution dateuint number of votesuint blockNumber of voteuint index in disputeId arrayint count of the current tallybool of whether vote has been tallied\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), , total tip for the request \"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submited\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getName()\":{\"details\":\"Get the name of the token return string of the token name\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp \",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getSymbol()\":{\"details\":\"Get the symbol of the token return string of the token symbol\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable  \"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue\",\"return\":\"onDeckRequestId, onDeckTotaltips, , and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol\":\"TellorMaster\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/mdcoon/git/TellorCore/contracts/TellorGetters.sol\":{\"keccak256\":\"0x893632859b28343f2e417b7f3e787a968b9198f498eec633dde8bbd1c25b720b\",\"urls\":[\"bzzr://7f27539007057f282f99cbe1da1a8ddd539e6daf17e4ca3ab93a4be9d99a2bce\"]},\"/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol\":{\"keccak256\":\"0x0ecde570f9ad1456cc418bf72e9c951e28aa42176c386a3a04eb11c681ba5bbc\",\"urls\":[\"bzzr://b3f3edfe891273b18dc112b42a6d6b3fe6b5b6cbef3ad5523125fc49aa1d5abb\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x64bb591a8002f82f9af3e8c97f70e406d5750c6ddd2afb4fe4570c6f22a81b35\",\"urls\":[\"bzzr://b8a1b883348f79a20cb5e568af0857a5032c6ccfba56efb088460c3352f39f3b\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0x090cc87e9fd507e66922d85e3d63c524076e0d793f75cfbe88be2935d94f26da\",\"urls\":[\"bzzr://0b70a81dbf8b5cae4db68dcf65d3234db3547db1bb76c8871589a8241e7f347d\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/TellorLibrary.sol\":{\"keccak256\":\"0x7cb358ae94bc56a0524d57a64980980cc40a38810ac6dfafcca96be9b55b9cd0\",\"urls\":[\"bzzr://a91eb50842e86bbabba37b3f598e1637c564bb6091246df29d732db335cb7f2d\"]},\"/Users/mdcoon/git/TellorCore/contracts/libraries/Utilities.sol\":{\"keccak256\":\"0xfde2134936e4e2f0a1090efabf773bf311ed03a62d9a5bada406bd756a82686a\",\"urls\":[\"bzzr://4de3e5dda475359778df2982d3095c02b70e8437078fe8c45399bcacc8749cad\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405160208062002ed7833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050620000688160006200006f6401000000000262002b3a179091906401000000009004565b50620001e8565b3382604701600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082604701600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b612cdf80620001f86000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f0b424d1461025657806311c98512146102a5578063133bee5e1461032657806315070401146103a157806317d7de7c1461043157806318160ddd146104c157806319e8e03b146104ec5780631db842f01461058a5780633df0777b146105d957806346eee1c4146106365780634ee2cd7e14610685578063612c8f7f146106f45780636173c0b81461074357806363bb82ad1461079257806369026d631461080557806370a0823114610886578063733bdef0146108eb57806377fbb6631461095757806393fa4915146109b0578063999cf26c14610a09578063a22e407a14610a7c578063a7c438bc14610b2f578063af0b132714610ba2578063b541302914610ce1578063c775b54214610d34578063da37994114610d8d578063dd62ed3e14610ddc578063e1eee6d614610e61578063fc7cf0a014610f9d575b600080604701600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e8260008114610252578282f35b8282fd5b34801561026257600080fd5b5061028f6004803603602081101561027957600080fd5b8101908080359060200190929190505050610fd3565b6040518082815260200191505060405180910390f35b3480156102b157600080fd5b506102e8600480360360408110156102c857600080fd5b810190808035906020019092919080359060200190929190505050610ff0565b6040518082600560200280838360005b838110156103135780820151818401526020810190506102f8565b5050505090500191505060405180910390f35b34801561033257600080fd5b5061035f6004803603602081101561034957600080fd5b8101908080359060200190929190505050611016565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ad57600080fd5b506103b6611033565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f65780820151818401526020810190506103db565b50505050905090810190601f1680156104235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043d57600080fd5b50610446611044565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561048657808201518184015260208101905061046b565b50505050905090810190601f1680156104b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104cd57600080fd5b506104d6611055565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b50610501611066565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561054d578082015181840152602081019050610532565b50505050905090810190601f16801561057a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561059657600080fd5b506105c3600480360360208110156105ad57600080fd5b8101908080359060200190929190505050611080565b6040518082815260200191505060405180910390f35b3480156105e557600080fd5b5061061c600480360360408110156105fc57600080fd5b81019080803590602001909291908035906020019092919050505061109d565b604051808215151515815260200191505060405180910390f35b34801561064257600080fd5b5061066f6004803603602081101561065957600080fd5b81019080803590602001909291905050506110bd565b6040518082815260200191505060405180910390f35b34801561069157600080fd5b506106de600480360360408110156106a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110da565b6040518082815260200191505060405180910390f35b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506110fa565b6040518082815260200191505060405180910390f35b34801561074f57600080fd5b5061077c6004803603602081101561076657600080fd5b8101908080359060200190929190505050611117565b6040518082815260200191505060405180910390f35b34801561079e57600080fd5b506107eb600480360360408110156107b557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611134565b604051808215151515815260200191505060405180910390f35b34801561081157600080fd5b506108486004803603604081101561082857600080fd5b810190808035906020019092919080359060200190929190505050611154565b6040518082600560200280838360005b83811015610873578082015181840152602081019050610858565b5050505090500191505060405180910390f35b34801561089257600080fd5b506108d5600480360360208110156108a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117a565b6040518082815260200191505060405180910390f35b3480156108f757600080fd5b5061093a6004803603602081101561090e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611197565b604051808381526020018281526020019250505060405180910390f35b34801561096357600080fd5b5061099a6004803603604081101561097a57600080fd5b8101908080359060200190929190803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b3480156109bc57600080fd5b506109f3600480360360408110156109d357600080fd5b8101908080359060200190929190803590602001909291905050506111d7565b6040518082815260200191505060405180910390f35b348015610a1557600080fd5b50610a6260048036036040811015610a2c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f7565b604051808215151515815260200191505060405180910390f35b348015610a8857600080fd5b50610a91611217565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610aef578082015181840152602081019050610ad4565b50505050905090810190601f168015610b1c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b3b57600080fd5b50610b8860048036036040811015610b5257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123f565b604051808215151515815260200191505060405180910390f35b348015610bae57600080fd5b50610bdb60048036036020811015610bc557600080fd5b810190808035906020019092919050505061125f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600860200280838360005b83811015610cc0578082015181840152602081019050610ca5565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ced57600080fd5b50610cf66112a7565b6040518082603360200280838360005b83811015610d21578082015181840152602081019050610d06565b5050505090500191505060405180910390f35b348015610d4057600080fd5b50610d7760048036036040811015610d5757600080fd5b8101908080359060200190929190803590602001909291905050506112be565b6040518082815260200191505060405180910390f35b348015610d9957600080fd5b50610dc660048036036020811015610db057600080fd5b81019080803590602001909291905050506112de565b6040518082815260200191505060405180910390f35b348015610de857600080fd5b50610e4b60048036036040811015610dff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fb565b6040518082815260200191505060405180910390f35b348015610e6d57600080fd5b50610e9a60048036036020811015610e8457600080fd5b8101908080359060200190929190505050611415565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ef6578082015181840152602081019050610edb565b50505050905090810190601f168015610f235780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b83811015610f5c578082015181840152602081019050610f41565b50505050905090810190601f168015610f895780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b348015610fa957600080fd5b50610fb2611447565b60405180838152602001821515151581526020019250505060405180910390f35b6000610fe982600061145c90919063ffffffff16565b9050919050565b610ff8612aac565b61100e8383600061147c9092919063ffffffff16565b905092915050565b600061102c8260006114f290919063ffffffff16565b9050919050565b606061103f6000611532565b905090565b606061105060006115d8565b905090565b6000611061600061167e565b905090565b600080606061107560006116d2565b925092509250909192565b600061109682600061187890919063ffffffff16565b9050919050565b60006110b5838360006118989092919063ffffffff16565b905092915050565b60006110d38260006118da90919063ffffffff16565b9050919050565b60006110f2838360006119009092919063ffffffff16565b905092915050565b6000611110826000611c4390919063ffffffff16565b9050919050565b600061112d826000611c6390919063ffffffff16565b9050919050565b600061114c83836000611c839092919063ffffffff16565b905092915050565b61115c612acf565b61117283836000611cee9092919063ffffffff16565b905092915050565b6000611190826000611d9a90919063ffffffff16565b9050919050565b6000806111ae836000611daf90919063ffffffff16565b91509150915091565b60006111cf83836000611e479092919063ffffffff16565b905092915050565b60006111ef83836000611e829092919063ffffffff16565b905092915050565b600061120f83836000611eb79092919063ffffffff16565b905092915050565b6000806000606060008061122b6000611fcf565b955095509550955095509550909192939495565b6000611257838360006122d99092919063ffffffff16565b905092915050565b6000806000806000806000611272612af2565b60006112888a600061234790919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b6112af612b16565b6112b960006126ce565b905090565b60006112d68383600061271d9092919063ffffffff16565b905092915050565b60006112f482600061275290919063ffffffff16565b9050919050565b60008073__TellorGettersLibrary__________________63912c0e65909185856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b60608060008060008061143287600061277290919063ffffffff16565b95509550955095509550955091939550919395565b60008061145460006129d1565b915091509091565b600082604a01600083815260200190815260200160002054905092915050565b611484612aac565b83605001600084815260200190815260200160002060090160008381526020019081526020016000206005806020026040519081016040528092919082600580156114e4576020028201915b8154815260200190600101908083116114d0575b505050505090509392505050565b600082604701600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6060816003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cc5780601f106115a1576101008083540402835291602001916115cc565b820191906000526020600020905b8154815290600101906020018083116115af57829003601f168201915b50505050509050919050565b6060816002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116725780601f1061164757610100808354040283529160200191611672565b820191906000526020600020905b81548152906001019060200180831161165557829003601f168201915b50505050509050919050565b600081604801600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606083604801600060405180807f6f6e4465636b5265717565737449640000000000000000000000000000000000815250600f019050604051809103902081526020019081526020016000205484604801600060405180807f6f6e4465636b546f74616c546970730000000000000000000000000000000000815250600f019050604051809103902081526020019081526020016000205485605001600087604801600060405180807f6f6e4465636b5265717565737449640000000000000000000000000000000000815250600f01905060405180910390208152602001908152602001600020548152602001908152602001600020600001808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118645780601f1061183957610100808354040283529160200191611864565b820191906000526020600020905b81548152906001019060200180831161184757829003601f168201915b505050505090509250925092509193909250565b600082605101600083815260200190815260200160002054905092915050565b6000836050016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082605001600083815260200190815260200160002060030180549050905092915050565b60008084604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014806119dd57508184604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561199f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156119eb5760009050611c3c565b600084604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490501415611a47576000915050611c3c565b806001828054905003815481101515611a5c57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1683101515611af957806001828054905003815481101515611ab557fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16915050611c3c565b806000815481101515611b0857fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16831015611b55576000915050611c3c565b60008090506000600183805490500390505b81811115611bec5760006002600184840101811515611b8257fe5b049050858482815481101515611b9457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111515611bdf57809250611be6565b6001810391505b50611b67565b8282815481101515611bfa57fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505050505b9392505050565b600082604801600083815260200190815260200160002054905092915050565b600082604b01600083815260200190815260200160002054905092915050565b600083604901600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611cf6612acf565b8360500160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611d8c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d42575b505050505090509392505050565b6000611da7838343611900565b905092915050565b60008083604f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015484604f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b600083605001600084815260200190815260200160002060030182815481101515611e6e57fe5b906000526020600020015490509392505050565b600083605001600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008084604f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115611f94576000611f7f83611f7187604801600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054611f638989611d9a565b612a9390919063ffffffff16565b612a9390919063ffffffff16565b101515611f8f5760019050611fc8565b611fc3565b6000611fb283611fa48787611d9a565b612a9390919063ffffffff16565b101515611fc25760019050611fc8565b5b600090505b9392505050565b60008060006060600080866000015487604801600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604801600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960500160008b604801600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60500160008c604801600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60500160008d604801600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122bd5780601f10612292576101008083540402835291602001916122bd565b820191906000526020600020905b8154815290600101906020018083116122a057829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604c01600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b600080600080600080600061235a612af2565b6000808b604c0160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101006040519081016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d0000000000000000000000000000000000000000000000000000815250600601905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6126d6612b16565b81600901603380602002604051908101604052809291908260338015612711576020028201915b8154815260200190600101908083116126fd575b50505050509050919050565b600083605001600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082605201600083815260200190815260200160002054905092915050565b606080600080600080600088605001600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129175780601f106128ec57610100808354040283529160200191612917565b820191906000526020600020905b8154815290600101906020018083116128fa57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129b35780601f10612988576101008083540402835291602001916129b3565b820191906000526020600020905b81548152906001019060200180831161299657829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612a888384604a01600086604801600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604801600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611e82565b600191509150915091565b6000828211151515612aa157fe5b818303905092915050565b60a060405190810160405280600590602082028038833980820191505090505090565b60a060405190810160405280600590602082028038833980820191505090505090565b61010060405190810160405280600890602082028038833980820191505090505090565b61066060405190810160405280603390602082028038833980820191505090505090565b3382604701600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082604701600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505056fea165627a7a723058208b4ccbd4ecd0760354126919f58b7f9cd5455243499a06a66ed6abdfc26842300029",
  "deployedBytecode": "0x608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f0b424d1461025657806311c98512146102a5578063133bee5e1461032657806315070401146103a157806317d7de7c1461043157806318160ddd146104c157806319e8e03b146104ec5780631db842f01461058a5780633df0777b146105d957806346eee1c4146106365780634ee2cd7e14610685578063612c8f7f146106f45780636173c0b81461074357806363bb82ad1461079257806369026d631461080557806370a0823114610886578063733bdef0146108eb57806377fbb6631461095757806393fa4915146109b0578063999cf26c14610a09578063a22e407a14610a7c578063a7c438bc14610b2f578063af0b132714610ba2578063b541302914610ce1578063c775b54214610d34578063da37994114610d8d578063dd62ed3e14610ddc578063e1eee6d614610e61578063fc7cf0a014610f9d575b600080604701600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e8260008114610252578282f35b8282fd5b34801561026257600080fd5b5061028f6004803603602081101561027957600080fd5b8101908080359060200190929190505050610fd3565b6040518082815260200191505060405180910390f35b3480156102b157600080fd5b506102e8600480360360408110156102c857600080fd5b810190808035906020019092919080359060200190929190505050610ff0565b6040518082600560200280838360005b838110156103135780820151818401526020810190506102f8565b5050505090500191505060405180910390f35b34801561033257600080fd5b5061035f6004803603602081101561034957600080fd5b8101908080359060200190929190505050611016565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ad57600080fd5b506103b6611033565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f65780820151818401526020810190506103db565b50505050905090810190601f1680156104235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043d57600080fd5b50610446611044565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561048657808201518184015260208101905061046b565b50505050905090810190601f1680156104b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104cd57600080fd5b506104d6611055565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b50610501611066565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561054d578082015181840152602081019050610532565b50505050905090810190601f16801561057a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561059657600080fd5b506105c3600480360360208110156105ad57600080fd5b8101908080359060200190929190505050611080565b6040518082815260200191505060405180910390f35b3480156105e557600080fd5b5061061c600480360360408110156105fc57600080fd5b81019080803590602001909291908035906020019092919050505061109d565b604051808215151515815260200191505060405180910390f35b34801561064257600080fd5b5061066f6004803603602081101561065957600080fd5b81019080803590602001909291905050506110bd565b6040518082815260200191505060405180910390f35b34801561069157600080fd5b506106de600480360360408110156106a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110da565b6040518082815260200191505060405180910390f35b34801561070057600080fd5b5061072d6004803603602081101561071757600080fd5b81019080803590602001909291905050506110fa565b6040518082815260200191505060405180910390f35b34801561074f57600080fd5b5061077c6004803603602081101561076657600080fd5b8101908080359060200190929190505050611117565b6040518082815260200191505060405180910390f35b34801561079e57600080fd5b506107eb600480360360408110156107b557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611134565b604051808215151515815260200191505060405180910390f35b34801561081157600080fd5b506108486004803603604081101561082857600080fd5b810190808035906020019092919080359060200190929190505050611154565b6040518082600560200280838360005b83811015610873578082015181840152602081019050610858565b5050505090500191505060405180910390f35b34801561089257600080fd5b506108d5600480360360208110156108a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117a565b6040518082815260200191505060405180910390f35b3480156108f757600080fd5b5061093a6004803603602081101561090e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611197565b604051808381526020018281526020019250505060405180910390f35b34801561096357600080fd5b5061099a6004803603604081101561097a57600080fd5b8101908080359060200190929190803590602001909291905050506111b7565b6040518082815260200191505060405180910390f35b3480156109bc57600080fd5b506109f3600480360360408110156109d357600080fd5b8101908080359060200190929190803590602001909291905050506111d7565b6040518082815260200191505060405180910390f35b348015610a1557600080fd5b50610a6260048036036040811015610a2c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f7565b604051808215151515815260200191505060405180910390f35b348015610a8857600080fd5b50610a91611217565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610aef578082015181840152602081019050610ad4565b50505050905090810190601f168015610b1c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610b3b57600080fd5b50610b8860048036036040811015610b5257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123f565b604051808215151515815260200191505060405180910390f35b348015610bae57600080fd5b50610bdb60048036036020811015610bc557600080fd5b810190808035906020019092919050505061125f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600860200280838360005b83811015610cc0578082015181840152602081019050610ca5565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ced57600080fd5b50610cf66112a7565b6040518082603360200280838360005b83811015610d21578082015181840152602081019050610d06565b5050505090500191505060405180910390f35b348015610d4057600080fd5b50610d7760048036036040811015610d5757600080fd5b8101908080359060200190929190803590602001909291905050506112be565b6040518082815260200191505060405180910390f35b348015610d9957600080fd5b50610dc660048036036020811015610db057600080fd5b81019080803590602001909291905050506112de565b6040518082815260200191505060405180910390f35b348015610de857600080fd5b50610e4b60048036036040811015610dff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fb565b6040518082815260200191505060405180910390f35b348015610e6d57600080fd5b50610e9a60048036036020811015610e8457600080fd5b8101908080359060200190929190505050611415565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ef6578082015181840152602081019050610edb565b50505050905090810190601f168015610f235780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b83811015610f5c578082015181840152602081019050610f41565b50505050905090810190601f168015610f895780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b348015610fa957600080fd5b50610fb2611447565b60405180838152602001821515151581526020019250505060405180910390f35b6000610fe982600061145c90919063ffffffff16565b9050919050565b610ff8612aac565b61100e8383600061147c9092919063ffffffff16565b905092915050565b600061102c8260006114f290919063ffffffff16565b9050919050565b606061103f6000611532565b905090565b606061105060006115d8565b905090565b6000611061600061167e565b905090565b600080606061107560006116d2565b925092509250909192565b600061109682600061187890919063ffffffff16565b9050919050565b60006110b5838360006118989092919063ffffffff16565b905092915050565b60006110d38260006118da90919063ffffffff16565b9050919050565b60006110f2838360006119009092919063ffffffff16565b905092915050565b6000611110826000611c4390919063ffffffff16565b9050919050565b600061112d826000611c6390919063ffffffff16565b9050919050565b600061114c83836000611c839092919063ffffffff16565b905092915050565b61115c612acf565b61117283836000611cee9092919063ffffffff16565b905092915050565b6000611190826000611d9a90919063ffffffff16565b9050919050565b6000806111ae836000611daf90919063ffffffff16565b91509150915091565b60006111cf83836000611e479092919063ffffffff16565b905092915050565b60006111ef83836000611e829092919063ffffffff16565b905092915050565b600061120f83836000611eb79092919063ffffffff16565b905092915050565b6000806000606060008061122b6000611fcf565b955095509550955095509550909192939495565b6000611257838360006122d99092919063ffffffff16565b905092915050565b6000806000806000806000611272612af2565b60006112888a600061234790919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b6112af612b16565b6112b960006126ce565b905090565b60006112d68383600061271d9092919063ffffffff16565b905092915050565b60006112f482600061275290919063ffffffff16565b9050919050565b60008073__TellorGettersLibrary__________________63912c0e65909185856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b60608060008060008061143287600061277290919063ffffffff16565b95509550955095509550955091939550919395565b60008061145460006129d1565b915091509091565b600082604a01600083815260200190815260200160002054905092915050565b611484612aac565b83605001600084815260200190815260200160002060090160008381526020019081526020016000206005806020026040519081016040528092919082600580156114e4576020028201915b8154815260200190600101908083116114d0575b505050505090509392505050565b600082604701600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6060816003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cc5780601f106115a1576101008083540402835291602001916115cc565b820191906000526020600020905b8154815290600101906020018083116115af57829003601f168201915b50505050509050919050565b6060816002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116725780601f1061164757610100808354040283529160200191611672565b820191906000526020600020905b81548152906001019060200180831161165557829003601f168201915b50505050509050919050565b600081604801600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b600080606083604801600060405180807f6f6e4465636b5265717565737449640000000000000000000000000000000000815250600f019050604051809103902081526020019081526020016000205484604801600060405180807f6f6e4465636b546f74616c546970730000000000000000000000000000000000815250600f019050604051809103902081526020019081526020016000205485605001600087604801600060405180807f6f6e4465636b5265717565737449640000000000000000000000000000000000815250600f01905060405180910390208152602001908152602001600020548152602001908152602001600020600001808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118645780601f1061183957610100808354040283529160200191611864565b820191906000526020600020905b81548152906001019060200180831161184757829003601f168201915b505050505090509250925092509193909250565b600082605101600083815260200190815260200160002054905092915050565b6000836050016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082605001600083815260200190815260200160002060030180549050905092915050565b60008084604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014806119dd57508184604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561199f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156119eb5760009050611c3c565b600084604d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490501415611a47576000915050611c3c565b806001828054905003815481101515611a5c57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1683101515611af957806001828054905003815481101515611ab557fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16915050611c3c565b806000815481101515611b0857fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16831015611b55576000915050611c3c565b60008090506000600183805490500390505b81811115611bec5760006002600184840101811515611b8257fe5b049050858482815481101515611b9457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111515611bdf57809250611be6565b6001810391505b50611b67565b8282815481101515611bfa57fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505050505b9392505050565b600082604801600083815260200190815260200160002054905092915050565b600082604b01600083815260200190815260200160002054905092915050565b600083604901600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611cf6612acf565b8360500160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611d8c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d42575b505050505090509392505050565b6000611da7838343611900565b905092915050565b60008083604f0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015484604f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b600083605001600084815260200190815260200160002060030182815481101515611e6e57fe5b906000526020600020015490509392505050565b600083605001600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008084604f0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115611f94576000611f7f83611f7187604801600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054611f638989611d9a565b612a9390919063ffffffff16565b612a9390919063ffffffff16565b101515611f8f5760019050611fc8565b611fc3565b6000611fb283611fa48787611d9a565b612a9390919063ffffffff16565b101515611fc25760019050611fc8565b5b600090505b9392505050565b60008060006060600080866000015487604801600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604801600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960500160008b604801600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60500160008c604801600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60500160008d604801600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122bd5780601f10612292576101008083540402835291602001916122bd565b820191906000526020600020905b8154815290600101906020018083116122a057829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604c01600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b600080600080600080600061235a612af2565b6000808b604c0160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101006040519081016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d0000000000000000000000000000000000000000000000000000815250600601905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6126d6612b16565b81600901603380602002604051908101604052809291908260338015612711576020028201915b8154815260200190600101908083116126fd575b50505050509050919050565b600083605001600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082605201600083815260200190815260200160002054905092915050565b606080600080600080600088605001600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129175780601f106128ec57610100808354040283529160200191612917565b820191906000526020600020905b8154815290600101906020018083116128fa57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129b35780601f10612988576101008083540402835291602001916129b3565b820191906000526020600020905b81548152906001019060200180831161299657829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612a888384604a01600086604801600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604801600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054611e82565b600191509150915091565b6000828211151515612aa157fe5b818303905092915050565b60a060405190810160405280600590602082028038833980820191505090505090565b60a060405190810160405280600590602082028038833980820191505090505090565b61010060405190810160405280600890602082028038833980820191505090505090565b61066060405190810160405280603390602082028038833980820191505090505090565b3382604701600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082604701600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505056fea165627a7a723058208b4ccbd4ecd0760354126919f58b7f9cd5455243499a06a66ed6abdfc26842300029",
  "sourceMap": "143:1043:4:-;;;313:109;8:9:-1;5:2;;;30:1;27;20:12;5:2;313:109:4;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;313:109:4;;;;;;;;;;;;;;;;368:47;399:15;368:6;:30;;;;;;:47;;;;;:::i;:::-;313:109;143:1043;;9999:286:8;10148:10;10108:4;:16;;:37;10125:19;;;;;;;;;;;;;;;;;;;10108:37;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;10215:15;10168:4;:16;;:45;10185:27;;;;;;;;;;;;;;;;;;;10168:45;;;;;;;;;;;;:62;;;;;;;;;;;;;;;;;;10245:33;10262:15;10245:33;;;;;;;;;;;;;;;;;;;;;;9999:286;;:::o;143:1043:4:-;;;;;;;",
  "deployedSourceMap": "143:1043:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;558:12;573:6;:18;;:47;592:27;;;;;;;;;;;;;;;;;;;573:47;;;;;;;;;;;;;;;;;;;;;558:62;;630:22;655:8;;630:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;630:33:4;;;;;;;;780:1;777;765:9;759:16;752:4;741:9;737:20;731:4;727:1;723:6;710:72;807:14;851:4;845:11;892:4;889:1;884:3;869:28;1090:6;1102:1;1097:28;;;;1160:4;1155:3;1148:17;1097:28;1118:4;1113:3;1106:17;7939:147:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7939:147:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7939:147:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10536:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10536:185:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10536:185:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10536:185:3;;;;;;;;;;;;;;;;3284:121;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3284:121:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3284:121:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12802:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12802:99:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12802:99:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12606:95;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12606:95:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12606:95:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13012;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13012:95:3;;;;;;;;;;;;;;;;;;;;;;;11950:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11950:132:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11950:132:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8302:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8302:146:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8302:146:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12358:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12358:147:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12358:147:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7318:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7318:151:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7318:151:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2019:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2019:146:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2019:146:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11693:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11693:108:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11693:108:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7637:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7637:143:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7637:143:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2471:136:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2471:136:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6753:202;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6753:202:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6753:202:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;6753:202:3;;;;;;;;;;;;;;;;1635:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1635:111:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1635:111:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10119:125;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10119:125:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10119:125:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10939:179;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10939:179:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10939:179:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5962:151;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5962:151:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5962:151:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1294:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1294:139:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1294:139:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4353:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4353:153:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4353:153:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2796:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2796:138:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2796:138:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3870:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3870:197:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3870:197:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3870:197:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8554:103;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8554:103:3;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8554:103:3;;;;;;;;;;;;;;;;6349:157;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6349:157:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6349:157:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4702:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4702:141:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4702:141:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;905:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;905:136:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;905:136:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9703:175;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9703:175:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9703:175:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9703:175:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9703:175:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5641:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5641:107:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7939:147;8011:4;8037:42;8068:10;8037:6;:30;;:42;;;;:::i;:::-;8030:49;;7939:147;;;:::o;10536:185::-;10627:14;;:::i;:::-;10659:55;10692:10;10703;10659:6;:32;;:55;;;;;:::i;:::-;10652:62;;10536:185;;;;:::o;3284:121::-;3345:7;3370:28;3392:5;3370:6;:21;;:28;;;;:::i;:::-;3363:35;;3284:121;;;:::o;12802:99::-;12845:13;12876:18;:6;:16;:18::i;:::-;12869:25;;12802:99;:::o;12606:95::-;12647:13;12678:16;:6;:14;:16::i;:::-;12671:23;;12606:95;:::o;13012:::-;13058:4;13080:20;:6;:18;:20::i;:::-;13073:27;;13012:95;:::o;11950:132::-;12002:4;12008;12013:13;12048:27;:6;:25;:27::i;:::-;12041:34;;;;;;11950:132;;;:::o;8302:146::-;8375:4;8401:40;8432:8;8401:6;:30;;:40;;;;:::i;:::-;8394:47;;8302:146;;;:::o;12358:147::-;12435:4;12457:41;12476:10;12487;12457:6;:18;;:41;;;;;:::i;:::-;12450:48;;12358:147;;;;:::o;7318:151::-;7394:4;7416:46;7451:10;7416:6;:34;;:46;;;;:::i;:::-;7409:53;;7318:151;;;:::o;2019:146::-;2097:4;2120:38;2139:5;2145:12;2120:6;:18;;:38;;;;;:::i;:::-;2113:45;;2019:146;;;;:::o;11693:108::-;11748:4;11770:24;11788:5;11770:6;:17;;:24;;;;:::i;:::-;11763:31;;11693:108;;;:::o;7637:143::-;7709:4;7731:42;7766:6;7731;:34;;:42;;;;:::i;:::-;7724:49;;7637:143;;;:::o;2471:136::-;2545:4;2567:33;2582:10;2593:6;2567;:14;;:33;;;;;:::i;:::-;2560:40;;2471:136;;;;:::o;6753:202::-;6851:17;;:::i;:::-;6886:62;6926:10;6937;6886:6;:39;;:62;;;;;:::i;:::-;6879:69;;6753:202;;;;:::o;1635:111::-;1692:4;1716:23;1733:5;1716:6;:16;;:23;;;;:::i;:::-;1709:30;;1635:111;;;:::o;10119:125::-;10181:4;10186;10208:29;10229:7;10208:6;:20;;:29;;;;:::i;:::-;10201:36;;;;10119:125;;;:::o;10939:179::-;11032:4;11054:57;11093:10;11104:6;11054;:38;;:57;;;;;:::i;:::-;11047:64;;10939:179;;;;:::o;5962:151::-;6041:4;6064:42;6084:10;6095;6064:6;:19;;:42;;;;;:::i;:::-;6057:49;;5962:151;;;;:::o;1294:139::-;1368:4;1390:36;1412:5;1418:7;1390:6;:21;;:36;;;;;:::i;:::-;1383:43;;1294:139;;;;:::o;4353:153::-;4406:7;4415:4;4421;4426:13;4440:4;4445;4471:28;:6;:26;:28::i;:::-;4464:35;;;;;;;;;;;;4353:153;;;;;;:::o;2796:138::-;2870:4;2892:35;2907:10;2918:8;2892:6;:14;;:35;;;;;:::i;:::-;2885:42;;2796:138;;;;:::o;3870:197::-;3934:7;3943:4;3949;3955;3961:7;3970;3979;3987:14;;:::i;:::-;4003:3;4024:36;4049:10;4024:6;:24;;:36;;;;:::i;:::-;4017:43;;;;;;;;;;;;;;;;;;3870:197;;;;;;;;;;;:::o;8554:103::-;8597:15;;:::i;:::-;8630:20;:6;:18;:20::i;:::-;8623:27;;8554:103;:::o;6349:157::-;6431:4;6453:46;6477:10;6488;6453:6;:23;;:46;;;;;:::i;:::-;6446:53;;6349:157;;;;:::o;4702:141::-;4774:4;4797:39;4830:5;4797:6;:32;;:39;;;;:::i;:::-;4789:47;;4702:141;;;:::o;905:136::-;980:4;1002:6;:16;;;;1019:5;1025:8;1002:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1002:32:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1002:32:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1002:32:3;;;;;;;;;;;;;;;;995:39;;905:136;;;;:::o;9703:175::-;9766:13;9781;9795:7;9803:4;9809;9815;9838:33;9860:10;9838:6;:21;;:33;;;;:::i;:::-;9831:40;;;;;;;;;;;;9703:175;;;;;;;:::o;5641:107::-;5690:4;5695;5717:24;:6;:22;:24::i;:::-;5710:31;;;;5641:107;;:::o;20284:176:8:-;20390:4;20416;:25;;:37;20442:10;20416:37;;;;;;;;;;;;20409:44;;20284:176;;;;:::o;23352:225::-;23477:14;;:::i;:::-;23509:4;:19;;:31;23529:10;23509:31;;;;;;;;;;;:49;;:61;23559:10;23509:61;;;;;;;;;;;23502:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23352:225;;;;;:::o;14181:150::-;14276:7;14301:4;:16;;:23;14318:5;14301:23;;;;;;;;;;;;;;;;;;;;;14294:30;;14181:150;;;;:::o;26011:125::-;26086:13;26117:4;:12;;26110:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26011:125;;;:::o;25789:121::-;25862:13;25893:4;:10;;25886:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25789:121;;;:::o;26247:147::-;26325:4;26347;:13;;:40;26361:25;;;;;;;;;;;;;;;;;;;26347:40;;;;;;;;;;;;26340:47;;26247:147;;;:::o;24866:303::-;24950:4;24956;24961:13;24997:4;:13;;:43;25011:28;;;;;;;;;;;;;;;;;;;24997:43;;;;;;;;;;;;25041:4;:13;;:43;25055:28;;;;;;;;;;;;;;;;;;;25041:43;;;;;;;;;;;;25085:4;:19;;:64;25105:4;:13;;:43;25119:28;;;;;;;;;;;;;;;;;;;25105:43;;;;;;;;;;;;25085:64;;;;;;;;;;;:76;;24989:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24866:303;;;;;:::o;20661:179::-;20770:4;20796;:25;;:37;20822:10;20796:37;;;;;;;;;;;;20789:44;;20661:179;;;;:::o;25442:193::-;25553:4;25575;:19;;:31;25595:10;25575:31;;;;;;;;;;;:41;;:53;25617:10;25575:53;;;;;;;;;;;;;;;;;;;;;25568:60;;25442:193;;;;;:::o;19590:195::-;19700:4;19722;:19;;:31;19742:10;19722:31;;;;;;;;;;;:49;;:56;;;;19715:63;;19590:195;;;;:::o;11994:976::-;12105:4;12157:1;12126:4;:13;;:20;12140:5;12126:20;;;;;;;;;;;;;;;:27;;;;:32;12125:88;;;;12200:12;12164:4;:13;;:20;12178:5;12164:20;;;;;;;;;;;;;;;12185:1;12164:23;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;:48;;;12125:88;12121:843;;;12240:1;12233:8;;;;12121:843;12273:32;12308:4;:13;;:20;12322:5;12308:20;;;;;;;;;;;;;;;12273:55;;12364:1;12342:11;:18;;;;:23;12338:37;;;12374:1;12367:8;;;;;12338:37;12405:11;12436:1;12417:11;:18;;;;:20;12405:33;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;12389:59;;:12;:59;;12385:123;;;12469:11;12500:1;12481:11;:18;;;;:20;12469:33;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;12462:46;;;;;;;12385:123;12537:11;12549:1;12537:14;;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;12522:39;;:12;:39;12518:53;;;12570:1;12563:8;;;;;12518:53;12632:8;12643:1;12632:12;;12654:8;12684:1;12665:11;:18;;;;:20;12654:31;;12695:223;12708:3;12702;:9;12695:223;;;12727:8;12755:1;12751;12745:3;12739;:9;:13;12738:18;;;;;;;;12727:29;;12802:12;12774:11;12786:3;12774:16;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:40;;;;12770:138;;;12840:3;12834:9;;12770:138;;;12892:1;12888:3;:5;12882:11;;12770:138;12695:223;;;;12934:11;12946:3;12934:16;;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;12927:29;;;;;;;11994:976;;;;;;:::o;24581:139::-;24671:4;24693;:13;;:20;24707:5;24693:20;;;;;;;;;;;;24686:27;;24581:139;;;;:::o;19953:172::-;20059:4;20081;:29;;:37;20111:6;20081:37;;;;;;;;;;;;20074:44;;19953:172;;;;:::o;13277:179::-;13385:4;13407;:22;;:34;13430:10;13407:34;;;;;;;;;;;:42;13442:6;13407:42;;;;;;;;;;;;;;;;;;;;;;;;;13400:49;;13277:179;;;;;:::o;18996:231::-;19128:17;;:::i;:::-;19163:4;:19;;:31;19183:10;19163:31;;;;;;;;;;;:45;;:57;19209:10;19163:57;;;;;;;;;;;19156:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18996:231;;;;;:::o;11557:159::-;11647:4;11671:37;11683:4;11688:5;11695:12;11671:11;:37::i;:::-;11664:44;;11557:159;;;;:::o;22852:210::-;22947:4;22952;22975;:18;;:27;22994:7;22975:27;;;;;;;;;;;;;;;:41;;;23017:4;:18;;:27;23036:7;23017:27;;;;;;;;;;;;;;;:37;;;22967:88;;;;22852:210;;;;;:::o;23794:212::-;23920:4;23942;:19;;:31;23962:10;23942:31;;;;;;;;;;;:49;;23992:6;23942:57;;;;;;;;;;;;;;;;;;23935:64;;23794:212;;;;;:::o;18114:198::-;18227:4;18250;:19;;:31;18270:10;18250:31;;;;;;;;;;;:43;;:55;18294:10;18250:55;;;;;;;;;;;;18243:62;;18114:198;;;;;:::o;10897:449::-;11004:4;11063:1;11022:4;:18;;:25;11041:5;11022:25;;;;;;;;;;;;;;;:39;;;:42;11019:299;;;11165:1;11082:79;11153:7;11082:66;11108:4;:13;;:39;11122:24;;;;;;;;;;;;;;;;;;;11108:39;;;;;;;;;;;;11082:21;11092:4;11097:5;11082:9;:21::i;:::-;:25;;:66;;;;:::i;:::-;:70;;:79;;;;:::i;:::-;:84;;11079:132;;;11192:4;11185:11;;;;11079:132;11019:299;;;11276:1;11238:34;11264:7;11238:21;11248:4;11253:5;11238:9;:21::i;:::-;:25;;:34;;;;:::i;:::-;:39;;11235:83;;;11303:4;11296:11;;;;11235:83;11019:299;11334:5;11327:12;;10897:449;;;;;;:::o;15857:547::-;15942:7;15951:4;15957;15962:13;15976:4;15981;16008;:21;;;16030:4;:13;;:44;16044:29;;;;;;;;;;;;;;;;;;;16030:44;;;;;;;;;;;;16075:4;:13;;:38;16089:23;;;;;;;;;;;;;;;;;;;16075:38;;;;;;;;;;;;16114:4;:19;;:65;16134:4;:13;;:44;16148:29;;;;;;;;;;;;;;;;;;;16134:44;;;;;;;;;;;;16114:65;;;;;;;;;;;:77;;16192:4;:19;;:65;16212:4;:13;;:44;16226:29;;;;;;;;;;;;;;;;;;;16212:44;;;;;;;;;;;;16192:65;;;;;;;;;;;:77;;:103;16270:24;;;;;;;;;;;;;;;;;;;16192:103;;;;;;;;;;;;16296:4;:19;;:65;16316:4;:13;;:44;16330:29;;;;;;;;;;;;;;;;;;;16316:44;;;;;;;;;;;;16296:65;;;;;;;;;;;:77;;:100;16374:21;;;;;;;;;;;;;;;;;;;16296:100;;;;;;;;;;;;16000:397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15857:547;;;;;;;:::o;13650:181::-;13757:4;13779;:17;;:29;13797:10;13779:29;;;;;;;;;;;:35;;:45;13815:8;13779:45;;;;;;;;;;;;;;;;;;;;;;;;;13772:52;;13650:181;;;;;:::o;14797:775::-;14896:7;14905:4;14911;14917;14923:7;14932;14941;14949:14;;:::i;:::-;14965:3;14979:20;15002:4;:17;;:29;15020:10;15002:29;;;;;;;;;;;14979:52;;15048:4;:9;;;15058:4;:13;;;;;;;;;;;;15073:4;:22;;;;;;;;;;;;15097:4;:15;;;;;;;;;;;;15114:4;:18;;;;;;;;;;;;15134:4;:19;;;;;;;;;;;;15154:4;:24;;;;;;;;;;;;15041:524;;;;;;;;;15180:4;:20;;:44;15201:22;;;;;;;;;;;;;;;;;;;15180:44;;;;;;;;;;;;15041:524;;;;15226:4;:20;;:44;15247:22;;;;;;;;;;;;;;;;;;;15226:44;;;;;;;;;;;;15041:524;;;;15272:4;:20;;:40;15293:18;;;;;;;;;;;;;;;;;;;15272:40;;;;;;;;;;;;15041:524;;;;15314:4;:20;;:51;15335:29;;;;;;;;;;;;;;;;;;;15314:51;;;;;;;;;;;;15041:524;;;;15367:4;:20;;:48;15388:26;;;;;;;;;;;;;;;;;;;15367:48;;;;;;;;;;;;15041:524;;;;15417:4;:20;;:46;15438:24;;;;;;;;;;;;;;;;;;;15417:46;;;;;;;;;;;;15041:524;;;;15465:4;:20;;:44;15486:22;;;;;;;;;;;;;;;;;;;15465:44;;;;;;;;;;;;15041:524;;;;15511:4;:20;;:41;15532:19;;;;;;;;;;;;;;;;;;;15511:41;;;;;;;;;;;;15041:524;;;15554:4;:10;;;15041:524;;;;;;;;;;;;;;;;;;;14797:775;;;;;;;;;;;:::o;20946:130::-;21023:15;;:::i;:::-;21056:4;:13;;21049:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20946:130;;;:::o;18548:201::-;18663:4;18685;:19;;:31;18705:10;18685:31;;;;;;;;;;;:45;;:57;18731:10;18685:57;;;;;;;;;;;;18678:64;;18548:201;;;;;:::o;16601:169::-;16706:4;16729;:27;;:34;16757:5;16729:34;;;;;;;;;;;;16721:42;;16601:169;;;;:::o;22162:449::-;22258:13;22272;22287:7;22295:4;22301;22307;22323:24;22350:4;:19;;:31;22370:10;22350:31;;;;;;;;;;;22323:58;;22400:8;:20;;22421:8;:19;;22441:8;:18;;;22461:8;:20;;:46;22482:24;;;;;;;;;;;;;;;;;;;22461:46;;;;;;;;;;;;22508:8;:20;;:51;22529:29;;;;;;;;;;;;;;;;;;;22508:51;;;;;;;;;;;;22560:8;:20;;:43;22581:21;;;;;;;;;;;;;;;;;;;22560:43;;;;;;;;;;;;22392:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22162:449;;;;;;;;:::o;17612:262::-;17693:4;17698;17721:140;17734:4;17739;:25;;:73;17765:4;:13;;:46;17779:31;;;;;;;;;;;;;;;;;;;17765:46;;;;;;;;;;;;17739:73;;;;;;;;;;;;17814:4;:13;;:46;17828:31;;;;;;;;;;;;;;;;;;;17814:46;;;;;;;;;;;;17721:12;:140::i;:::-;17862:4;17713:154;;;;17612:262;;;:::o;511:110:7:-;569:7;596:1;591;:6;;584:14;;;;;;615:1;611;:5;604:12;;511:110;;;;:::o;143:1043:4:-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;143:1043:4;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;143:1043:4;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;143:1043:4;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;143:1043:4;;;;:::o;9999:286:8:-;10148:10;10108:4;:16;;:37;10125:19;;;;;;;;;;;;;;;;;;;10108:37;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;10215:15;10168:4;:16;;:45;10185:27;;;;;;;;;;;;;;;;;;;10168:45;;;;;;;;;;;;:62;;;;;;;;;;;;;;;;;;10245:33;10262:15;10245:33;;;;;;;;;;;;;;;;;;;;;;9999:286;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./TellorGetters.sol\";\nimport \"./libraries/TellorLibrary.sol\";\nimport \"./libraries/TellorGettersLibrary.sol\";\n\ncontract TellorMaster is TellorGetters{\n    /**\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\n    * account.\n    */\n    constructor (address _tellorContract)  public{\n        tellor.tellorMasterConstructor(_tellorContract);\n    }\n\n\n    /**\n    @dev this fuction allows for delegate calls to the Tellor contract.???\n    */\n    function () external payable {\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\n        bytes memory _calldata = msg.data;\n        assembly {\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n}\n\n\n        // Test this one:\n        //     let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n        //     let size := returndatasize\n        //     let ptr := mload(0x40)\n        //     returndatacopy(ptr, 0, size)\n\n        //     // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n        //     // if the call returned error data, forward it\n        //     switch result case 0 { revert(ptr, size) }\n        //     default { return(ptr, size) }\n\n\n        //     vs old:\n\n        //                 let freememstart := mload(0x40)\n        //     calldatacopy(freememstart, 0, calldatasize())\n        //     let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 32)\n        //     switch success\n        //     case 0 { revert(freememstart, 32) }\n        //     default { return(freememstart, 32) }",
  "sourcePath": "/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol",
  "ast": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        824
      ]
    },
    "id": 825,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 787,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 788,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 786,
        "src": "25:29:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/libraries/TellorLibrary.sol",
        "file": "./libraries/TellorLibrary.sol",
        "id": 789,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 5798,
        "src": "55:39:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/libraries/TellorGettersLibrary.sol",
        "file": "./libraries/TellorGettersLibrary.sol",
        "id": 790,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 2214,
        "src": "95:46:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 791,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 785,
              "src": "168:13:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$785",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 792,
            "nodeType": "InheritanceSpecifier",
            "src": "168:13:4"
          }
        ],
        "contractDependencies": [
          785
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 824,
        "linearizedBaseContracts": [
          824,
          785
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 803,
              "nodeType": "Block",
              "src": "358:64:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 800,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 794,
                        "src": "399:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 797,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 311,
                        "src": "368:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$1138_storage",
                          "typeString": "struct TellorGettersLibrary.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 799,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tellorMasterConstructor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1311,
                      "src": "368:30:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$1138_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$1138_storage_ptr_$",
                        "typeString": "function (struct TellorGettersLibrary.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 801,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "368:47:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 802,
                  "nodeType": "ExpressionStatement",
                  "src": "368:47:4"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount.",
            "id": 804,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 795,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 794,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 804,
                  "src": "326:23:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 793,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "326:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "325:25:4"
            },
            "returnParameters": {
              "id": 796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "358:0:4"
            },
            "scope": 824,
            "src": "313:109:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 822,
              "nodeType": "Block",
              "src": "548:635:4",
              "statements": [
                {
                  "assignments": [
                    808
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 808,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 822,
                      "src": "558:12:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 807,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "558:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 815,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 809,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 311,
                        "src": "573:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$1138_storage",
                          "typeString": "struct TellorGettersLibrary.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 810,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1088,
                      "src": "573:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 814,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 812,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "602:16:4",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 811,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5916,
                        "src": "592:9:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 813,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "592:27:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "573:47:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "558:62:4"
                },
                {
                  "assignments": [
                    817
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 817,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 822,
                      "src": "630:22:4",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 816,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "630:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 820,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 818,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5922,
                      "src": "655:3:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 819,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "655:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "630:33:4"
                },
                {
                  "externalReferences": [
                    {
                      "addr": {
                        "declaration": 808,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "731:4:4",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 817,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "765:9:4",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 817,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "741:9:4",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 821,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "673:510:4"
                }
              ]
            },
            "documentation": "@dev this fuction allows for delegate calls to the Tellor contract.???",
            "id": 823,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "528:2:4"
            },
            "returnParameters": {
              "id": 806,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "548:0:4"
            },
            "scope": 824,
            "src": "519:664:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 825,
        "src": "143:1043:4"
      }
    ],
    "src": "0:2107:4"
  },
  "legacyAST": {
    "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        824
      ]
    },
    "id": 825,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 787,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 788,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 786,
        "src": "25:29:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/libraries/TellorLibrary.sol",
        "file": "./libraries/TellorLibrary.sol",
        "id": 789,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 5798,
        "src": "55:39:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/mdcoon/git/TellorCore/contracts/libraries/TellorGettersLibrary.sol",
        "file": "./libraries/TellorGettersLibrary.sol",
        "id": 790,
        "nodeType": "ImportDirective",
        "scope": 825,
        "sourceUnit": 2214,
        "src": "95:46:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 791,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 785,
              "src": "168:13:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$785",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 792,
            "nodeType": "InheritanceSpecifier",
            "src": "168:13:4"
          }
        ],
        "contractDependencies": [
          785
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 824,
        "linearizedBaseContracts": [
          824,
          785
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 803,
              "nodeType": "Block",
              "src": "358:64:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 800,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 794,
                        "src": "399:15:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 797,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 311,
                        "src": "368:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$1138_storage",
                          "typeString": "struct TellorGettersLibrary.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 799,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tellorMasterConstructor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1311,
                      "src": "368:30:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$1138_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$1138_storage_ptr_$",
                        "typeString": "function (struct TellorGettersLibrary.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 801,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "368:47:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 802,
                  "nodeType": "ExpressionStatement",
                  "src": "368:47:4"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount.",
            "id": 804,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 795,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 794,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 804,
                  "src": "326:23:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 793,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "326:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "325:25:4"
            },
            "returnParameters": {
              "id": 796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "358:0:4"
            },
            "scope": 824,
            "src": "313:109:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 822,
              "nodeType": "Block",
              "src": "548:635:4",
              "statements": [
                {
                  "assignments": [
                    808
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 808,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 822,
                      "src": "558:12:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 807,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "558:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 815,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 809,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 311,
                        "src": "573:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$1138_storage",
                          "typeString": "struct TellorGettersLibrary.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 810,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1088,
                      "src": "573:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 814,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 812,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "602:16:4",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 811,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5916,
                        "src": "592:9:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 813,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "592:27:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "573:47:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "558:62:4"
                },
                {
                  "assignments": [
                    817
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 817,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 822,
                      "src": "630:22:4",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 816,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "630:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 820,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 818,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5922,
                      "src": "655:3:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 819,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "655:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "630:33:4"
                },
                {
                  "externalReferences": [
                    {
                      "addr": {
                        "declaration": 808,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "731:4:4",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 817,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "765:9:4",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 817,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "741:9:4",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 821,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "673:510:4"
                }
              ]
            },
            "documentation": "@dev this fuction allows for delegate calls to the Tellor contract.???",
            "id": 823,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 805,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "528:2:4"
            },
            "returnParameters": {
              "id": 806,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "548:0:4"
            },
            "scope": 824,
            "src": "519:664:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 825,
        "src": "143:1043:4"
      }
    ],
    "src": "0:2107:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {
    "1556620279524": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_spender",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event",
          "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        },
        "0x6d7f869757848b19c8c2456e95cd98885bc6bed062fda4077bb07985e2f76cc9": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_query",
              "type": "string"
            },
            {
              "indexed": false,
              "name": "_querySymbol",
              "type": "string"
            },
            {
              "indexed": false,
              "name": "_granularity",
              "type": "uint256"
            },
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_totalTips",
              "type": "uint256"
            }
          ],
          "name": "DataRequested",
          "type": "event",
          "signature": "0x6d7f869757848b19c8c2456e95cd98885bc6bed062fda4077bb07985e2f76cc9"
        },
        "0x21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e10434739": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeID",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_result",
              "type": "int256"
            },
            {
              "indexed": true,
              "name": "_reportedMiner",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_reportingParty",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_active",
              "type": "bool"
            }
          ],
          "name": "DisputeVoteTallied",
          "type": "event",
          "signature": "0x21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e10434739"
        },
        "0x9e959738f09af22daede9ff9563f8edf3f5cec8e17ce60287c911c95fa767f42": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "_currentChallenge",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "name": "_currentRequestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_difficulty",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_multiplier",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_query",
              "type": "string"
            },
            {
              "indexed": false,
              "name": "_totalTips",
              "type": "uint256"
            }
          ],
          "name": "NewChallenge",
          "type": "event",
          "signature": "0x9e959738f09af22daede9ff9563f8edf3f5cec8e17ce60287c911c95fa767f42"
        },
        "0xeceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da64": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_timestamp",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_miner",
              "type": "address"
            }
          ],
          "name": "NewDispute",
          "type": "event",
          "signature": "0xeceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da64"
        },
        "0x5ab383fe3e28263c839564bc7545520a7dd34b78cbd7ab21b2da5d2fd027bf6c": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_query",
              "type": "string"
            },
            {
              "indexed": false,
              "name": "_onDeckQueryHash",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "name": "_onDeckTotalTips",
              "type": "uint256"
            }
          ],
          "name": "NewRequestOnDeck",
          "type": "event",
          "signature": "0x5ab383fe3e28263c839564bc7545520a7dd34b78cbd7ab21b2da5d2fd027bf6c"
        },
        "0x46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e2": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "NewStake",
          "type": "event",
          "signature": "0x46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e2"
        },
        "0xc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "_newTellor",
              "type": "address"
            }
          ],
          "name": "NewTellorAddress",
          "type": "event",
          "signature": "0xc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d"
        },
        "0xc509d04e0782579ee59912139246ccbdf6c36c43abd90591d912017f3467dd16": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_time",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_totalTips",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_currentChallenge",
              "type": "bytes32"
            }
          ],
          "name": "NewValue",
          "type": "event",
          "signature": "0xc509d04e0782579ee59912139246ccbdf6c36c43abd90591d912017f3467dd16"
        },
        "0xe6d63a2aee0aaed2ab49702313ce54114f2145af219d7db30d6624af9e6dffc4": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_miner",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_nonce",
              "type": "string"
            },
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_currentChallenge",
              "type": "bytes32"
            }
          ],
          "name": "NonceSubmitted",
          "type": "event",
          "signature": "0xe6d63a2aee0aaed2ab49702313ce54114f2145af219d7db30d6624af9e6dffc4"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event",
          "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
        },
        "0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "StakeWithdrawn",
          "type": "event",
          "signature": "0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec"
        },
        "0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            }
          ],
          "name": "StakeWithdrawRequested",
          "type": "event",
          "signature": "0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf"
        },
        "0xd32134405b68f6f7220f9c38ae310df1b648d16188006768d45be2f7c24e8820": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_sender",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_requestId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_tip",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_totalTips",
              "type": "uint256"
            }
          ],
          "name": "TipAdded",
          "type": "event",
          "signature": "0xd32134405b68f6f7220f9c38ae310df1b648d16188006768d45be2f7c24e8820"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_from",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "_to",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event",
          "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "0x86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "_disputeID",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "_position",
              "type": "bool"
            },
            {
              "indexed": true,
              "name": "_voter",
              "type": "address"
            }
          ],
          "name": "Voted",
          "type": "event",
          "signature": "0x86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0"
        }
      },
      "links": {
        "TellorGettersLibrary": "0x731A4E84fd77618A758883DDa92323EdD291b313"
      },
      "address": "0x2B63d6e98E66C7e9fe11225Ba349B0B33234D9A2",
      "transactionHash": "0xf6d8c83db04084cb32ff7326fe86a04b2dc01ad75c74f9af8d2e5799eab4fb2c"
    }
  },
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-30T10:31:54.683Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount  ",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account."
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the "
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]*"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "address of reported mineraddress of reporting partydisputed apiIddisputed minimum execution dateuint number of votesuint blockNumber of voteuint index in disputeId arrayint count of the current tallybool of whether vote has been tallied"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), , total tip for the request "
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submited"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getName()": {
        "details": "Get the name of the token return string of the token name"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp ",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getSymbol()": {
        "details": "Get the symbol of the token return string of the token symbol"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable  "
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue",
        "return": "onDeckRequestId, onDeckTotaltips, , and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}