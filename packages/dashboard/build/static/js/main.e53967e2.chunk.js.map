{"version":3,"sources":["Redux/analytics/topRequest/operations.js","Utils/token.js","Redux/analytics/mining/operations.js","Redux/tips/actions.js","Chain/LogEvents/BaseEvent.js","Chain/LogEvents/DataRequested.js","Chain/LogEvents/NonceSubmitted.js","Chain/LogEvents/TipAdded.js","Chain/LogEvents/NewChallenge.js","Chain/LogEvents/NewValue.js","Chain/LogEvents/NewDispute.js","Chain/LogEvents/Voted.js","Chain/LogEvents/index.js","Redux/modals/operations.js","Storage/BaseDB.js","Storage/LocalForage.js","Storage/index.js","Redux/disputes/operations.js","Redux/requests/loaders/nonceLoader.js","Redux/requests/loaders/newValueLoader.js","Redux/requests/loaders/challengeLoader.js","Redux/requests/loaders/tipLoader.js","Redux/requests/loaders/voteLoader.js","Redux/requests/loaders/disputeLoader.js","Redux/requests/loaders/requestLoader.js","Redux/requests/operations.js","Redux/token/operations.js","Utils/strings.js","Redux/requests/actions.js","Chain/utils.js","Redux/tips/operations.js","Store/configureStore.js","Redux/modals/actions.js","Redux/token/actions.js","Redux/analytics/topRequest/actions.js","Redux/chain/actions.js","Redux/disputes/actions.js","Chain/LogEvents/EventFactory.js","Redux/analytics/mining/actions.js","Redux/analytics/tipsOverTime/actions.js","Redux/settings/actions.js","Redux/init/actions.js","Routes/dashboard/index.js","Routes/details/index.js","Routes/settings/index.js","Routes/disputes/index.js","Routes/miner/index.js","Routes/error/index.js","Redux/analytics/tipsOverTime/operations.js","Redux/analytics/operations.js","Redux/init/operations.js","Views/index.js","Components/Scroll/ScrollToTop.jsx","App.js","serviceWorker.js","index.js","Redux/init/reducers.js","Redux/chain/reducers.js","Redux/modals/reducers.js","Redux/settings/reducers.js","Redux/analytics/topRequest/reducers.js","Redux/analytics/tipsOverTime/reducers.js","Redux/analytics/mining/reducers.js","Redux/analytics/reducers.js","Redux/tips/reducers.js","Redux/disputes/reducers.js","Redux/token/reducers.js","Redux/requests/reducers.js","Redux/reducers.js","Store/configureStore.prod.js","Storage/DBNames.js","Constants/chain/web3Config.js","Chain/abi/index.js","Chain/SubscriptionProvider.js","Chain/web3/Web3Contract.js","Chain/web3/Web3Wrapper.js","Chain/index.js","Redux/chain/procs/EthProcessor.js","Redux/chain/procs/BlockSource.js","Redux/chain/procs/ABIParser.js","Redux/chain/procs/enrich/Plugin.js","Redux/chain/procs/enrich/utils.js","Redux/chain/procs/enrich/MiningSolutionHandler.js","Redux/chain/procs/enrich/RequestDataHandler.js","Redux/chain/procs/enrich/InitDispute.js","Redux/chain/procs/enrich/VoteHandler.js","Redux/chain/procs/enrich/Enrichment.js","Redux/chain/procs/ContractEmit.js","Redux/chain/procs/index.js","Redux/chain/operations.js","Redux/DepMiddleware.js"],"names":["__webpack_exports__","init","_ref","Object","_Users_mdcoon_git_tellorscan_packages_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_mdcoon_git_tellorscan_packages_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","dispatch","getState","r","counts","top","topReq","wrap","_context","prev","next","Creators","initStart","Storage","instance","readAll","database","dbNames","limit","sort","field","order","sent","reduce","o","h","id","cnt","count","_Users_mdcoon_git_tellorscan_packages_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_","values","b","initSuccess","t0","failure","stop","_x","_x2","apply","this","arguments","challengeIssued","evt","updateSuccess","__webpack_require__","d","humanizeTellor","updateReward","web3_utils__WEBPACK_IMPORTED_MODULE_0__","BASE","util","TRIBUTE","mul","REWARDS","amt","div","toString","toFixed","ex","rank","rew","add","findFinalValue","n","_Users_mdcoon_git_tellorscan_packages_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","find","selector","challengeHash","abrupt","_ref2","_callee2","tops","i","val","m","_context2","filterFn","v","k","itNum","winningOrder","length","miner","balance","address","lastMineTime","mineTime","_x3","_x4","update","ch","Types","reduxsauce__WEBPACK_IMPORTED_MODULE_0__","createActions","selectForTip","prefix","BaseEvent","props","_this","classCallCheck","forEach","fn","bind","sender","fnContext","event","name","signature","transactionHash","blockNumber","_asNum","transactionIndex","logIndex","timestamp","DataRequested","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","_props$returnValues","returnValues","_query","_querySymbol","_granularity","_requestId","_totalTips","queryString","multiplier","_value","value","_symbol","toUpperCase","undefined","symbol","_queryHash","generateQueryHash","queryHash","parent","get","prototype","payload","objectSpread","tip","normalize","NonceSubmitted","_miner","_nonce","_currentChallenge","toLowerCase","nonce","type","TipAdded","_sender","_tip","totalTips","NewChallenge","_currentRequestId","_difficulty","_multiplier","difficulty","normalized","NewValue","_time","_challengeHash","NewDispute","_disputeId","_timestamp","requestId","_disputeHash","generateDisputeHash","disputeHash","Voted","_disputeID","_position","_voter","agreesWithDisputer","position","voter","DataRequested_DataRequested","NewChallenge_NewChallenge","NonceSubmitted_NonceSubmitted","NewValue_NewValue","TipAdded_TipAdded","NewDispute_NewDispute","Voted_Voted","_actions__WEBPACK_IMPORTED_MODULE_0__","show","hide","collect","data","collectData","clear","clearData","isLoading","loading","err","dbBaseSchema","yup","required","createSchema","shape","key","createBulkSchema","items","of","sortSchema","readSchema","findSchema","nullable","removeSchema","updateSchema","readAllSchema","iterateSchema","BaseDB","dbs","dbPrefix","console","log","pfx","factory","db","extendPrototype","localforage","dbFactory","asyncToGenerator","regenerator_default","createInstance","_buildSortFn","set","s","fld","isAsc","av","bv","sorter","inst","LocalForage","querySizeLimit","Error","keys","nm","_this2","dropInstance","validateSync","_getDB","setItem","_context4","setItems","_context5","getItem","sortFn","iterate","push","callback","selKeys","offset","includeTotal","skipping","endLength","total","dbVal","dbKey","allMatch","p","tgt","isNaN","LF","selectForDispute","clearDisputeSelection","_vote","dispute","pos","_ref3","_callee3","state","con","addr","_context3","chain","contract","ethereumAccount","didVote","toastr","error","vote","info","_x5","_x6","timeRemaining","challenge","Math","floor","Date","now","finalValue","initDispute","chainOps","voteUp","voteDown","toggleDisputeSelection","disputes","selectedChallenge","selNonce","selectedNonce","nonces","filter","isDisputable","voteTimeRemaining","normalizeNonce","toJS","toJSON","nonceLoader","chByHash","challenges","restored","j","byMiner","normalizeValue","newValueLoader","normalizeChallenge","req","miners","minerOrder","toConsumableArray","challengeLoader","reqMap","reqs","byId","byHash","noncesByHash","valuesByHash","dr","nonceOps","valOps","byCHash","defineProperty","normalizeTip","tipLoader","t","normalizeVote","voteLoader","dispMap","normalizeDispute","voteCount","finalTally","disputeLoader","user","disp","_req","dById","votesById","findDisputedNonce","targetNonce","disputer","hById","hByHash","voteOps","userVoted","normalizeRequest","tips","currentTip","requestLoader","chById","current","tipsById","disputesById","chOps","filtered","c","tipOps","dispOps","registerDeps","settingTypes","CLEAR_HISTORY_SUCCESS","reqOps","updateCurrent","findRequestById","requests","findById","create","balanceOf","getTokens","then","catch","e","getBalance","_ref4","_callee4","empty","fixLength","trim","max","half","mid","min","substring","addRequest","updateRequest","multi","ethUtils","vars","getRequestVars","eventFactory","getCurrentTipForRequest","vals","match","showTipModal","modalOps","module","exports","require","updateStart","loadRequest","loadSuccess","___WEBPACK_IMPORTED_MODULE_0__","Type","types","clearHistoryStart","clearHistorySuccess","Main","Loadable","loader","Promise","all","message","react_default","createElement","App","_this$props","location","pathname","react_router","to","className","path","concat","url","component","Component","Error404","document","body","classList","remove","react","Row","Col","xxs","md","Card","react_router_dom","CardTitle","Button","href","color","size","tipsOverTime_operations","history","events","reverse","initTips","initMining","mining","analytics_operations","initTop","initStorage","network","initRequests","initAnalytics","analyticOps","initDisputes","disputeOps","initToken","tokenOps","startSubscriptions","_doStart","initChain","init_operations","initComplete","settingsTypes","unload","unloadChain","AppStart","needsInit","callInit","react_redux_toastr_lib_default","timeOut","newestOnTop","preventDuplicates","transitionIn","transitionOut","progressBar","MainRoute","Details","Settings","Disputes","Miner","connect","initStarted","initOps","ScrollToTop","prevProps","window","scrollTo","children","React","withRouter","store","configureStore","addEventListener","done","preventDefault","returnValue","MainApp","es","Scroll_ScrollToTop","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","INIT","HANDLERS","_HANDLERS","INIT_START","INIT_SUCCESS","FAILURE","action","createReducer","reducers_HANDLERS","LOAD_REQUEST","LOAD_SUCCESS","getContract","visible","errors","showhide","modals_reducers_HANDLERS","SHOW","HIDE","COLLECT_DATA","newData","CLEAR_DATA","IS_LOADING","settings_reducers_HANDLERS","CLEAR_HISTORY_START","runningCounts","topRequest_reducers_HANDLERS","UPDATE_START","UPDATE_SUCCESS","tipsOverTime_reducers_HANDLERS","UPDATE","points","slice","topMiners","mining_reducers_HANDLERS","combineReducers","topRequest","selectedRequest","SELECT_FOR_TIP","request","disputes_reducers_HANDLERS","SELECT_FOR_DISPUTE","token_reducers_HANDLERS","requests_reducers_HANDLERS","ADD_REQUEST","UPDATE_REQUEST","UPDATE_CURRENT","toastrReducer","modals","settings","analytics","token","preloadedState","createStore","rootReducer","compose","applyMiddleware","thunk","DepMiddleware","RequestMetadata","NewValueWinners","NewAPIonQinfo","Blocks","Metadata","ChainData","ChainDisputes","DEFAULT_MASTER_CONTRACT","abi","Tellor","TellorLibrary","TellorGetters","TellorGettersLibrary","TellorMaster","Utilities","SubscriptionProvider","allListeners","blockListeners","mutex","Mutex","on","bl","eventTypes","opts","cb","_sub","release","actual","norm","acquire","al","_filterAndNotify","options","finish","emitter","emit","tgtVal","Array","isArray","EventEmitter","rel","Web3Contract","master","caller","tellor","eventHistory","_emitter","getPastEvents","diff","web3","eth","getBlock","method","args","_con$methods","methods","from","gas","_con$methods2","_this3","tx","sendTransaction","encodeABI","sub","unsubscribe","_call","_apiId","hash","_send","getAllDisputeVars","minerIndex","disputeId","supportsDisputer","Web3Wrapper","times","ethProvider","acts","ethereum","web","currentProvider","Web3","enable","accounts","checkInDispute","ChainCreators","net","getNetworkType","getBlockNumber","block","Contract","isInDispute","localStorage","number","_storeBlockTime","gaps","last","start","end","gap","procSchema","EthProcessor","processors","sourceProcessor","proc","_checkExists","processor","index","procs","_initProc","_unloadProc","_this4","startCtx","StartingCtx","_x7","_this5","storageCtx","StorageCtx","SubCtx","process","addStoredItem","_this6","nextProc","exec","_this7","toStore","_ref5","dbItems","dbKeys","storedItems","createBulk","BlockSource","missingGaps","removeListener","subCallback","good","dtStr","status","time","_restoreEvents","clearSubscriptions","subscribe","_pullEvents","followons","g","__recovering","getMissingBlockRanges","_restoreBlocks","startBlock","recovering","_callee5","txnHistory","blockNum","currentBlock","txn","rec","fromBlock","transactions","getTransaction","logEvents","t1","_x8","_x9","ABIParser","eventSigs","fnSigs","txns","_loop","sig","def","rcpt","__recover","input","getTransactionReceipt","receipt","_decode","logEventMap","delegateYield","out","logs","topics","shift","fields","decodeLog","inputs","Plugin","fnContexts","dByHash","finalValuel","MiningSolutionHandler","outData","outOrdered","outNew","handleNonces","changeNonceOrder","prevData","addNewChallenge","outPrev","getMiningOrder","newVal","getMinersByRequestIdAndTimestamp","map","findRequest","_ref6","_ref7","_ref8","updated","idx","indexOf","miningOps","_x10","_ref9","_ref10","_callee6","_context6","_x11","_x12","RequestDataHandler","handleRequestData","handleTip","newChallenge","topOps","tipEvts","tipEvt","InitDisputeHandler","addNewDispute","VoteHandler","addVote","findDispute","getDisputeDetails","voteVal","PLUGINS","RequestHandler","MiningHandler","InitDispute","Enrichment","plugins","f","findIndex","pl","ContractEmit","emitEvents","context","source","ABI","lookupQueryByHash","getRequestIdByQueryHash","lookupDisputeByHash","getDisputeIdByDisputeHash","_doRequestData","_callee8","_context8","requestData","_x15","_x16","_doInitDispute","_callee9","_context9","beginDispute","_x17","_x18","Chain","ethProcs","addToTip","addTip","_callee7","_context7","_x13","_x14","_err","DepManager","_Users_mdcoon_git_tellorscan_packages_dashboard_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","callbacks","addDependency","obj","setTimeout","deps","addDependencies","uuid","retValue","notify"],"mappings":"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","file":"static/js/main.e53967e2.chunk.js","sourcesContent":["import {Creators} from './actions';\nimport Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport _ from 'lodash';\n\nconst init = () => async (dispatch,getState) => {\n  dispatch(Creators.initStart());\n  try {\n    //read last 50 challenge requests and see which one was called the most\n    let r = await Storage.instance.readAll({\n      database: dbNames.NewChallenge,\n      limit: 50,\n      sort: [\n        {\n          field: \"blockNumber\",\n          order: \"desc\"\n        }\n      ]\n    });\n    let counts = r.reduce((o, h)=>{\n      if(!h || !h.id) {\n        return o;\n      }\n      let obj = o[h.id] || {};\n      let cnt = obj.count || 0;\n      o[h.id] = {\n        ...h,\n        count: cnt+1\n      };\n      return o;\n    },{});\n    let top = _.values(counts);\n    top.sort((a,b)=>{\n      return b.count - a.count;\n    });\n    let topReq = top[0] || {};\n\n    dispatch(Creators.initSuccess({\n      id: topReq.id,\n      count: topReq.count\n    }, counts));\n  } catch (e) {\n    dispatch(Creators.failure(e));\n  }\n}\n\nconst challengeIssued = evt => dispatch => {\n  dispatch(Creators.updateSuccess(evt));\n}\n\nexport default {\n  init,\n  challengeIssued\n}\n","import * as util from 'web3-utils';\n\nconst BASE = util.toBN(\"1000000000\");\nconst TRIBUTE = util.toBN(\"1000000000\").mul(BASE);\nconst REWARDS = [\n          util.toBN(\"1\").mul(TRIBUTE),\n          util.toBN(\"5\").mul(TRIBUTE),\n          util.toBN(\"10\").mul(TRIBUTE),\n          util.toBN(\"5\").mul(TRIBUTE),\n          util.toBN(\"1\").mul(TRIBUTE)\n        ];\n\nexport const humanizeTellor = (amt) => {\n  let res = util.toBN(amt).div(TRIBUTE);\n  let num = res.toString()-0;\n  return num.toFixed(2);\n}\n\nexport const updateReward = (ex, rank) => {\n  let rew = REWARDS[rank];\n  return util.toBN(ex).add(rew);\n}\n","import {Creators} from './actions';\nimport Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport * as util from 'web3-utils';\nimport {updateReward} from 'Utils/token';\n\nconst findFinalValue = (n) => async (dispatch, getState) => {\n  let r = await Storage.instance.find({\n    database: dbNames.NewValue,\n    selector: {\n      challengeHash: n.challengeHash\n    },\n    limit: 1\n  });\n  return r[0];\n}\n\nconst init = () => async (dispatch, getState) => {\n  dispatch(Creators.initStart());\n  let r = await Storage.instance.readAll({\n    database: dbNames.NonceSubmitted,\n    limit: 50,\n    filterFn: (v, k, itNum) => {\n      return v.winningOrder >= 0\n    },\n    sort: [\n      {\n        field: \"blockNumber\",\n        order: 'desc'\n      }\n    ]\n  });\n\n  let tops = {};\n  for(let i=0;i<r.length;++i) {\n    let n = r[i];\n    let val = await dispatch(findFinalValue(n));\n    if(val) {\n      let m = tops[n.miner] || {\n        balance: util.toBN(\"0\"),\n        address: n.miner,\n        lastMineTime: val.mineTime\n      }\n      m.balance = updateReward(m.balance, n.winningOrder);\n      if(val.mineTime > m.lastMineTime) {\n        m.lastMineTime = val.mineTime;\n      }\n      tops[n.miner] = m;\n    }\n  }\n  dispatch(Creators.initSuccess(tops));\n}\n\nconst update = (ch) => (dispatch) => {\n  dispatch(Creators.update(ch));\n}\n\nexport default {\n  init,\n  update\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  selectForTip: ['request']\n},{prefix: \"tips.\"});\nexport {\n  Types,\n  Creators\n}\n","export default class BaseEvent {\n  constructor(props) {\n    [\n      'normalize',\n      'toJSON',\n      '_asNum'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n    this.sender = props.sender;\n    this.fnContext = props.fnContext;\n    this.event = props.event;\n    this.name = props.event;\n    this.signature = props.signature;\n    this.address = props.address;\n    this.transactionHash = props.transactionHash;\n    this.blockNumber = this._asNum(props.blockNumber);\n    this.transactionIndex = this._asNum(props.transactionIndex);\n    this.logIndex = this._asNum(props.logIndex);\n    this.timestamp = this._asNum(props.timestamp);\n  }\n\n  _asNum(v) {\n    if(!v) {\n      return v;\n    }\n\n    if(v.toString) {\n      return v.toString()-0;\n    }\n    return v;\n  }\n\n  normalize() {\n    return {\n      fnContext: this.fnContext,\n      name: this.name || this.event,\n      signature: this.signature,\n      address: this.address,\n      transactionHash: this.transactionHash,\n      blockNumber: this.blockNumber,\n      timestamp: this.timestamp\n    }\n  }\n\n  toJSON() {\n    return {\n      sender: this.sender,\n      fnContext: this.fnContext,\n      name: this.name || this.event,\n      signature: this.signature,\n      address: this.address,\n      transactionHash: this.transactionHash,\n      blockNumber: this.blockNumber,\n      timestamp: this.timestamp\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\nimport {generateQueryHash} from 'Chain/utils';\n\nexport default class DataRequested extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize',\n      'toJSON',\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n\n    const {sender, _query, _querySymbol, _granularity,  _requestId,  _totalTips} = props.returnValues;\n    this.sender = sender;\n    this._query = _query;\n    this.queryString = _query;\n\n    this._granularity = this._asNum(_granularity);\n    this.multiplier = this._granularity;\n\n    this._requestId = this._asNum(_requestId);\n    this.id = this._requestId;\n\n    this._value = this._asNum(_totalTips);\n    this.value = this._value;\n\n    this._symbol = _querySymbol?_querySymbol.toUpperCase():undefined;\n    this.symbol = this._symbol;\n\n    this._queryHash = generateQueryHash(_query, this._granularity);\n    this.queryHash = this._queryHash;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n    let payload = {\n      ...parent,\n      id: this._requestId,\n      tip: this._value,\n      symbol: this._symbol,\n      multiplier: this._granularity,\n      queryString: this._query,\n      sender: this.sender,\n      value: this._value,\n      queryHash: this._queryHash,\n      //originalEvent: this,\n      normalize: () => payload\n    }\n    return payload;\n  }\n\n  toJSON() {\n\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._requestId,\n      tip: this._value,\n      symbol: this._symbol,\n      multiplier: this._granularity,\n      queryString: this._query,\n      queryHash: this._queryHash,\n      sender: this.sender,\n      value: this._value\n    };\n  }\n}\n","import BaseEvent from './BaseEvent';\n\nexport default class NonceSubmitted extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n    const {_miner, _nonce, _requestId, _value, _currentChallenge} = props.returnValues;\n    this._miner = _miner.toLowerCase();\n    this.miner = this._miner;\n\n    this._nonce = _nonce;\n    this.nonce = this._nonce;\n\n    this._requestId = this._asNum(_requestId);\n    this.id = this._requestId;\n\n    this._value = this._asNum(_value);\n    this.value = this._value;\n\n    this._currentChallenge = _currentChallenge;\n    this.challengeHash = this._currentChallenge;\n\n    this.winningOrder = -1;\n  }\n\n  normalize(props) {\n    let parent = super.normalize();\n\n    let payload = {\n      ...parent,\n      id: this._requestId,\n      type: \"Mined\",\n      miner: this._miner,\n      nonce: this._nonce,\n      value: this._value,\n      challengeHash: this._currentChallenge,\n      winningOrder: this.winningOrder,\n      //originalEvent: this,\n      normalize: () => payload\n    }\n    return payload;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      type: \"Mined\",\n      id: this._requestId,\n      miner: this._miner,\n      nonce: this._nonce,\n      value: this._value,\n      challengeHash: this._currentChallenge,\n      winningOrder: this.winningOrder\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\n\nexport default class TipAdded extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n\n    const {_sender, _requestId, _tip, _totalTips} = props.returnValues;\n    this._sender = _sender;\n    this.sender = this._sender;\n\n    this._requestId = this._asNum(_requestId);\n    this.id = this._requestId;\n\n    this._tip = this._asNum(_tip);\n    this.tip = this._tip;\n\n    this._totalTips = this._asNum(_totalTips);\n    this.totalTips = this._totalTips;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n\n    let payload = {\n      ...parent,\n      id: this._requestId,\n      tip: this._tip,\n      totalTips: this._totalTips,\n      sender: this._sender,\n      normalize: () => payload\n    }\n    return payload;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._requestId,\n      tip: this._tip,\n      totalTips: this._totalTips,\n      sender: this._sender,\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\n\nexport default class NewChallenge extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n\n    const {_currentChallenge, _currentRequestId, _difficulty, _multiplier,  _query,  _totalTips} = props.returnValues;\n    this._currentChallenge = _currentChallenge;\n    this.challengeHash = this._currentChallenge;\n\n    this._multiplier = this._asNum(_multiplier);\n    this.multiplier = this._multiplier;\n\n    this._currentRequestId = this._asNum(_currentRequestId);\n    this.id = this._currentRequestId;\n\n    this._difficulty = this._asNum(_difficulty);\n    this.difficulty = this._difficulty;\n\n    this._query = _query;\n    this.queryString = this._query;\n\n    this._value = this._asNum(_totalTips);\n    this.tip = this._value;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n    let normalized = {\n      ...parent,\n      id: this._currentRequestId,\n      queryString: this._query,\n      difficulty: this._difficulty,\n      challengeHash: this._currentChallenge,\n      multiplier: this._multiplier,\n      tip: this._value,\n      normalize: () => normalized\n    }\n\n    return normalized;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._currentRequestId,\n      queryString: this._query,\n      difficulty: this._difficulty,\n      challengeHash: this._currentChallenge,\n      multiplier: this._multiplier,\n      tip: this._value\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\n\nexport default class NewValue extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n    const {_requestId, _time, _value, _currentChallenge} = props.returnValues;\n    this._requestId = this._asNum(_requestId);\n    this.id = this._requestId;\n\n    this._time = this._asNum(_time);\n    this.mineTime = this._time;\n\n    this._value = this._asNum(_value);\n    this.value = this._value;\n\n    this._challengeHash = _currentChallenge;\n    this.challengeHash = this._challengeHash;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n    let payload = {\n      ...parent,\n      id: this._requestId,\n      type: \"New Value\",\n      mineTime: this._time,\n      value: this._value,\n      challengeHash: this._challengeHash,\n      normalize: () => payload\n    }\n    return payload;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._requestId,\n      mineTime: this._time,\n      type: \"New value\",\n      challengeHash: this._challengeHash,\n      value: this._value,\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\nimport {generateDisputeHash} from 'Chain/utils';\n\nexport default class NewDispute extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n    const {_disputeId, _requestId, _timestamp, _miner} = props.returnValues;\n    this._timestamp = this._asNum(_timestamp);\n    this.mineTime = this._timestamp;\n\n    this._requestId = this._asNum(_requestId);\n    this.requestId = this._requestId;\n\n    this._disputeId = this._asNum(_disputeId);\n    this.id = this._disputeId;\n\n    this._miner = _miner.toLowerCase();\n    this.miner = this._miner;\n\n    this._disputeHash = generateDisputeHash({requestId: this._requestId, miner: this._miner, timestamp: this._timestamp});\n    this.disputeHash = this._disputeHash;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n    let normalized = {\n      ...parent,\n      id: this._disputeId,\n      requestId: this._requestId,\n      mineTime: this._timestamp,\n      miner: this._miner,\n      disputeHash: this._disputeHash,\n      normalize: () => normalized\n    }\n\n    return normalized;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._disputeId,\n      requestId: this._requestId,\n      mineTime: this._timestamp,\n      miner: this._miner,\n      disputeHash: this._disputeHash\n    }\n  }\n}\n","import BaseEvent from './BaseEvent';\n\nexport default class Voted extends BaseEvent {\n  constructor(props) {\n    super(props);\n    [\n      'normalize'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n\n    const {_disputeID, _position, _voter} = props.returnValues;\n    this._disputeID = this._asNum(_disputeID);\n    this.id = this._disputeID;\n\n    this._position = _position;\n    this.agreesWithDisputer = this._position;\n    this.position = this._position;\n\n    this._voter = _voter.toLowerCase();\n    this.voter = this._voter;\n  }\n\n  normalize() {\n    let parent = super.normalize();\n    let normalized = {\n      ...parent,\n      id: this._disputeID,\n      agreesWithDisputer: this._position,\n      voter: this._voter,\n      position: this.position,\n      normalize: () => normalized\n    }\n\n    return normalized;\n  }\n\n  toJSON() {\n    let parent = super.toJSON();\n    return {\n      ...parent,\n      id: this._disputeID,\n      agreesWithDisputer: this._position,\n      position: this.position,\n      voter: this._voter\n    }\n  }\n}\n","import DataRequested from './DataRequested';\nimport NonceSubmitted from './NonceSubmitted';\nimport TipAdded from './TipAdded';\nimport NewChallenge from './NewChallenge';\nimport NewValue from './NewValue';\nimport NewDispute from './NewDispute';\nimport Voted from './Voted';\n\nexport {\n  DataRequested,\n  NewChallenge,\n  NonceSubmitted,\n  NewValue,\n  TipAdded,\n  NewDispute,\n  Voted\n}\n","import {Creators} from './actions';\n\nconst show = (id) => dispatch => {\n  dispatch(Creators.show(id));\n}\n\nconst hide = (id) => dispatch => {\n  dispatch(Creators.hide(id));\n}\n\nconst collect = (id, data) => dispatch => {\n  dispatch(Creators.collectData(id, data));\n}\n\nconst clear = (id, data) => dispatch => {\n  dispatch(Creators.clearData(id, data));\n}\n\nconst isLoading = (id, loading) => dispatch => {\n  dispatch(Creators.isLoading(id, loading));\n}\n\nconst failure = (id, err) => dispatch => {\n  dispatch(Creators.failure(id, err));\n}\n\nexport default {\n  show,\n  hide,\n  collect,\n  clear,\n  isLoading,\n  failure\n}\n","import * as yup from 'yup';\n\n/**\n * An in-memory implementation of storage. Mainly used for\n * testing\n*/\nconst dbBaseSchema = yup.string().required(\"Missing database parameter\");\n\nexport const createSchema = yup.object().shape({\n  //database where to store the data\n  database: dbBaseSchema,\n\n  //key to use for primary id\n  key: yup.string().required(\"Need a key to store data\"),\n\n  //the data to store\n  data: yup.object().required(\"Missing data object to store\")\n});\n\nexport const createBulkSchema = yup.object().shape({\n  database: dbBaseSchema,\n\n  items: yup.array().of(yup.object().shape({\n    key: yup.string().required(\"Need a key to store data\"),\n    value: yup.object().required(\"Missing value object to store\")\n  }))\n});\n\nexport const sortSchema = yup.object().shape({\n  field: yup.string().required(\"Missing sort field name\"),\n  order: yup.string().required(\"Missing order\")\n});\n\nexport const readSchema = yup.object().shape({\n\n  database: dbBaseSchema,\n\n  //or directly with key\n  key: yup.string().required(\"Missing key to read by id\"),\n\n  limit: yup.number(),\n\n  sort: yup.array().of(sortSchema)\n});\n\nexport const findSchema = yup.object().shape({\n  database: dbBaseSchema,\n\n  selector: yup.object().required(\"Must have a selector for finding by field\"),\n\n  limit: yup.number(),\n\n  sort: yup.array().of(sortSchema).nullable()\n});\n\nexport const removeSchema = yup.object().shape({\n  database: dbBaseSchema,\n  key: yup.string().required(\"Need key to remove data from database\")\n});\n\nexport const updateSchema = yup.object().shape({\n  database: dbBaseSchema,\n  key: yup.string().required(\"Missing database key\"),\n  data: yup.object().required(\"Missing data to update\")\n});\n\nexport const readAllSchema = yup.object().shape({\n  database: dbBaseSchema,\n  limit: yup.number(),\n  sort: yup.array().of(sortSchema)\n});\n\nexport const iterateSchema = yup.object().shape({\n  database: dbBaseSchema\n});\n\nexport const sortData = (ar, def) => {\n  ar.sort((a,b)=>{\n    let fld = def.field;\n    let o = def.order.toUpperCase();\n    let isAsc = o === 'ASC';\n    let av = a[fld];\n    let bv = b[fld];\n    if(av > bv) {\n      return isAsc?1:-1;\n    }\n    if(av < bv) {\n      return isAsc?-1:1;\n    }\n    return 0;\n  })\n}\n\nexport default class BaseDB {\n\n  constructor(props) {\n    this.dbs  = {};\n    this.next = props.next;\n    if(!this.next) {\n      this.next = {}\n    };\n    this.dbPrefix = props.dbPrefix || \"\";\n\n    [\n      'init',\n      '_getDB'\n    ].forEach(fn=>{\n      this[fn]=this[fn].bind(this);\n    });\n  }\n\n  async init(props) {\n    console.log(\"Initializing with props\", props);\n    let pfx = props.dbPrefix;\n    if(pfx) {\n      pfx += \"_\";\n    }\n    this.dbPrefix = pfx || \"\";\n  }\n\n  async _getDB(props, factory) {\n    let name = this.dbPrefix + props.database;\n    console.log(\"Getting DB\", name);\n\n    let db = this.dbs[name];\n\n    if(!db) {\n      db = await factory({name});\n      this.dbs[name] = db;\n    }\n    return db;\n  }\n}\n","import localforage from 'localforage';\nimport {extendPrototype} from 'localforage-setitems';\nimport BaseDB, {\n  createSchema,\n  createBulkSchema,\n  readSchema,\n  readAllSchema,\n  findSchema,\n  updateSchema,\n  removeSchema,\n  iterateSchema\n} from './BaseDB';\nimport _ from 'lodash';\nimport * as dbNames from './DBNames';\n\nextendPrototype(localforage);\n\nconst dbFactory = async props => {\n  var db = await localforage.createInstance({\n    name: props.name\n  });\n  return db;\n}\n\nconst _buildSortFn = props => {\n  if(!props.sort) {\n    props.sort = [\n      {\n        field: \"blockNumber\",\n        order: \"desc\"\n      }\n    ];\n  }\n\n  let sorter = (set, fld, isAsc) => {\n    set.sort((a,b)=>{\n      let av = a[fld];\n      let bv = b[fld];\n      if(av > bv) {\n        return isAsc ? 1 : -1;\n      }\n      if(av < bv) {\n        return isAsc ? -1 : 1;\n      }\n      return 0;\n    });\n  };\n  return set => {\n    props.sort.forEach(s=>{\n      sorter(set, s.field, s.order.toUpperCase() === 'ASC')\n    });\n  }\n}\n\nlet inst = null;\nexport default class LocalForage extends BaseDB {\n  static get instance() {\n    if(!inst) {\n      throw new Error(\"Did not properly construct storage instance\");\n    }\n    return inst;\n  }\n  \n  constructor(props) {\n    super(props);\n    this.querySizeLimit = props.querySizeLimit || 50;\n\n    [\n      'create',\n      'createBulk',\n      'read',\n      'readAll',\n      'find',\n      'update',\n      'remove',\n      'clearAll',\n      'iterate'\n    ].forEach(fn=>{\n      this[fn]=this[fn].bind(this)\n    });\n    inst = this;\n  }\n\n  async clearAll() {\n    _.keys(dbNames).forEach(async k=>{\n      if(k !== dbNames.ChainData) {\n        let pfx = this.dbPrefix || \"\";\n        let nm = pfx + k;\n        let db = this.dbs[nm];\n        if(!db) {\n          return;\n        }\n        console.log(\"Dropping DB\", nm);\n        db.dropInstance();\n        this.dbs[nm] = undefined;\n      }\n    })\n  }\n\n  async create(props) {\n    createSchema.validateSync(props);\n    let db = await this._getDB(props, dbFactory);\n    try {\n      await db.setItem(props.key, props.data);\n    } catch (e) {\n      console.log(\"Problem storing to\", props.database, e);\n    }\n\n  }\n\n  async createBulk(props) {\n    createBulkSchema.validateSync(props);\n    let db = await this._getDB(props, dbFactory);\n    try {\n      await db.setItems(props.items);\n    } catch (e) {\n      console.log(\"Problem storing items\", props.database, e);\n    }\n  }\n\n  async read(props) {\n    readSchema.validateSync(props);\n    let db = await this._getDB(props, dbFactory);\n    let r = await db.getItem(props.key);\n    return r ? [r] : [];\n  }\n\n  async readAll(props) {\n    readAllSchema.validateSync(props);\n    let db = await this._getDB(props, dbFactory);\n\n    let set = [];\n    let sortFn = _buildSortFn(props);\n    let limit = props.limit || this.querySizeLimit;\n    let filterFn = props.filterFn;\n    await db.iterate((v, k, itNum)=>{\n      if(itNum > limit) {\n        return set;\n      }\n      if(filterFn) {\n        if(filterFn(v, k, itNum)) {\n          set.push(v);\n        }\n      } else {\n        set.push(v);\n      }\n    });\n    if(sortFn) {\n      sortFn(set);\n    }\n    return set;\n  }\n\n  async iterate(props) {\n    iterateSchema.validateSync(props);\n    if(typeof props.callback !== 'function') {\n      throw new Error(\"Missing callback function\");\n    }\n    let db = await this._getDB(props, dbFactory);\n    await db.iterate(props.callback);\n  }\n\n  async find(props) {\n    findSchema.validateSync(props);\n    let db = await this._getDB(props, dbFactory);\n    let set = [];\n    let sortFn = _buildSortFn(props);\n    let limit = props.limit || this.querySizeLimit;\n    let selKeys = _.keys(props.selector);\n    let offset = props.offset || 0;\n    let includeTotal = props.includeTotal;\n    let skipping = offset > 0;\n    let endLength = offset + limit;\n\n    let total = 0;\n    await db.iterate((dbVal, dbKey, itNum)=>{\n      let allMatch = true;\n      //filter based on selectors first. This way we make\n      //sure paging and sorting work with the same dataset\n      //each time. This is terribly slow but localforage/indexedDB\n      //doesn't offer skipping records. An optimization might be\n      //to keep our own index of record counts so that at a minimum\n      //we're not running through entire set each time. Skipping would\n      //still require walk from beginning. I don't know what happens if\n      //records are inserted during paging operation...would we miss an\n      //item if it's key were iterated earlier than the page we skipped?\n      //This needs more thought.\n      for(let i=0;i<selKeys.length;++i) {\n        let p = selKeys[i];\n        let tgt = props.selector[p];\n        let v = dbVal[p];\n        if(!isNaN(v) && !isNaN(tgt)) {\n          v -= 0;\n          tgt -= 0;\n        }\n        if(v !== tgt) {\n          allMatch = false;\n          break;\n        }\n      }\n      if(allMatch) {\n        ++total;\n        if(!skipping && set.length < endLength) {\n          set.push(dbVal);\n        } else if(!skipping && set.length >= endLength && !includeTotal) {\n          return set;\n        }\n      }\n\n      skipping = total < offset || set.length > (offset+limit);\n    });\n\n    if(sortFn) {\n      sortFn(set);\n    }\n    if(includeTotal) {\n      return {\n        total,\n        data: set\n      }\n    }\n    return set;\n  }\n\n  async update(props) {\n    updateSchema.validateSync(props);\n  }\n\n  async remove(props) {\n    removeSchema.validateSync(props);\n  }\n}\n","/**\n  * Just manages the instance we're going to use\n  */\nimport InMemory from './InMemory';\nimport LF from './LocalForage';\n\n/*\nlet lf = new LF({\n  querySizeLimit: 50\n});\n\nnew InMemory({\n  maxHistory: 50,\n  next: lf\n});\n*/\nlet lf = new LF({\n  querySizeLimit: 50\n});\nexport default LF;\n","import {Creators} from './actions';\nimport _ from 'lodash';\nimport {default as chainOps} from 'Redux/chain/operations';\nimport {generateDisputeHash} from 'Chain/utils';\nimport {toastr} from 'react-redux-toastr';\n\nconst DISPUTABLE_PERIOD = 86400; //1 day in seconds\nconst VOTABLE_PERIOD = 7 * 86400; //7 days to vote\nconst init = () => async (dispatch,getState) => {\n  dispatch(Creators.initStart());\n  //load disputes\n  dispatch(Creators.initSuccess({}));\n}\n\nconst selectForDispute = (ch, nonce) => dispatch => {\n  dispatch(Creators.selectForDispute(ch, nonce));\n}\n\nconst clearDisputeSelection = () => dispatch => {\n  dispatch(Creators.selectForDispute(null, null));\n}\n\nconst toggleDisputeSelection = (ch) => (dispatch,getState) => {\n  let state = getState();\n  let selCh = state.disputes.selectedChallenge || {};\n  if(selCh.challengeHash === ch.challengeHash) {\n    dispatch(clearDisputeSelection());\n  } else {\n    let selNonce = state.disputes.selectedNonce;\n    if(!selNonce) {\n      selNonce = _.values(ch.nonces).filter(n=>n.winningOrder===0)[0];\n    }\n    dispatch(selectForDispute(ch, selNonce));\n  }\n}\n\nconst findByDisputeHash = (hash) => (dispatch) => {\n  //return dispatch(Dispute.ops.findByDisputeHash(hash));\n}\n\nconst initDispute = props => async (dispatch,getState) => {\n  let hash = generateDisputeHash({miner: props.miner.address, requestId: props.requestId, timestamp: props.timestamp});\n  let ex = await dispatch(findByDisputeHash(hash));\n  if(ex) {\n    toastr.error(\"Exists\", \"That dispute already exists. Updated UI from on-chain information\");\n    return;\n  }\n  return dispatch(chainOps.initDispute(props));\n}\n\nconst voteUp = dispute =>  (dispatch, getState) => {\n  return dispatch(_vote(dispute, true));\n}\n\nconst voteDown = dispute => (dispatch, getState) => {\n  return dispatch(_vote(dispute, false));\n}\n\nconst _vote = (dispute,pos) => async (dispatch, getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  let addr = state.chain.chain.ethereumAccount;\n  if(addr) {\n    let voted = await con.didVote(dispute.id, addr);\n    if(voted) {\n      toastr.error(\"Error\", \"Selected account already voted for this dispute\");\n    } else {\n      await con.vote(dispute.id, pos);\n      toastr.info(\"Vote Cast\", \"Your vote has been cast\");\n    }\n  }\n}\n\nconst timeRemaining = (challenge) => {\n  let now = Math.floor(Date.now()/1000);\n  let end = challenge.finalValue?challenge.finalValue.mineTime:0;\n  return DISPUTABLE_PERIOD - (now - end);\n}\n\nconst voteTimeRemaining = (dispute) => {\n  let now = Math.floor(Date.now()/1000);\n  let end = dispute.timestamp || 0;\n  return VOTABLE_PERIOD - (now - end);\n}\n\nconst isDisputable = (challenge) => {\n  if(!challenge.finalValue) {\n      return true;\n  }\n  let diff = timeRemaining(challenge);\n  return diff > 0;\n}\n\nexport default {\n  init,\n  initDispute,\n  //findByDisputeHash,\n  voteUp,\n  voteDown,\n  selectForDispute,\n  clearDisputeSelection,\n  toggleDisputeSelection,\n  isDisputable,\n  timeRemaining,\n  voteTimeRemaining\n\n}\n","import Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport _ from 'lodash';\n\nconst normalizeNonce = n => {\n  let toJS = n.toJSON;\n  if(!toJS) {\n    toJS = () => n\n  }\n  return {\n    ...n,\n    winningOrder: n.winningOrder<0?-1:n.winningOrder,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (chByHash) => async (dispatch, getState) => {\n\n  //we need load specific nonces for given hashes\n  let challenges = _.values(chByHash);\n  let restored = [];\n\n  for(let i=0;i<challenges.length;++i) {\n    let ch = challenges[i];\n    let r = await Storage.instance.find({\n      database: dbNames.NonceSubmitted,\n      selector: {\n        challengeHash: ch.challengeHash\n      },\n      limit: 5\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      restored.push(normalizeNonce(r[j]));\n    }\n  }\n\n  return restored.reduce((o,n)=>{\n    let byMiner = o[n.challengeHash] || {};\n    byMiner[n.miner] = n;\n    o[n.challengeHash] = byMiner;\n    return o;\n  },{});\n}\n\nexport default {\n  loadAll\n}\n","import Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport _ from 'lodash';\n\nconst normalizeValue = (val) => {\n  let toJS = val.toJSON;\n  if(!toJS) {\n    toJS = () => val\n  }\n  return {\n    ...val,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (chByHash) => async (dispatch, getState) => {\n\n  //we need load specific nonces for given hashes\n  let challenges = _.values(chByHash);\n  let restored = [];\n\n  for(let i=0;i<challenges.length;++i) {\n    let ch = challenges[i];\n    let r = await Storage.instance.find({\n      database: dbNames.NewValue,\n      selector: {\n        challengeHash: ch.challengeHash\n      },\n      limit: 1\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      restored.push(normalizeValue(r[j]));\n    }\n  }\n\n  return restored.reduce((o,v)=>{\n    o[v.challengeHash] = v;\n    return o;\n  },{});\n}\n\nexport default {\n  loadAll\n}\n","import * as dbNames from 'Storage/DBNames';\nimport Storage from 'Storage';\nimport _ from 'lodash';\nimport {default as nonceOps} from './nonceLoader';\nimport {default as valOps} from './newValueLoader';\n\nconst normalizeChallenge = (req,ch) => {\n  let miners = ch.minerOrder || [];\n  let toJS = ch.toJSON;\n  if(!toJS) {\n    toJS = () => req\n  };\n  return {\n    ...ch,\n    symbol: req.symbol,\n    nonces: {\n      ...ch.nonces\n    },\n    finalValue: ch.finalValue?{\n      ...ch.finalValue\n    }:undefined,\n    minerOrder: [...miners],\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (reqMap) => async (dispatch, getState) => {\n  //have to read specific challenges for every request in the map\n  let reqs = _.values(reqMap);\n  let restored = [];\n\n  for(let i=0;i<reqs.length;++i) {\n    let req = reqs[i];\n\n    let r = await Storage.instance.readAll({\n      database: dbNames.NewChallenge,\n      selector: {\n        id: req.id\n      },\n      limit: 50\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      let ch = normalizeChallenge(reqMap[r[j].id],r[j]);\n      restored.push(ch);\n    }\n  }\n\n  let byId = {};\n  let byHash = restored.reduce((o,dr)=>{\n    o[dr.challengeHash] = dr;\n    let h = byId[dr.id] || {};\n    h[dr.challengeHash] = dr;\n    byId[dr.id] = h;\n\n    return o;\n  },{});\n\n  let noncesByHash = await dispatch(nonceOps.loadAll(byHash));\n  let valuesByHash = await dispatch(valOps.loadAll(byHash));\n\n  _.keys(noncesByHash).forEach(h=>{\n    let byMiner = noncesByHash[h];\n    let ch = byHash[h];\n    let v = valuesByHash[h];\n    ch = {\n      ...ch,\n      nonces: byMiner,\n      finalValue: v\n    }\n    let byCHash = byId[ch.id];\n    byId[ch.id] = {\n      ...byCHash,\n      [ch.challengeHash]: ch\n    }\n  });\n\n  return byId;\n}\n\nexport default {\n  loadAll\n}\n","import * as dbNames from 'Storage/DBNames';\nimport Storage from 'Storage';\nimport _ from 'lodash';\n\nconst normalizeTip = (req,tip) => {\n  let toJS = tip.toJSON;\n  if(!toJS) {\n    toJS = () => req\n  };\n  return {\n    ...tip,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (reqMap) => async (dispatch, getState) => {\n  //have to read specific challenges for every request in the map\n  let reqs = _.values(reqMap);\n  let restored = [];\n\n  for(let i=0;i<reqs.length;++i) {\n    let req = reqs[i];\n\n    let r = await Storage.instance.readAll({\n      database: dbNames.TipAdded,\n      selector: {\n        id: req.id\n      },\n      sort: [\n        {\n          field: \"blockNumber\",\n          order: \"DESC\"\n        }\n      ],\n      limit: 10\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      let t = normalizeTip(reqMap[r[j].id],r[j]);\n      restored.push(t);\n    }\n  }\n\n  let byId = restored.reduce((o,dr)=>{\n    let a = o[dr.id] || [];\n    a.push(dr);\n    o[dr.id] = a;\n    return o;\n  },{});\n\n  return byId;\n}\n\nexport default {\n  loadAll\n}\n","import * as dbNames from 'Storage/DBNames';\nimport Storage from 'Storage';\nimport _ from 'lodash';\n\nconst normalizeVote = (vote) => {\n  let toJS = vote.toJSON;\n  if(!toJS) {\n    toJS = () => vote\n  };\n  return {\n    ...vote,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (dispMap) => async (dispatch, getState) => {\n  //have to read specific challenges for every request in the map\n  let disputes = _.values(dispMap);\n  let restored = [];\n\n  for(let i=0;i<disputes.length;++i) {\n    let d = disputes[i];\n\n    let r = await Storage.instance.readAll({\n      database: dbNames.Voted,\n      selector: {\n        id: d.id\n      },\n      sort: [\n        {\n          field: \"blockNumber\",\n          order: \"DESC\"\n        }\n      ],\n      limit: 10\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      let v = normalizeVote(r[j]);\n      restored.push(v);\n    }\n  }\n\n  let byId = restored.reduce((o,v)=>{\n    let a = o[v.id] || [];\n    a.push(v);\n    o[v.id] = a;\n    return o;\n  },{});\n\n  return byId;\n}\n\nexport default {\n  loadAll\n}\n","import * as dbNames from 'Storage/DBNames';\nimport Storage from 'Storage';\nimport _ from 'lodash';\nimport {default as voteOps} from './voteLoader';\nimport {findDisputedNonce} from 'Chain/utils';\n\n\n\nconst normalizeDispute = (req,d) => {\n  let toJS = d.toJSON;\n  if(!toJS) {\n    toJS = () => req\n  };\n  return {\n    ...d,\n    value: d.value || 0,\n    voteCount: d.voteCount || 0,\n    finalTally: d.finalTally || 0,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = (reqMap) => async (dispatch, getState) => {\n  //have to read specific challenges for every request in the map\n  let reqs = _.values(reqMap);\n  let restored = [];\n  let user = getState().chain.chain.ethereumAccount;\n\n  for(let i=0;i<reqs.length;++i) {\n    let req = reqs[i];\n\n    let r = await Storage.instance.readAll({\n      database: dbNames.NewDispute,\n      selector: {\n        requestId: req.id\n      },\n      limit: 50\n    });\n    if(!r || r.length === 0) {\n      continue;\n    }\n    for(let j=0;j<r.length;++j) {\n      let disp = r[j];\n      let d = normalizeDispute(reqMap[disp.requestId],disp);\n      let req = reqMap[d.requestId];\n      if(!req) {\n        throw new Error(\"Somehow have a request reference without valid request\");\n      }\n      let nonce = await dispatch(findDisputedNonce(req, disp));\n      d.targetNonce = nonce;\n      d.disputer = d.sender;\n\n      restored.push(d);\n    }\n  }\n\n  let byId = {};\n  let dById = {};\n\n  restored.forEach(d=>{\n    let h = byId[d.requestId] || {};\n    let hById = h.byId || {};\n    let hByHash = h.byHash || {};\n    hById[d.id] = d;\n    dById[d.id] = d;\n    hByHash[d.disputeHash] = d;\n    h.byId = hById;\n    h.byHash = hByHash;\n    byId[d.requestId] = h;\n  });\n\n  let votesById = await dispatch(voteOps.loadAll(dById));\n  _.keys(votesById).forEach(id=>{\n    let d = dById[id];\n    let votes = votesById[id];\n    votes.forEach(v=>{\n      let val = v.position?1:-1;\n      let userVoted = user === v.voter;\n      d = {\n        ...d,\n        voteCount: d.voteCount + val,\n        userVoted\n      };\n      let h = byId[d.requestId];\n      h.byId[d.id] = d;\n      h.byHash[d.disputeHash] = d;\n    });\n  });\n\n  return byId;\n}\n\nexport default {\n  loadAll\n}\n","import Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport {Creators} from '../actions';\nimport {default as chOps} from './challengeLoader';\nimport {default as tipOps} from './tipLoader';\nimport {default as dispOps} from './disputeLoader';\nimport _ from 'lodash';\n\nconst normalizeRequest = req => {\n  let toJS = req.toJSON;\n  if(!toJS) {\n    toJS = () => req\n  }\n  return {\n    ...req,\n    challenges: {\n      ...req.challenges\n    },\n    disputes: {\n      ...req.disputes\n    },\n    tips: [],\n    currentTip: req.currentTip || 0,\n    toJSON: toJS\n  }\n}\n\nconst loadAll = () => async (dispatch, getState) => {\n  let r = await Storage.instance.readAll({\n    database: dbNames.DataRequested,\n    limit: 50\n  });\n  if(!r) {\n    r = [];\n  }\n  let byId = r.reduce((o,dr)=>{\n    o[dr.id] = normalizeRequest(dr);\n    return o;\n  },{});\n\n  let chById = await dispatch(chOps.loadAll(byId));\n  let current = null;\n  _.keys(chById).forEach(id=>{\n    let req = byId[id];\n    let challenges = chById[id];\n    let filtered = _.values(challenges).filter(c=>typeof c.finalValue !== 'object');\n    if(filtered.length > 0) {\n      current = filtered[0];\n    }\n    if(req) {\n      byId[id] = {\n        ...req,\n        challenges\n      }\n    }\n  });\n\n  let tipsById = await dispatch(tipOps.loadAll(byId));\n  _.keys(tipsById).forEach(id=>{\n    let req = byId[id];\n    if(req) {\n      byId[id] = {\n        ...req,\n        tips: tipsById[id]\n      }\n    }\n  });\n\n  let disputesById = await dispatch(dispOps.loadAll(byId));\n  _.keys(disputesById).forEach(id=>{\n    let req = byId[id];\n    if(req) {\n      byId[id] = {\n        ...req,\n        disputes: disputesById[id]\n      }\n    }\n  });\n\n  return {current, byId};\n}\n\nconst incomingEvents = (ctx) => async (dispatch, getState) => {\n  let byId = getState().requests.byId;\n  let evt = ctx.eventMap[dbNames.DataRequested];\n  if(!evt) {\n    return;\n  }\n  if(!byId[evt.id]) {\n    dispatch(Creators.addRequest({request: normalizeRequest(evt)}));\n  }\n}\n\nexport default {\n  loadAll,\n  incomingEvents\n}\n","import {Creators} from './actions';\nimport {default as reqOps} from './loaders/requestLoader';\nimport {findRequestById as findById} from 'Chain/utils';\nimport Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport {registerDeps} from 'Redux/DepMiddleware';\nimport {Types as settingTypes} from 'Redux/settings/actions';\n\nconst init = () => async (dispatch, getState) => {\n  dispatch(Creators.initStart());\n  registerDeps([settingTypes.CLEAR_HISTORY_SUCCESS], ()=>{\n    dispatch(Creators.initSuccess({}));\n  });\n  let {current, byId} = await dispatch(reqOps.loadAll());\n\n  dispatch(Creators.initSuccess(byId));\n  dispatch(Creators.updateCurrent({challenge: current}));\n}\n\nconst findRequestById = id => async (dispatch, getState) => {\n  let req = getState().requests.byId[id];\n  if(req) {\n    return;\n  }\n  req = await dispatch(findById(id));\n  if(req) {\n    await Storage.instance.create({\n      database: dbNames.DataRequested,\n      key: \"\"+req.id,\n      data: req.toJSON()\n    });\n  }\n}\n\nexport default {\n  init,\n  findRequestById\n}\n","import {Creators} from './actions';\n\nconst init = () => async (dispatch, getState) => {\n  dispatch(Creators.initStart());\n  let state = getState();\n  let con = state.chain.contract;\n  try {\n    let b = await con.balanceOf(state.chain.chain.ethereumAccount);\n    dispatch(Creators.initSuccess({balance: b?b.toString()-0:0}));\n  } catch (e) {\n    dispatch(Creators.failure(e));\n  }\n}\n\nconst getTokens = () => async (dispatch, getState) => {\n  let con = getState().chain.contract;\n  dispatch(Creators.initStart());\n  con.getTokens().then(async () => {\n    let b = await con.balanceOf(getState().chain.chain.ethereumAccount);\n    dispatch(Creators.initSuccess({balance: b?b.toString()-0:0}));\n  }).catch(e=>{\n      dispatch(Creators.failure(e));\n  });\n}\n\n\nconst getBalance = () => async (dispatch, getState) => {\n  let con = getState().chain.contract;\n  let b = await con.balanceOf(getState().chain.chain.ethereumAccount);\n  dispatch(Creators.update({balance: b?b.toString()-0:0}));\n}\n\nexport default {\n  init,\n  getTokens,\n  getBalance\n}\n","export const empty = s => {\n  if(!s) {\n    return true;\n  }\n  if(typeof s === 'string') {\n    return s.trim().length === 0;\n  }\n  return false;\n}\n\nexport const isURL = s => {\n  if(empty(s)) {\n    return false;\n  }\n  try {\n    //not a thorough test but will make sense most of the time. javascript:alert() works for example\n    new URL(s);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const fixLength = (s, max) => {\n  if(!s) {\n    return s;\n  }\n  if(s.length > max) {\n    let  half = Math.floor(s.length/2);\n    let mid = Math.min(half, 20);\n    let start = s.substring(0, mid);\n    let end = s.substring(s.length-10);\n    return start + \"...\" + end;\n  }\n  return s;\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  initStart: null,\n  initSuccess: ['data'],\n  failure: ['error'],\n  addRequest: ['data'],\n  updateRequest: ['data'],\n  updateCurrent: ['data']\n},{prefix: \"requests.\"});\nexport {\n  Types, Creators\n}\n","import * as ethUtils from 'web3-utils';\nimport eventFactory from 'Chain/LogEvents/EventFactory';\nimport {empty} from 'Utils/strings';\nimport _ from 'lodash';\n\nexport const generateQueryHash = (queryString, multi) => {\n  return ethUtils.soliditySha3({t:'string',v:queryString},{t:'uint256',v:multi})\n}\n\nexport const generateDisputeHash = ({requestId, miner, timestamp}) => {\n  return ethUtils.soliditySha3({t: 'address', v:miner},{t:'uint256',v:requestId},{t:'uint256',v:timestamp});\n}\n\nexport const findRequestById = id => async (dispatch, getState) => {\n  let con = getState().chain.contract;\n  if(!con) {\n    return null;\n  }\n\n  let vars = await con.getRequestVars(id);\n\n  //order is queryString, symbol, queryHash,_granularity, paypool index, tip\n  if(!empty(vars[0])) {\n\n    let payload = {\n      event: \"DataRequested\",\n      returnValues: {\n        sender: \"from_contract\",\n        _query: vars[0],\n        _querySymbol: vars[1],\n        _granularity: vars[3],\n        _requestId: id,\n        _totalTips: vars[5]\n      }\n    };\n    return eventFactory(payload);\n  }\n  return null;\n}\n\nexport const getCurrentTipForRequest = id => async (dispatch, getState) => {\n  let con = getState().chain.contract;\n  if(!con) {\n    return 0;\n  }\n  let vals = await con.getRequestVars(id);\n  if(!vals) {\n    vals = [];\n  }\n\n  let v = vals[5] || 0;\n  if(v.toString) {\n    v = v.toString()-0;\n  }\n  return v;\n}\n\nexport const findDisputedNonce = (req, disp) => async (dispatch, getState) => {\n  //NOTE: this assumes no two challengs were mined in the same minute block. Because\n  //timestamp are normalized to 1min blocks on chain\n  let challenges = _.values(req.challenges);\n  for(let i=0;i<challenges.length;++i) {\n    let ch = challenges[i];\n    if(typeof ch.finalValue !== 'object') {\n      continue;\n    }\n\n    if(ch.finalValue.mineTime !== disp.mineTime) {\n      continue;\n    }\n    let nonces = _.values(ch.nonces);\n    let match = nonces.filter(n=>n.miner === disp.miner)[0];\n    if(match) {\n      return match;\n    }\n  }\n  return null;\n}\n","import {default as modalOps} from 'Redux/modals/operations';\nimport {Creators} from './actions';\n\nconst ID = \"addTip\";\n\nconst init = () => async (dispatch, getState) => {\n\n}\n\nconst showTipModal = (id) => (dispatch, getState) => {\n  let req = getState().requests.byId[id];\n  dispatch(Creators.selectForTip(req));\n  dispatch(modalOps.clear(ID));\n  dispatch(modalOps.show(ID));\n}\n\nexport default {\n  init,\n  showTipModal\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod')\n} else {\n  module.exports = require('./configureStore.dev')\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  show: ['id'],\n  hide: ['id'],\n  collectData: ['id', 'data'],\n  clearData: ['id'],\n  isLoading: ['id','loading'],\n  failure: ['id', 'error']\n}, {prefix: \"modals.\"});\n\nexport {\n  Types,Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types,Creators} = createActions({\n  initStart: null,\n  initSuccess: ['data'],\n  update: ['data'],\n  failure: ['error']\n},{prefix: \"tokens.\"});\nexport {\n  Types,\n  Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {\n  Types,\n  Creators\n} = createActions({\n  initStart: null,\n  initSuccess: ['top', 'counts'],\n  failure: ['error'],\n  updateStart: null,\n  updateSuccess: ['event']\n}, {prefix: \"analytics.topAPI.\"});\n\nexport {\n  Types,\n  Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  loadRequest: null,\n  loadSuccess: ['chain'],\n  failure: ['error']\n},{prefix: \"chain.\"});\nexport {\n  Types,\n  Creators\n}\n","import {createActions} from 'reduxsauce';\nconst { Types,Creators} = createActions({\n  initStart: null,\n  initSuccess: ['data'],\n  failure: ['error'],\n  update: ['data'],\n  selectForDispute: ['challenge', 'nonce']\n},{prefix: \"disputes.\"});\nexport {\n  Types,\n  Creators\n}\n","import * as types from './';\n\nexport default function(data) {\n  \n  let Type = types[data.event];\n  if(Type) {\n    return new Type(data);\n  }\n}\n","import {createActions} from 'reduxsauce';\nconst {Types, Creators} = createActions({\n  initStart: null,\n  initSuccess: ['data'],\n  failure: ['error'],\n  update: ['data']\n},{prefix: \"mining.\"});\nexport {\n  Types,\n  Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  initStart: null,\n  initSuccess: ['data'],\n  failure: ['error'],\n  update: ['event']\n}, {prefix: \"analytics.tipsOverTime.\"});\nexport {\n  Types,\n  Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {Types, Creators} = createActions({\n  clearHistoryStart: null,\n  clearHistorySuccess: null,\n  failure: ['error']\n},{prefix: \"settings.\"});\nexport {\n  Types, Creators\n}\n","import {createActions} from 'reduxsauce';\n\nconst {\n  Types,Creators\n} = createActions({\n  initStart: null,\n  initSuccess: null,\n  failure: ['error']\n}, {prefix: \"init.\"});\n\nexport {\n  Types,\n  Creators\n}\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\n//by default, go to main dashboard\nconst DEF_ROUTE = \"/dashboard/main\";\n\nfunction Loading({ error }) {\n  if (error) {\n    return 'Something went wrong: ' + (error.message?error.message:error);\n  } else {\n    return <h3>Loading...</h3>;\n  }\n}\n\nconst Main = Loadable({\n  loader: () => import('Views/dashboard'),\n  loading: Loading\n});\n\nclass App extends Component {\n  render() {\n    const { location,match } = this.props;\n    if(location.pathname === '/dashboard') {\n      //redirect to main dashboard if nothing specified in url\n      return (<Redirect to={DEF_ROUTE} />)\n    }\n\n    return (\n      <div className=\"app-container container-fluid mr-0 ml-0 pr-0 pl-0\">\n            <Switch>\n              <Route path={`${match.url}/main`} component={Main} />\n              <Redirect to=\"/error\" />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\n//by default, go to main dashboard\nconst DEF_ROUTE = \"/details/main\";\n\nfunction Loading({ error }) {\n  if (error) {\n    return 'Something went wrong: ' + (error.message?error.message:error);\n  } else {\n    return <h3>Loading...</h3>;\n  }\n}\n\nconst Main = Loadable({\n  loader: () => import('Views/details'),\n  loading: Loading\n});\n\nclass App extends Component {\n  render() {\n    const { location,match } = this.props;\n    if(location.pathname === '/details') {\n      //redirect to main dashboard if nothing specified in url\n      return (<Redirect to={DEF_ROUTE} />)\n    }\n    return (\n      <div className=\"app-container container-fluid mr-0 ml-0 pr-0 pl-0\">\n            <Switch>\n              <Route path={`${match.url}/main/:apiID?`} component={Main} />\n              <Redirect to=\"/error\" />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\n//by default, go to main dashboard\nconst DEF_ROUTE = \"/settings/main\";\n\nfunction Loading({ error }) {\n  if (error) {\n    return 'Something went wrong: ' + (error.message?error.message:error);\n  } else {\n    return <h3>Loading...</h3>;\n  }\n}\n\nconst Main = Loadable({\n  loader: () => import('Views/settings'),\n  loading: Loading\n});\n\nclass App extends Component {\n  render() {\n    const { location,match } = this.props;\n    if(location.pathname === '/settings') {\n      //redirect to main dashboard if nothing specified in url\n      return (<Redirect to={DEF_ROUTE} />)\n    }\n    return (\n      <div className=\"app-container container-fluid mr-0 ml-0 pr-0 pl-0\">\n            <Switch>\n              <Route path={`${match.url}/main`} component={Main} />\n              <Redirect to=\"/error\" />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\n//by default, go to main dashboard\nconst DEF_ROUTE = \"/disputes/main\";\n\nfunction Loading({ error }) {\n  if (error) {\n    return 'Something went wrong: ' + (error.message?error.message:error);\n  } else {\n    return <h3>Loading...</h3>;\n  }\n}\n\nconst Main = Loadable({\n  loader: () => import('Views/disputes'),\n  loading: Loading\n});\n\nclass App extends Component {\n  render() {\n    const { location,match } = this.props;\n    if(location.pathname === '/disputes') {\n      //redirect to main dashboard if nothing specified in url\n      return (<Redirect to={DEF_ROUTE} />)\n    }\n    return (\n      <div className=\"app-container container-fluid mr-0 ml-0 pr-0 pl-0\">\n            <Switch>\n              <Route path={`${match.url}/main/:apiID?`} component={Main} />\n              <Redirect to=\"/error\" />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nconst DEF_ROUTE = \"/miner/main\";\n\nfunction Loading({ error }) {\n  if (error) {\n    return 'Something went wrong: ' + (error.message?error.message:error);\n  } else {\n    return <h3>Loading...</h3>;\n  }\n}\n\nconst Main = Loadable({\n  loader: () => import('Views/miner'),\n  loading: Loading\n});\n\nclass App extends Component {\n  render() {\n    const { location,match } = this.props;\n    if(location.pathname === '/miner') {\n      //redirect to main dashboard if nothing specified in url\n      return (<Redirect to={DEF_ROUTE} />)\n    }\n    return (\n      <div className=\"app-container container-fluid mr-0 ml-0 pr-0 pl-0\">\n            <Switch>\n              <Route path={`${match.url}/main`} component={Main} />\n              <Redirect to=\"/error\" />\n            </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, Fragment } from \"react\";\nimport { Row, Col, Card, CardTitle,Button } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Error404 extends Component {\n\n  componentDidMount() {\n    document.body.classList.add(\"background\");\n  }\n  componentWillUnmount() {\n    document.body.classList.remove(\"background\");\n  }\n  render() {\n    return (\n      <Fragment>\n        <div className=\"fixed-background\" />\n        <main>\n          <div className=\"container\">\n            <Row className=\"h-100\">\n              <Col xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n                <Card className=\"auth-card\">\n\n                  <div className=\"form-side\">\n                    <NavLink to={`/`} className=\"white\">\n                      <span className=\"logo-single\" />\n                    </NavLink>\n                    <CardTitle className=\"mb-4\">\n                      Oops, something went wrong, We'll try not to suck as much in the future...\n                    </CardTitle>\n\n                    <p className=\"display-1 font-weight-bold mb-5\">404</p>\n                    <Button\n                      href=\"/landing\"\n                      color=\"primary\"\n                      className=\"btn-shadow\"\n                      size=\"lg\"\n                    >\n                      Start Over\n                    </Button>\n                  </div>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\nexport default Error404;\n","import {Creators} from './actions';\nimport Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\n\nconst init = () => async (dispatch, getState) => {\n  dispatch(Creators.initStart());\n  let state = getState();\n  let con = state.chain.contract;\n  con.events.NewChallenge(null, async (e, evt)=>{\n    if(!evt) {\n      return;\n    }\n\n    if(evt.normalize) {\n      evt = evt.normalize();\n    }\n    if(!evt.id) {\n      return;\n    }\n    dispatch(Creators.update(evt));\n  })\n\n  let history = await Storage.instance.readAll({\n    database: dbNames.NewChallenge,\n    sort: [\n      {\n        field: 'blockNumber',\n        order: 'desc'\n      }\n    ],\n    limit: 144 //1 day, 10-min blocks\n  });\n  history = history.filter(h=>h.id);\n  //now we reverse the history so we get buckets filled in over time\n  //so that the most recent bucket is the last bucket\n  history.reverse();\n\n  /*\n  //lump into 15 buckets for display\n  let buckets = [];\n  let current = null;\n  let itemsPerBucket = 10; //144 items, 10 items each bucket, will be 15 buckets\n  for(let i=0;i<history.length;++i) {\n    let h = history[i];\n    if(!current || current.count === itemsPerBucket) {\n      current = {\n        count: 0,\n        tipTotal: 0,\n        timestamp: h.timestamp\n      };\n      buckets.push(current);\n    }\n    current.count++;\n    current.tipTotal += h.tip;\n  }\n\n  dispatch(Creators.initSuccess(buckets));\n  */\n  dispatch(Creators.initSuccess(history));\n}\n\nexport default {\n  init\n}\n","import {default as top} from './topRequest/operations';\nimport {default as tips} from './tipsOverTime/operations';\nimport {default as mining} from './mining/operations';\n\nconst initTop = (props) => {\n  return props.dispatch(top.init())\n         .then(()=>props);\n}\n\nconst initTips = props => {\n  return props.dispatch(tips.init())\n        .then(()=>props);\n}\n\nconst initMining = props => {\n  return props.dispatch(mining.init())\n      .then(()=>props);\n}\n\nconst init = () => (dispatch,getState) => {\n  let props = {\n    dispatch,\n    getState\n  };\n  return initTop(props)\n          .then(initTips)\n          .then(initMining);\n}\n\nexport default {\n  init\n}\n","import {Creators} from './actions';\nimport {default as chainOps} from 'Redux/chain/operations';\nimport {default as analyticOps} from 'Redux/analytics/operations';\nimport {default as tipOps} from 'Redux/tips/operations';\nimport {default as disputeOps} from 'Redux/disputes/operations';\nimport {default as tokenOps} from 'Redux/token/operations';\nimport {default as reqOps} from 'Redux/requests/operations';\n\nimport {registerDeps} from 'Redux/DepMiddleware';\nimport {Types as settingsTypes} from 'Redux/settings/actions';\nimport Storage from 'Storage';\n\nconst initChain = props => {\n  return props.dispatch(chainOps.init())\n    .then(()=>props);\n}\n\nconst initStorage = async props => {\n  let chain = props.getState().chain.chain;\n\n  console.log(\"Network\", chain.network);\n  await Storage.instance.init({\n    dbPrefix: props.getState().chain.chain.network\n  });\n  return props;\n}\n\nconst initRequests = props => {\n  return props.dispatch(reqOps.init())\n  .then(()=>props);\n}\n\nconst initAnalytics = props => {\n  return props.dispatch(analyticOps.init())\n  .then(()=>props)\n}\n\nconst initTips = props => {\n  return props.dispatch(tipOps.init())\n      .then(()=>props);\n}\n\nconst initDisputes = props => {\n  return props.dispatch(disputeOps.init())\n          .then(()=>props);\n}\n\nconst initToken = props => {\n  return props.dispatch(tokenOps.init())\n      .then(()=>props);\n}\n\nconst unloadChain = props => {\n  return props.dispatch(chainOps.unload())\n      .then(()=>props);\n}\n\nconst startSubscriptions = props => {\n  return props.dispatch(chainOps.startSubscriptions())\n        .then(()=>props);\n}\n\nconst start = () => (dispatch,getState) => {\n  let state = getState();\n  if(state.init.initComplete) {\n    return;\n  }\n  registerDeps([settingsTypes.CLEAR_HISTORY_SUCCESS], async () => {\n    dispatch(_doStart());\n  });\n  return dispatch(_doStart());\n}\n\nconst _doStart = () => (dispatch,getState) => {\n  dispatch(Creators.initStart());\n  let props = {\n    dispatch,\n    getState\n  }\n  return initChain(props)\n        .then(initStorage)\n        .then(initToken)\n        .then(initRequests)\n        .then(initTips)\n        .then(initDisputes)\n        .then(initAnalytics)\n        .then(startSubscriptions)\n        .then(()=>{\n          dispatch(Creators.initSuccess());\n        })\n        .catch(e=>{\n          dispatch(Creators.failure(e));\n        });\n}\n\nconst unload  = () => (dispatch,getState) => {\n  let props = {\n    dispatch, getState\n  };\n  return unloadChain(props);\n}\n\nexport default {\n  start,\n  unload\n}\n","// CoreUI Icons Set\nimport '@coreui/icons/css/coreui-icons.min.css';\n// Import Font Awesome Icons Set\nimport 'font-awesome/css/font-awesome.min.css';\n// Import Simple Line Icons Set\nimport 'simple-line-icons/css/simple-line-icons.css';\n// Import Main styles for this application\nimport 'scss/style.scss'\n\nimport \"react-table/react-table.css\";\n\nimport React, { Fragment, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route,Switch } from \"react-router-dom\";\nimport MainRoute from \"Routes/dashboard\";\nimport Details from 'Routes/details';\nimport Settings from 'Routes/settings';\nimport Disputes from 'Routes/disputes';\nimport Miner from 'Routes/miner';\n\nimport error from \"Routes/error\";\nimport ReduxToastr from 'react-redux-toastr';\nimport {default as initOps} from 'Redux/init/operations';\n\nconst DEF_START = \"/dashboard\"\n\nclass AppStart extends Component {\n  componentWillMount() {\n    if(this.props.needsInit) {\n      this.props.callInit();\n    }\n  }\n\n  render() {\n    const { location, match } = this.props;\n    if (location.pathname === '/') {\n      return (<Redirect to={DEF_START} />);\n    }\n\n    return (\n      <Fragment>\n        <ReduxToastr\n          timeOut={5000}\n          newestOnTop={true}\n          preventDuplicates\n          position=\"top-right\"\n          transitionIn=\"bounceIn\"\n          transitionOut=\"bounceOut\"\n          progressBar/>\n\n            <Switch>\n              <Route path={`${match.url}dashboard`} component={MainRoute} />\n              <Route path={`${match.url}details`} component={Details} />\n              <Route path={`${match.url}settings`} component={Settings} />\n              <Route path={`${match.url}disputes`} component={Disputes} />\n              <Route path={`${match.url}miner`} component={Miner} />\n              <Route path={`/error`} component={error} />\n              <Redirect to=\"/error\" />\n            </Switch>\n        </Fragment>\n    );\n  }\n}\n\nconst s2p = state => {\n  return {\n    needsInit: !state.init.initComplete && !state.init.initStarted\n  }\n}\n\nconst d2p = dispatch => {\n  return {\n    callInit: () => dispatch(initOps.start())\n  }\n}\n\nexport default connect(s2p, d2p)(AppStart);\n","import React from 'react';\nimport {withRouter} from 'react-router-dom';\n\n// see https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/scroll-restoration.md\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\n\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport App from 'Views';\nimport ScrollToTop from 'Components/Scroll/ScrollToTop';\nimport configureStore from 'Store/configureStore';\nimport {default as initOps} from 'Redux/init/operations';\n\nlet store = configureStore();\nwindow.addEventListener(\"beforeunload\", (e)=>{\n  /**\n   * NOTE: this is a best-attempt to cleanup chain subscriptions.\n   * It is NOT guaranteed to run since the browser may kill the\n   * thread before the async function completes. A waste-time\n   * example loop is given but even that wouldn't guarantee execution\n   * since it interrupts the main UI thread that is also calling the\n   * dispatch function in JavaScript's single event loop.\n   */\n  let done = [false];\n  e.preventDefault();\n  store.dispatch(initOps.unload()).then(()=>{\n    e.returnValue=\"finished\";\n    done[0] = true;\n    return \"finished\";\n  }).catch(e=>{\n    done[0] = true;\n    e.returnValue = e.message;\n    return e.message;\n  });\n\n  /**\n   * This doesn't work. For some reason the unsubscribe function in\n   * web3.eth never returns to closeout the final promise. \n\n  let now = Date.now();\n  let max = now + 5000;\n  while(!done[0] && now < max) {\n    now = Date.now();\n  }\n  */\n});\n\nconst MainApp = () => (<Provider store={store}>\n  <Router>\n    <ScrollToTop>\n      <Switch>\n        <Route path=\"/\" component={App}/>\n      </Switch>\n    </ScrollToTop>\n  </Router>\n</Provider>);\n\nexport default MainApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Types} from './actions';\nimport {createReducer} from 'reduxsauce';\n\nconst INIT = {\n  loading: false,\n  initComplete: false,\n  initStarted: false,\n  error: null\n}\n\nconst start = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    initStarted: true,\n    initComplete: false,\n    error: null\n  }\n}\n\nconst success = (state=INIT) => {\n  return {\n    ...state,\n    initComplete: true,\n    loading: false\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    initComplete: true,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: start,\n  [Types.INIT_SUCCESS]: success,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  chain: null,\n  contract: null\n}\n\nconst loadReq = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst loadSuccess = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    chain: action.chain,\n    contract: action.chain.getContract()\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.LOAD_REQUEST]: loadReq,\n  [Types.LOAD_SUCCESS]: loadSuccess,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  visible: {},\n  data: {},\n  loading: {},\n  errors: {}\n}\n\nconst showhide = (state=INIT, action) => {\n  return {\n    ...state,\n    visible: {\n      ...state.visible,\n      [action.id]: action.visible\n    }\n  }\n}\n\nconst show = (state=INIT, action) => {\n  return showhide(state, {\n    ...action,\n    visible: true\n  })\n}\n\nconst hide = (state=INIT, action) => {\n  state = showhide(state, {\n    ...action,\n    visible: false\n  });\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      [action.id]: undefined\n    },\n    loading: {\n      ...state.loading,\n      [action.id]: false\n    }\n  }\n}\n\nconst collect = (state=INIT, action) => {\n  let newData = {\n    ...state.data[action.id],\n    ...action.data\n  };\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      [action.id]: newData\n    }\n  }\n}\n\nconst clear = (state=INIT, action) => {\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      [action.id]: undefined\n    },\n    errors: {\n      ...state.errors,\n      [action.id]: undefined\n    }\n  }\n}\n\nconst load = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: {\n      ...state,\n      [action.id]: action.loading\n    }\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    errors: {\n      ...state.errors,\n      [action.id]: action.error\n    }\n  }\n}\n\nconst HANDLERS = {\n  [Types.SHOW]: show,\n  [Types.HIDE]: hide,\n  [Types.COLLECT_DATA]: collect,\n  [Types.CLEAR_DATA]: clear,\n  [Types.IS_LOADING]: load,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null\n}\n\nconst clearStart = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst clearOk = (state=INIT) => {\n  return {\n    ...state,\n    loading: false\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.CLEAR_HISTORY_START]: clearStart,\n  [Types.CLEAR_HISTORY_SUCCESS]: clearOk,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\nimport _ from 'lodash';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  runningCounts: {},\n  top: null\n}\n\nconst initStart = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst initDone = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    runningCounts: action.counts || {},\n    top: action.top\n  }\n}\n\nconst updateStart = (state=INIT) => {\n  return {\n    ...state,\n    loading: true\n  }\n}\n\nconst update = (state=INIT, action) => {\n  let evt = action.event;\n  let ex = state.runningCounts[evt.id]\n\n  if(!ex) {\n    ex = {\n      ...evt,\n      count: 0\n    }\n  } else {\n    ex = {\n      ...ex\n    }\n  }\n  ex.count++;\n  let events = {\n    ...state.runningCounts,\n    [evt.id]: ex\n  };\n  let all = _.values(events);\n  all.sort((a,b)=>{\n    return b.count - a.count;\n  });\n\n  let top =null;\n  if(all[0]) {\n    top = {\n      id: all[0].id,\n      count: all[0].count\n    }\n  }\n\n  return {\n    ...state,\n    loading: false,\n    runningCounts: events,\n    top\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: initStart,\n  [Types.INIT_SUCCESS]: initDone,\n  [Types.FAILURE]: fail,\n  [Types.UPDATE_START]: updateStart,\n  [Types.UPDATE_SUCCESS]: update\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  data: []\n}\n\nconst initStart = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst initSuccess = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    data: action.data\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst MAX_ITEMS = 25;\nconst update = (state=INIT, action) => {\n  let points = [\n    ...state.data,\n    action.event\n  ];\n  if(points.length > MAX_ITEMS) {\n    points = points.slice(0, MAX_ITEMS);\n  }\n  return {\n    ...state,\n    data: points\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: initStart,\n  [Types.INIT_SUCCESS]: initSuccess,\n  [Types.UPDATE]: update,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\nimport _ from 'lodash';\nimport * as util from 'web3-utils';\nimport {updateReward} from 'Utils/token';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  topMiners: {}\n}\n\nconst start = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst success = (state=INIT, action) => {\n  let data = action.data;\n  return {\n    ...state,\n    loading: false,\n    topMiners: data\n  }\n}\n\nconst update = (state=INIT, action) => {\n  let challenge = action.data;\n  let tops = {\n    ...state.topMiners\n  }\n  if(!challenge.finalValue) {\n    return state;\n  }\n  _.values(challenge.nonces).forEach(n=>{\n    if(n.winningOrder >= 0) {\n      let m = tops[n.miner] || {\n        balance: util.toBN(\"0\"),\n        lastMineTime: 0,\n        address: n.miner\n      };\n      m.balance = updateReward(m.balance, n.winningOrder);\n      m.lastMineTime = challenge.finalValue.mineTime;\n      tops[n.miner] = m;\n    }\n  });\n\n  return {\n    ...state,\n    topMiners: tops\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: start,\n  [Types.INIT_SUCCESS]: success,\n  [Types.FAILURE]: fail,\n  [Types.UPDATE]: update\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {combineReducers} from 'redux';\nimport {default as topRequest} from './topRequest/reducers';\nimport {default as tips} from './tipsOverTime/reducers';\nimport {default as mining} from './mining/reducers';\n\nexport default combineReducers(\n  {\n    topRequest,\n    tips,\n    mining\n  }\n)\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  selectedRequest: null\n}\n\nconst select = (state=INIT, action) => {\n  return {\n    ...state,\n    selectedRequest: action.request\n  }\n}\n\nconst HANDLERS = {\n  [Types.SELECT_FOR_TIP]: select\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null\n}\n\nconst initStart = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst initSuccess = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst select = (state=INIT, action) => {\n  return {\n    ...state,\n    selectedChallenge: action.challenge,\n    selectedNonce: action.nonce\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: initStart,\n  [Types.INIT_SUCCESS]: initSuccess,\n  [Types.FAILURE]: fail,\n  [Types.SELECT_FOR_DISPUTE]: select\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  balance: 0\n}\n\nconst start = (state=INIT) => {\n  return {\n    ...state,\n    loading: true,\n    error: null\n  }\n}\n\nconst success = (state=INIT, action) => {\n  let data = action.data || {};\n  return {\n    ...state,\n    loading: false,\n    balance: data.balance || 0\n  }\n}\n\nconst update = (state=INIT, action) => {\n  let data = action.data;\n  return {\n    ...state,\n    balance: data.balance || 0\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: start,\n  [Types.INIT_SUCCESS]: success,\n  [Types.UPDATE]: update,\n  [Types.FAILURE]: fail\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import {createReducer} from 'reduxsauce';\nimport {Types} from './actions';\n\nconst INIT = {\n  loading: false,\n  error: null,\n  byId: {},\n  current: null\n}\n\nconst initStart = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: true,\n    error: null,\n    byId: {}\n  }\n}\n\nconst initSuccess = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    byId: action.data\n  }\n}\n\nconst fail = (state=INIT, action) => {\n  return {\n    ...state,\n    loading: false,\n    error: action.error\n  }\n}\n\nconst addRequest = (state=INIT, action) => {\n  let data = action.data;\n  let req = data.request;\n\n  let byId = {\n    ...state.byId,\n    [req.id]: req\n  };\n  return {\n    ...state,\n    byId\n  }\n}\n\nconst updateRequest = (state=INIT, action) => {\n  let data = action.data;\n  let req = data.request;\n  let byId = {\n    ...state.byId,\n    [req.id]: req\n  }\n  return {\n    ...state,\n    byId\n  }\n}\n\nconst updateCurrent = (state=INIT, action) => {\n  let data = action.data;\n  let ch = data.challenge;\n\n  return {\n    ...state,\n    current: ch\n  }\n}\n\nconst HANDLERS = {\n  [Types.INIT_START]: initStart,\n  [Types.INIT_SUCCESS]: initSuccess,\n  [Types.FAILURE]: fail,\n  [Types.ADD_REQUEST]: addRequest,\n  [Types.UPDATE_REQUEST]: updateRequest,\n  [Types.UPDATE_CURRENT]: updateCurrent\n}\n\nexport default createReducer(INIT, HANDLERS);\n","import { combineReducers } from 'redux';\nimport {reducer as toastrReducer} from 'react-redux-toastr'\nimport {default as init} from './init/reducers';\nimport {default as chain} from './chain/reducers';\nimport {default as modals} from './modals/reducers';\nimport {default as settings} from './settings/reducers';\nimport {default as analytics} from './analytics/reducers';\nimport {default as tips} from './tips/reducers';\nimport {default as disputes} from './disputes/reducers';\nimport {default as token} from './token/reducers';\nimport {default as requests} from './requests/reducers';\n\n/**\n * Collection of all dashboard state tree reducers\n */\nexport default combineReducers({\n  toastr: toastrReducer,\n  init,\n  chain,\n  modals,\n  settings,\n  analytics,\n  tips,\n  disputes,\n  token,\n  requests\n});\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport rootReducer from 'Redux/reducers'\nimport DepMiddleware from 'Redux/DepMiddleware';\n\n\nconst configureStore = preloadedState => {\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(\n      applyMiddleware(\n        thunk,\n        DepMiddleware())\n    )\n  )\n\n  return store\n}\n\nexport default configureStore\n","export const DataRequested = \"DataRequested\";\nexport const RequestMetadata = \"RequestMetadata\";\nexport const NonceSubmitted = \"NonceSubmitted\";\nexport const NewValue = \"NewValue\";\nexport const NewValueWinners = \"NewValueWinners\";\nexport const TipAdded = \"TipAdded\";\nexport const NewAPIonQinfo = \"NewAPIonQinfo\";\nexport const NewChallenge = \"NewChallenge\";\nexport const NewDispute = \"NewDispute\";\nexport const Voted = \"Voted\";\nexport const Blocks = \"Blocks\";\nexport const Metadata = \"Metadata\";\nexport const ChainData = \"ChainData\";\nexport const ChainDisputes = \"ChainDisputes\";\n","\nexport const DEFAULT_MASTER_CONTRACT = \"0x2B63d6e98E66C7e9fe11225Ba349B0B33234D9A2\".toLowerCase();\nexport const DEFAULT_TELLOR_CONTRACT = \"0xd9Ad0E4E18F2430719E73b2f824C54CFA5D703b6\";\n","import Tellor from './Tellor.json';\nimport TellorLibrary from './TellorLibrary.json';\nimport TellorGetters from './TellorGetters.json';\nimport TellorGettersLibrary from './TellorGettersLibrary.json';\nimport TellorMaster from './TellorMaster.json';\nimport Utilities from './Utilities.json';\n\nexport default [\n  ...Tellor.abi,\n  ...TellorLibrary.abi,\n  ...TellorGetters.abi,\n  ...TellorGettersLibrary.abi,\n  ...TellorMaster.abi,\n  ...Utilities.abi\n]\n","import EventEmitter from 'events';\nimport * as eventTypes from './LogEvents';\nimport _ from 'lodash';\nimport eventFactory from 'Chain/LogEvents/EventFactory';\nimport {Mutex} from 'async-mutex';\n\nlet id = 0;\nexport default class SubscriptionProvider {\n  constructor(props) {\n    this.chain = props.chain;\n    this.allListeners = [];\n    this.blockListeners = [];\n    this.mutex = new Mutex();\n    this.id = id++;\n\n    [\n      'once',\n      'allEvents',\n      'allBlockEvents',\n      '_sub',\n      '_filterAndNotify'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n\n    this.chain.on(\"blockEvents\", e=> {\n      this.blockListeners.forEach(bl=>{\n        bl.callback(null, e.events);\n      })\n    });\n\n    //treat each defined event type as a function that user can\n    //subscribe to.\n    _.keys(eventTypes).forEach(nm=>{\n\n      //just create subscription for event name\n      this[nm] = (opts, cb) => {\n        return this._sub(nm, opts, cb);\n      };\n\n      this.chain.on(nm, async (e)=>{\n        if(e) {\n          let release = await this.mutex.acquire();\n\n          try {\n            let actual = e;\n            if(!e.normalize) {\n              actual = eventFactory(e);\n            }\n            if(!actual) {\n              return;\n            }\n\n            console.log(\"Receiving event from chain\", actual.event);\n            \n            if(this.allListeners.length > 0) {\n              console.log(\"Notifying allListener for event\", actual.event);\n              let norm = actual.normalize();\n              this.allListeners.forEach(al=>{\n                console.log(\"Notifying listener for event\", norm.name);\n                this._filterAndNotify(al.options, al.callback, norm);\n              });\n            }\n          } finally {\n            release();\n          }\n        }\n      });\n\n      //then bind the new function to this class\n      this[nm] = this[nm].bind(this);\n    });\n\n  }\n\n  async once(event, opts) {\n    //event is name or 'allEvents' for any\n    //opts has filter, topics array\n    throw new Error(\"contractLogic.events.once not supported yet\");\n  }\n\n  async allEvents(opts, cb)  {\n    this.allListeners.push({\n      options: opts,\n      callback: cb\n    });\n  }\n\n  allBlockEvents(opts, cb) {\n    this.blockListeners.push({options: opts, callback: cb});\n  }\n\n\n  _filterAndNotify(opts, cb, event, emitter) {\n    let filter = opts?opts.filter:{};\n    if(!filter) {\n      filter = {};\n    }\n    if(!cb) {\n      cb = ()=>{}\n    }\n    if(!emitter) {\n      emitter = {\n        emit: () => {}\n      }\n    }\n\n    let props = _.keys(filter);\n    if(props.length > 0) {\n      props.forEach(k=>{\n        let tgtVal = filter[k];\n        let val = event[k];\n        if(val) {\n          if(Array.isArray(tgtVal)) {\n            tgtVal.forEach(v=>{\n              if(v === val) {\n                cb(null, event);\n                emitter.emit(\"data\", event);\n              }\n            })\n          } else if(val === tgtVal) {\n            cb(null, event);\n            emitter.emit(\"data\", event);\n          }\n        }\n      })\n    } else {\n      cb(null, event);\n      emitter.emit(\"data\", event);\n    }\n  }\n\n  _sub(name, opts, cb) {\n    let emitter = new EventEmitter();\n    this.chain.on(name, async (e)=>{\n      let rel = await this.mutex.acquire();\n      try {\n        if(e) {\n          this._filterAndNotify(opts, cb, e, emitter);\n        }\n      } finally {\n        rel();\n      }\n    });\n    return emitter;\n  }\n}\n","import EventEmitter from 'events';\nimport SubscriptionProvider from '../SubscriptionProvider';\n\n/**\n * Abstraction of smart contract. Dashboard interacts with contract interface\n * and this implementation deals with txn submissions, etc.\n */\nexport default class Web3Contract {\n  constructor({chain, master, tellor, caller}) {\n\n    this.chain = chain;\n    this.master = master;\n    this.caller = caller;\n    this.eventHistory = {};\n    this._emitter = new EventEmitter();\n\n    [\n      'init',\n      'emitEvents',\n      'getPastEvents',\n      'startSubscriptions',\n      'unload',\n      'requestData',\n      'addTip',\n      'getCurrentVariables',\n      'getVariablesOnDeck',\n      'getRequestVars',\n      'getRequestIdByQueryHash',\n      'getMinersByRequestIdAndTimestamp',\n      'getDisputeIdByDisputeHash',\n      'getAllDisputeVars',\n      'getDisputeDetails',\n      'beginDispute',\n      'didVote',\n      'isInDispute',\n      'vote',\n      'getTokens',\n      'balanceOf',\n      '_call',\n      '_send'\n    ].forEach(fn=>{\n      if(!this[fn]) { throw new Error(\"Web3Contract missing fn: \" + fn)}\n      this[fn]=this[fn].bind(this);\n    });\n\n    //treat a single event emitter as if the blockchain is emitting\n    //events to the subscription provider. Again, abstracting subscriptions\n    //from the rest of the dashboard.\n    this._emitter = new EventEmitter();\n    this.events = new SubscriptionProvider({\n      chain: this._emitter //pretend our emitter is the blockchain\n    });\n  }\n\n  /**\n   * Called when a new block arrives and all log events have been extracted.\n   */\n  emitEvents(events) {\n    console.log(\"Emitting events\", events);\n    this._emitter.emit(\"blockEvents\", {events});\n  }\n\n  /**\n   * Read past events from blockchain. This follows normal web3 interface but adds\n   * additional functionality of retrieving and storing blocks locally for future reference.\n   */\n  async getPastEvents(event, opts, callback) {\n    console.log(\"Getting past events\");\n    let r = await this.master.getPastEvents(event||\"allEvents\", opts, async (err, events) => {\n      if(events) {\n\n        //we need to replay the blocks in their ascending time order. So we\n        //first make sure blocks are sorted by blockNumber and logIndex\n        events.sort((a,b)=>{\n          let diff = a.blockNumber - b.blockNumber;\n          if(diff) {\n            return diff;\n          }\n          return a.logIndex = b.logIndex;\n        });\n\n        for(let i=0;i<events.length;++i) {\n          let e = events[i];\n          let b = await this.chain.web3.eth.getBlock(e.blockNumber);\n          if(b) {\n            this[b.blockNumber] = b.timestamp;\n            //apply the time to the event as well\n            e.timestamp = b.timestamp;\n            //await this.chain._storeBlockTime(b);\n          }\n        }\n\n        if(callback) {\n          let p = callback(events);\n          if(p instanceof Promise) {\n            await p;\n          }\n        }\n        return events;\n      }\n      if(err)\n        throw err;\n    });\n    return r;\n  }\n\n  async startSubscriptions() {\n    //no-op\n  }\n\n  /**\n   * Make a contract call\n   */\n  _call(con, method, args) {\n    return con.methods[method](...args).call({\n      from: this.caller,\n      gas: 100000\n    });\n  }\n\n  /**\n   * Submit a contract transaction.\n   */\n  _send(con, method, args) {\n    let tx = con.methods[method](...args);\n      return new Promise((done,err)=>{\n        this.chain.web3.eth.sendTransaction({\n            to: con.address,\n            from: this.caller,\n            data: tx.encodeABI()\n          }, (e, r)=>{\n            if(e) {\n              err(e);\n            } else {\n              done(r);\n            }\n          });\n      });\n  }\n\n  async init() {\n    //nothing to do\n  }\n\n  /**\n   * attempt to clean subscriptions. May or may not be called\n   * when page unloads\n   */\n  async unload() {\n    if(this.sub) {\n      await this.sub.unsubscribe();\n      this.sub = null;\n    }\n  }\n\n  //following are all same functions from solidity code\n\n  getCurrentVariables() {\n    return this._call(this.master, \"getCurrentVariables\", []);\n  }\n\n  getRequestVars(_apiId) {\n    return this._call(this.master, \"getRequestVars\", [_apiId]);\n  }\n\n  getRequestIdByQueryHash(hash) {\n    return this._call(this.master, \"getRequestIdByQueryHash\", [hash]);\n  }\n\n  getVariablesOnDeck() {\n    return this._call(this.master, \"getVariablesOnDeck\", []);\n  }\n\n  getMinersByRequestIdAndTimestamp(requestId, timestamp) {\n    return this._call(this.master, \"getMinersByRequestIdAndTimestamp\", [requestId, timestamp]);\n  }\n\n  requestData(queryString, symbol, multiplier, tip) {\n    return this._send(this.master, \"requestData\", [queryString, symbol, multiplier, tip]);\n  }\n\n  addTip(requestId, tip) {\n    return this._send(this.master, \"addTip\", [requestId, tip]);\n  }\n\n  getTokens() {\n\n    //nice fn name :(\n    return this._send(this.master, \"theLazyCoon\", [this.caller,\"1000000000000000000000\"]);\n  }\n\n  balanceOf(addr) {\n    return this._call(this.master, \"balanceOf\", [addr]);\n  }\n\n  getDisputeIdByDisputeHash(hash) {\n    return this._call(this.master, \"getDisputeIdByDisputeHash\", [hash]);\n  }\n\n  getAllDisputeVars(id) {\n    return this._call(this.master, \"getAllDisputeVars\", [id]);\n  }\n\n  async getDisputeDetails(id) {\n    let vars = await this.getAllDisputeVars(id);\n    /*  return(\n      disp.hash,                                              0\n      disp.executed,                                          1\n      disp.disputeVotePassed,                                 2\n      disp.isPropFork,                                        3\n      disp.reportedMiner,                                     4\n      disp.reportingParty,                                    5\n      disp.proposedForkAddress,                               6\n      [\n        disp.disputeUintVars[keccak256(\"requestId\")],         7.0\n        disp.disputeUintVars[keccak256(\"timestamp\")],         7.1\n        disp.disputeUintVars[keccak256(\"value\")],             7.2\n        disp.disputeUintVars[keccak256(\"minExecutionDate\")],  7.3\n        disp.disputeUintVars[keccak256(\"numberOfVotes\")],     7.4\n        disp.disputeUintVars[keccak256(\"blockNumber\")],       7.5\n        disp.disputeUintVars[keccak256(\"minerSlot\")],         7.6\n        disp.disputeUintVars[keccak256(\"quorum\")]             7.7\n      ],\n      disp.tally                                              8\n    );\n    */\n    if(!vars[0]) {\n      return null;\n    }\n    return {\n      _disputeId: id,\n      _requestId: vars[7][0],\n      _miner: vars[4]\n    }\n  }\n\n  beginDispute(requestId, timestamp, minerIndex) {\n    return this._send(this.master, \"beginDispute\", [requestId, timestamp, minerIndex]);\n  }\n\n  didVote(disputeId, user) {\n    return this._call(this.master, \"didVote\", [disputeId, user]);\n  }\n\n  vote(disputeId, supportsDisputer) {\n    return this._send(this.master, \"vote\", [disputeId, supportsDisputer]);\n  }\n\n  async isInDispute(address) {\n    let vars = await this._call(this.master, \"getStakerInfo\", [address]);\n    return (vars[0].toString()-0)!==3;\n  }\n}\n","import Web3 from 'web3';\nimport {\n  DEFAULT_MASTER_CONTRACT\n} from 'Constants/chain/web3Config';\nimport abi from 'Chain/abi';\nimport Web3Contract from './Web3Contract';\nimport Storage from 'Storage';\nimport * as dbNames from 'Storage/DBNames';\nimport {Creators as ChainCreators} from 'Redux/chain/actions';\n\n//the maximum numbre of blocks we care about. Be careful what to set this\n//to as it impacts how long startup will take when no local storage or\n//event data exists. 8K is generally the number of mainnet blocks per day.\nconst MAX_BLOCKS = 8000;\n\nexport default class Web3Wrapper {\n  constructor(props) {\n    this.times = {};\n\n    [\n      'init',\n      'unload',\n      'getBlock',\n      'latestBlock',\n      'getContract',\n      'getTime',\n      'getMissingBlockRanges',\n      'checkInDispute',\n      '_storeBlockTime',\n      'fillBlockGap'\n    ].forEach(fn=>{\n      if(!this[fn]) { throw new Error(\"Web3Wrapper missing fn: \" + fn)}\n      this[fn]=this[fn].bind(this);\n    });\n  }\n\n  init() {\n    return async (dispatch, getState) => {\n      console.log(\"Chain init called\");\n\n      //if we've already been initialized, just ask contract to re-initialize\n      if(this.contract) {\n        await this.contract.init();\n        return;\n      }\n\n      //set up web3\n      let ethProvider = window.ethereum;\n      if(!ethProvider && window.web3){\n        ethProvider =  window.web.currentProvider;\n      }\n      if(ethProvider) {\n\n        this.web3 = new Web3(ethProvider);\n        let acts = await ethProvider.enable();\n        if(!acts) {\n          //user denied access to app\n          acts = [];\n        }\n\n        //If the user changes account in metamask\n        ethProvider.on('accountsChanged', async (accounts) => {\n          //grab new account and assign as contract default caller address\n          this.ethereumAccount = accounts[0];\n          this.contract.caller = accounts[0];\n          console.log(\"Accounts changed in MM\");\n\n          //check whether the address is currently in dispute\n          await this.checkInDispute();\n\n          //re-establish the chain with new account\n          dispatch(ChainCreators.loadSuccess(this));\n        });\n\n        this.network = await this.web3.eth.net.getNetworkType();\n\n        //establish the latest block number\n        this.block = await this.web3.eth.getBlockNumber();\n        console.log(\"Latest block\", this.block);\n\n\n        //create eth contract with default address defined in\n        //Constants/chain/web3Config\n        let master = new this.web3.eth.Contract(abi, DEFAULT_MASTER_CONTRACT, {\n          address: DEFAULT_MASTER_CONTRACT\n        });\n\n        //our contract wrapper\n        this.contract = new Web3Contract({chain: this, master, caller: acts[0]});\n\n        //the default account selected in metamask\n        this.ethereumAccount = acts[0];\n\n        //initialize contract\n        await this.contract.init();\n\n        //see if selected account is in dispute\n        await this.checkInDispute();\n      }\n    }\n  }\n\n  //call on chain to determine if the current account is in dispute\n  async checkInDispute() {\n    try {\n      let r = await this.contract.isInDispute(this.ethereumAccount);\n      this.isInDispute = r;\n    } catch (e) {\n      console.log(\"Unsure if in dispute due to call error\", e);\n    }\n  }\n\n  async unload() {\n    console.log(\"Getting unload\");\n    localStorage.setItem(\"web3Wrapper.unload\", true);\n    await this.contract.unload();\n  }\n\n  /**\n   * Get the timestamp of a particular block number\n   */\n  async getTime(block) {\n\n    let t = this.times[block];\n    if(t) {\n      return t;\n    }\n    let b = await this.web3.eth.getBlock(block);\n    if(b) {\n      this.times[b.number] = b.timestamp;\n      await this._storeBlockTime(b);\n      return b.timestamp;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get a specific block from chain\n   */\n  getBlock(number) {\n    console.log(\"Calling getBlock\");\n    return this.web3.getBlock(number);\n  }\n\n  /**\n   * Get the latest block for the chain\n   */\n  async latestBlock() {\n    return this.block;\n  }\n\n  /**\n   * Get the contract wrapper associated with this chain impl\n   */\n  getContract(props) {\n    return this.contract;\n  }\n\n  /**\n   * Get any gaps in block numbers that need to be restored\n   */\n  async getMissingBlockRanges(limit) {\n\n    //read all block metadata stored locally\n    let all = await Storage.instance.readAll({\n      database: dbNames.Blocks,\n      limit: limit || MAX_BLOCKS, //about a day\n      sort: [\n        {\n          field: \"blockNumber\",\n          order: \"desc\"\n        }\n      ]\n    });\n    let gaps = [];\n\n    //the last locally-known block\n    let last = all[0]?all[0].blockNumber-0:0;\n\n    //the first gap could be from the latest block back\n    //NOTE: we can't go back to zero as this would scan forever\n    //on test or mainnet. Instead, we limit scans to MAX_BLOCKS\n    if(last < this.block) {\n      let diff = this.block - last;\n      if(diff > MAX_BLOCKS) {\n        last = this.block - MAX_BLOCKS;\n      }\n      gaps.push({\n        start: last,\n        end: this.block\n      });\n    }\n\n    all.forEach(a=>{\n      //if current block is earlier than one less than last\n      //there is a gap\n      if(a.blockNumber-0 < (last-1)) {\n        let diff = last - (a.blockNumber-0);\n        if(diff < MAX_BLOCKS) {\n          gaps.push({\n            //gap starts with the current block\n            start: a.blockNumber-0,\n            //going forward in ascending order to last one seen\n            end: last\n          });\n        }\n      }\n      last = a.blockNumber-0;\n    });\n\n    //we need to reverse sort the gaps because they are currently\n    //in descending order. They need to be in increasing order so\n    //that replay order is preserved at startup. Otherwise, the latest\n    //state would be overwritten by early state!\n    gaps.sort((a,b)=>{\n      return a.start - b.start;\n    })\n    console.log(\"Recovering gaps\", gaps);\n    return gaps;\n  }\n\n  /**\n   * Record that the given gap has been satisfied\n   */\n  async fillBlockGap(gap) {\n    console.log(\"Filling block gap\", gap);\n    for(let i=gap.start;i<=gap.end;++i) {\n      let t = this.times[i];\n      if(!t) {\n        let b = await this.web3.eth.getBlock(i);\n        if(b) {\n          this.times[i] = b.timestamp;\n          await this._storeBlockTime(b);\n        }\n      }\n    }\n  }\n\n  /**\n   * Store that  block has been received\n   */\n  async _storeBlockTime(block) {\n    if(!block) {\n      return;\n    }\n    await Storage.instance.create({\n      database: dbNames.Blocks,\n      key: \"\"+block.number,\n      data: {\n        blockNumber: block.number,\n        timestamp: block.timestamp\n      }\n    });\n  }\n}\n","/*\n * Just manages how we are going to access chain data\n */\n\n import Web3Wrapper from './web3/Web3Wrapper';\n //import Mock from './mock/Mock';\n\n let inst = null;\n export const init = (props) => {\n   if(!inst) {\n     //inst = new Mock(props);\n     inst = new Web3Wrapper();\n   }\n   return inst;\n }\n\n const instance = () => {\n   if(!inst) {\n     throw new Error(\"Must first initialize chain\");\n   }\n   return inst;\n }\n\n export default instance;\n","import * as yup from 'yup';\nimport _ from 'lodash';\nimport Storage from 'Storage';\n\nconst procSchema = yup.object().shape({\n  id: yup.string().required(\"Missing processor id\")\n});\n\n/**\n * Processing router that gives a context to block processing modules.\n * This allows us to string togther a series of processors in a generic\n * way without concern for order of operations within any individual\n * processing module.\n */\nexport default class EthProcessor {\n  constructor(props) {\n    //all processors keyed by their required \"id\" property (see schema above)\n    this.processors = {};\n\n    //the data source for the processing flow\n    this.sourceProcessor = null;\n\n    //offset counter for installed processors\n    this.count = 0;\n\n    [\n      'source',\n      'add',\n      'init',\n      'unload',\n      'ready',\n      '_checkExists',\n      '_initProc',\n      '_unloadProc'\n    ].forEach(fn=>{\n      if(!this[fn]) {\n        throw new Error(\"Need to implement: \" + fn);\n      }\n      this[fn] = this[fn].bind(this);\n    });\n  }\n\n  /**\n    * Set the data source for the flow. This must implement a start\n    * function that is given a next function to call for each new data\n    * item to process.\n    */\n  source(proc) {\n    if(!proc) {\n      return;\n    }\n    procSchema.validateSync(proc);\n    if(this.sourceProcessor) {\n      throw new Error(\"Processors already have a source with id: \" + this.sourceProcessor.id);\n    }\n    this.sourceProcessor = proc;\n    return this;\n  }\n\n  /**\n   * Add a processor to the flow\n   */\n  add(proc) {\n    if(!proc) {\n      return;\n    }\n    procSchema.validateSync(proc);\n    this._checkExists(proc);\n    this.processors[proc.id] = {\n      processor: proc,\n      index: this.count\n    }\n    ++this.count;\n    return this;\n  }\n\n  /**\n   * Initialize the flow and all processors contained within it\n   */\n  init() {\n    return async (dispatch, getState) => {\n      let procs = _.values(this.processors);\n      procs.sort((a,b)=>a.index-b.index);\n      await dispatch(this._initProc(this.sourceProcessor));\n      for(let i=0;i<procs.length;++i) {\n        await dispatch(this._initProc(procs[i].processor));\n      }\n    }\n  }\n\n  /**\n   * Unload the processing flow. This may or may not be called\n   * given the race for browser shutdown/unload callback.\n   */\n  unload() {\n    return async (dispatch, getState) => {\n      let procs = _.values(this.processors);\n      procs.sort((a,b)=>a.index-b.index);\n      await dispatch(this._unloadProc(this.sourceProcessor));\n      for(let i=0;i<procs.length;++i) {\n        await dispatch(this._unloadProc(procs[i].processor));\n      }\n    }\n  }\n\n  /**\n   * Indicate that the flow is now ready to run. This must be called\n   * only after all intiialization is complete.\n   */\n  ready() {\n    return async (dispatch, getState) => {\n      //if we've already started, don't start again\n      if(this.startCtx) {\n        return;\n      }\n\n      //get all processors to run in their index order\n      let procs = _.values(this.processors);\n      procs.sort((a,b)=>a.index-b.index);\n\n      //Create the starting context for the source proc\n      this.startCtx = new StartingCtx({\n        processors: procs,\n        dispatch,\n        getState\n      });\n\n      //and use it to kick off the flow\n      return dispatch(this.sourceProcessor.start(this.startCtx.next, this.startCtx.store));\n    }\n  }\n\n  /**\n   * Check whether a processor has been installed already with the same id\n   */\n  _checkExists(proc) {\n    if(this.processors[proc.id]) {\n      throw new Error(\"Already registered processor with id: \" + proc.id);\n    }\n  }\n\n  /**\n   * Initialize a processor if it has an init function\n   */\n  _initProc(proc) {\n    return (dispatch) => {\n      if(proc && typeof proc.init === 'function') {\n        return dispatch(proc.init());\n      }\n    }\n  }\n\n  /**\n   * Unload a proc if it has an unload function\n   */\n  _unloadProc(proc) {\n    return async (dispatch) => {\n      if(proc && typeof proc.unload === 'function') {\n        try {\n          await dispatch(proc.unload());\n        } catch (e) {\n          console.log(\"Unload failure\", e);\n        }\n      }\n    }\n  }\n}\n\n\n\n/**\n * Starting context is intended for the first source processor\n * that will push data through the flow. This context's 'next'\n * call kicks off a sub context for all downstream processors to\n * process the source's incoming data.\n */\nclass StartingCtx {\n  constructor(props) {\n    this.processors = props.processors;\n    this.dispatch = props.dispatch;\n    this.getState = props.getState;\n    this.storageCtx = new StorageCtx({\n      dispatch: props.dispatch,\n      getState: props.getState\n    });\n\n    [\n      'next',\n      'store'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  next(data) {\n    let sub = new SubCtx({\n      processors: this.processors,\n      dispatch: this.dispatch,\n      getState: this.getState,\n      storageCtx: this.storageCtx\n    });\n\n    let proc = sub.processors[0];\n    if(proc) {\n      return this.dispatch(proc.processor.process(data, sub.next, sub.store));\n    }\n  }\n\n  store(props) {\n    this.storageCtx.addStoredItem(props);\n  }\n}\n\n\n/**\n * Sub context gets kicked off after the starting processor in a pipeline\n * completes and forwards data via the parent context's 'next' call.\n */\nclass SubCtx {\n  constructor(props) {\n    this.processors = props.processors;\n    this.dispatch = props.dispatch;\n    this.getState = props.getState;\n    this.storageCtx = props.storageCtx;\n    this.index = 0;\n    [\n      'next',\n      'store'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  next(data) {\n    //root processor was first for this context. Now we go to next\n    ++this.index;\n    //grab next processor if it exists\n    let nextProc = this.processors[this.index];\n    if(nextProc) {\n      //if so, we kick it off with incomign data and callback to this\n      //context's next function so that we keep moving forward through procs\n      return this.dispatch(nextProc.processor.process(data, this.next, this.store));\n    } else {\n      return this.storageCtx.exec();\n    }\n  }\n\n  store(props) {\n    this.storageCtx.addStoredItem(props);\n  }\n}\n\n\nclass StorageCtx {\n  constructor(props) {\n    this.toStore = {};\n    this.dispatch = props.dispatch;\n    this.getState = props.getState;\n\n    [\n      'addStoredItem',\n      'exec'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  addStoredItem({database, key, data}) {\n    let dbItems = this.toStore[database] || {};\n    dbItems[key] = data;\n    this.toStore[database] = dbItems;\n  }\n\n  async exec() {\n    let dbs = _.keys(this.toStore);\n    let start = Date.now();\n    let cnt = 0;\n\n    for(let i=0;i<dbs.length;++i) {\n      let db = dbs[i];\n      let dbItems = this.toStore[db];\n\n      let dbKeys = _.keys(dbItems);\n      if(dbKeys.length === 0) {\n        console.log(\"Have DB w/out keys\", db);\n        continue;\n      }\n\n      let storedItems = [];\n\n      for(let j=0;j<dbKeys.length;++j) {\n        let key = dbKeys[j];\n        let data = dbItems[key];\n        ++cnt;\n        storedItems = [\n          ...storedItems,\n          {key, value: data}\n        ]\n      }\n      await Storage.instance.createBulk({\n        database: db,\n        items: storedItems\n      });\n    }\n    this.toStore = {};\n    console.log(\"Stored\", cnt, \"items in\", (Date.now()-start),\"ms\");\n  }\n}\n","import * as dbNames from 'Storage/DBNames';\nimport Storage from 'Storage';\nimport _ from 'lodash';\n\nconst MAX_BLOCKS = 56000;\n\n/**\n * Block source subscribes to and supplies block data to the\n * event processing flow.\n */\nexport default class BlockSource {\n  constructor() {\n    this.missingGaps = [];\n    this.id = \"BlockSource\";\n\n    [\n      'init',\n      'start',\n      'unload',\n      '_restoreBlocks',\n      '_restoreEvents',\n      '_pullEvents'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  init() {\n    return async (dispatch, getState) => {\n      //just make sure we have a chain to work from\n      let chain = getState().chain.chain;\n      if(!chain) {\n        throw new Error(\"Chain was not initialized\");\n      }\n\n    }\n  }\n\n  unload() {\n    return  (dispatch, getState) => {\n      //just remove subscriptions. This is not guaranteed to be called, unfortunately\n      if(this.sub) {\n        this.sub.removeListener(\"data\", this.subCallback);\n        return new Promise((done,err)=>{\n          this.sub.unsubscribe((e,good)=>{\n              let now = Date.now();\n              let dtStr = new Date(now).toString();\n              console.log(\"Storing shutdown info....\");\n              Storage.instance.create({\n                database: \"ShutdownStatus\",\n                key: \"\"+now,\n                data: {\n                  error: e?e.message:null,\n                  status: good,\n                  time: dtStr\n                }\n              }).then(()=>{\n                console.log(\"unsubscribe finished\");\n                done();\n              }).catch(e=>{\n                err(e);\n              })\n              this.sub = null;\n              this.subCallback = null;\n          });\n        });\n\n      } else {\n        return new Promise((done,err)=>{\n          let now = Date.now();\n          let dtStr = new Date(now).toString();\n          Storage.instance.create({\n            database: \"ShutdownStatus\",\n            key: \"\"+now,\n            data: {\n              error: \"no subscription\",\n              time: dtStr\n            }\n          }).then(()=>done())\n          .catch(e=>err(e));\n        });\n      }\n    }\n  }\n\n  start(next, store) {\n    return async (dispatch, getState) => {\n      let chain = getState().chain.chain;\n      let web3  = chain.web3;\n      if(!web3) {\n        throw new Error(\"Web3 not defined in chain\");\n      }\n\n/*****\n      //see if there are any gaps in blocks that we have to\n      //recover\n      let gaps = await chain.getMissingBlockRanges();\n      if(gaps.length > 0) {\n        await dispatch(this._restoreBlocks(next, store, gaps));\n      }\n****/\n      //we need to recover events from the last read block\n      let r = await Storage.instance.readAll({\n        database: \"lastBlock\",\n        limit: 1,\n        sort: [\n          {\n            field: \"blockNumber\",\n            order: 'DESC'\n          }\n        ]\n      });\n      console.log(\"last block results\", r);\n      let start = r[0]?r[0].blockNumber+1:0;\n      let last = await web3.eth.getBlockNumber();\n      let diff = last - start;\n      if(diff > MAX_BLOCKS) {\n        start = last - MAX_BLOCKS;\n      }\n\n      await dispatch(this._restoreEvents(next, store, start));\n\n\n\n      //clear out any previous subscriptions. This doesn't actually clear MetaMask\n      //so not sure if it's really useful.\n      await web3.eth.clearSubscriptions();\n\n      //now subscribe to chain for all new blocks and push on demand\n      this.sub = web3.eth.subscribe('newBlockHeaders');\n      this.subCallback = async (block) => {\n        console.log(\"incoming block\");\n        if(block) {\n          await dispatch(this._pullEvents(next, store, block.number, block));\n\n          /*\n          //if we get a block, grab the block with txns attached\n          let wTxns = await getState().chain.chain.web3.eth.getBlock(block.number, true);\n          console.log(\"BlockSource Getting new block\", wTxns);\n\n          //remember that we've seen the block\n          store({database: dbNames.Blocks, key: \"\"+block.number, data: {blockNumber: block.number, timestamp: block.timestamp}});\n\n          //pass forward to processors\n          await next({block: wTxns});\n          */\n        }\n      };\n\n      this.sub.on(\"data\", this.subCallback);\n    }\n  }\n\n  /**\n   * Attempt to restore missing blocks\n   */\n  _restoreBlocks(next, store, gaps) {\n    return async (dispatch, getState) => {\n      if(gaps.length === 0) {\n        return;\n      }\n\n      let chain = getState().chain.chain;\n      let web3 = chain.web3;\n      let followons = [];\n\n      //for each gap we need to rebuild\n      for(let i=0;i<gaps.length;++i) {\n        let g = gaps[i];\n        //for the block numbers within the gap\n        for(let j=g.start;j<=g.end;++j) {\n          console.log(\"Retrieving missing block\", j);\n          let start = Date.now();\n\n          //grab the block from chain\n          let block = await web3.eth.getBlock(j, true);\n          console.log(\"Block retrieved in \", (Date.now()-start),\"ms\");\n          if(block) {\n            //remember that we've seen the block\n            store({database: dbNames.Blocks, key: \"\"+block.number, data: {blockNumber: block.number, timestamp: block.timestamp}});\n\n            //and pass the block on to the next processor, flagging it as\n            //recovery since we're actually processing old blocks\n            followons.push(next({block: {\n              ...block,\n              __recovering: true\n            }}));\n          }\n        }\n      }\n      //wait for all blocks to process\n      await Promise.all(followons);\n\n      //We need to try again to capture any events that arrived while\n      //we were recovering gaps. This makes up for lengthy recovery times.\n      //this follow up should capture any remaining items quickly.\n      gaps = await chain.getMissingBlockRanges();\n      if(gaps.length > 0) {\n        return this._restoreBlocks(next, store, gaps);\n      }\n    }\n  }\n\n  _restoreEvents(next, store, startBlock) {\n    return this._pullEvents(next, store, startBlock, null, true);\n  }\n\n  _pullEvents(next, store, startBlock, block, recovering) {\n    return async (dispatch, getState) => {\n      let con = getState().chain.contract;\n      let web3 = getState().chain.chain.web3;\n\n\n      let events = await con.getPastEvents(\"allEvents\", {fromBlock: startBlock});\n      console.log(\"Retrieved\", events.length,\"events from block\",startBlock);\n      let txnHistory = {};\n      let blockNum = events.length>0?events[0].blockNumber:0;\n      let currentBlock = {\n        blockNumber: blockNum,\n        transactions: []\n      };\n\n      for(let i=0;i<events.length;++i) {\n        let evt = events[i];\n        store({\n          database: dbNames.Blocks,\n          key: \"\"+evt.blockNumber,\n          data: {\n            blockNumber: evt.blockNumber,\n            timestamp: block?block.timestamp:Math.floor(Date.now()/1000)\n          }\n        });\n        store({\n          database: \"lastBlock\",\n          key: \"last\",\n          data: {\n            blockNumber: evt.blockNumber,\n            timestamp: block?block.timestamp:Math.floor(Date.now()/1000)\n          }\n        });\n\n        if(evt.blockNumber !== blockNum) {\n          //new block, convert what we've built up to transaction set\n          currentBlock.transactions = _.values(txnHistory);\n          //ordered by txn index\n          currentBlock.transactions.sort((a,b)=>{\n            return a.transactionIndex - b.transactionIndex\n          });\n          try {\n            await next({block: currentBlock});\n          } catch (e) {\n            console.log(\"Problem sending event block to next proc\", e);\n          }\n          currentBlock = {\n            blockNumber: evt.blockNumber,\n            transactions: []\n          };\n          txnHistory = {};\n          blockNum = evt.blockNumber;\n        }\n\n        let txn = txnHistory[evt.transactionHash];\n        if(!txn) {\n          let start = Date.now();\n          let rec = await web3.eth.getTransaction(evt.transactionHash);\n\n          if(rec) {\n            console.log(\"Retrieved receipt in\", (Date.now()-start),\"ms\");\n\n            txn = {\n              ...rec,\n              transactionHash: evt.transactionHash,\n              __recovering: recovering,\n              logEvents: {}\n            };\n            txnHistory[evt.transactionHash] = txn;\n          }\n        }\n        if(txn) {\n          let ex = txn.logEvents[evt.event];\n          if(ex) {\n            if(!Array.isArray(ex)) {\n              let a = [ex];\n              txn.logEvents[evt.event] = a;\n            } else {\n              ex.push(evt);\n            }\n          } else {\n            txn.logEvents[evt.event] = evt;\n          }\n        }\n      }\n\n      if(_.values(txnHistory).length > 0) {\n        //new block, convert what we've built up to transaction set\n        currentBlock.transactions = _.values(txnHistory);\n        //ordered by txn index\n        currentBlock.transactions.sort((a,b)=>{\n          return a.transactionIndex - b.transactionIndex\n        });\n        try {\n          await next({block: currentBlock});\n        } catch (e) {\n          console.log(\"Problem sending event block to next proc\", e);\n        }\n      }\n\n    }\n  }\n}\n","import abi from 'Chain/abi';\nimport {\n  DEFAULT_MASTER_CONTRACT\n} from 'Constants/chain/web3Config';\nimport eventFactory from 'Chain/LogEvents/EventFactory';\nimport _ from 'lodash';\n\nconst createEventMap = logs => {\n  return logs.reduce((o,e)=>{\n    let ex = o[e.event];\n    if(ex) {\n      if(Array.isArray(ex)) {\n        ex.push(e);\n      } else {\n        o[e.event] = [ex, e];\n      }\n    } else {\n      o[e.event] = e;\n    }\n    return o;\n  },{});\n}\n\n/**\n * Parses ABI from transactions and makes them available for\n * processing flows\n */\nexport default class ABIParser {\n  constructor() {\n    this.id = \"ABIParser\";\n\n    [\n      'init',\n      'process',\n      '_decode'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  init() {\n    return async (dispatch,getState) => {\n      let chain = getState().chain.chain;\n      if(!chain) {\n        throw new Error(\"Chain was not initialized\");\n      }\n      let web3 = chain.web3;\n      if(!web3) {\n        throw new Error(\"Chain does not have a web3\");\n      }\n      this.eventSigs = {};\n      this.fnSigs = {};\n      //for all ABIs installed\n      abi.forEach(a=>{\n\n        //look for event and fn definitions so we can use to decode\n        if(a.type === 'event') {\n          this.eventSigs[a.signature] = a;\n        } else if(a.type === 'function') {\n          this.fnSigs[a.signature] = a;\n        }\n      });\n    }\n  }\n\n  //main proc called during processing of new blocks\n  process({block},next) {\n    return async (dispatch,getState) => {\n\n      let web3 = getState().chain.chain.web3;\n      let txns = block.transactions;\n\n\n      //for all transactions in a block\n      for(let i=0;i<txns.length;++i) {\n        let t = txns[i];\n        //tag the transaction as recovery mode. This means\n        //past blocks are being re-processed so it might change\n        //processor behavior\n        t.__recovering = t.__recover || block.__recovering;\n\n\n        //if there is input data for the transaction\n        if(t.input && t.input.length > 2) {\n\n          //get the fn signature (4-bytes plus 0x)\n          let sig = t.input.substring(0, 10);\n\n\n          //lookup the fn definition by this sig\n          let def = this.fnSigs[sig];\n          if(def) {\n            //if we found a matching fn, tag the transaction with the\n            //fn's name. This will be used downstream as a context for\n            //all attached log events\n            t.fn = def.name;\n          }\n        }\n\n        if(!t.logEvents) {\n          //if the txn is going to our contract\n          if(t.to && t.to.toLowerCase() === DEFAULT_MASTER_CONTRACT) {\n\n            //get the receipt which will contain our logs\n            let rcpt = await web3.eth.getTransactionReceipt(t.hash);\n            if(rcpt) {\n              //if the txn failed, ignore it\n              if(!rcpt.status) {\n                continue;\n              }\n\n              //attach receipt to txn\n              t.receipt = rcpt;\n\n              //add timestamp to each txn for easier ref downstream\n              t.timestamp = block.timestamp;\n\n              //decode log events\n              let logEvents = await dispatch(this._decode(block, t));\n\n              //attach to transaction\n              t.logEvents = logEvents;\n\n              //attach to txn as a map keyed by event name\n              t.logEventMap = createEventMap(logEvents);\n            }\n          }\n        } else {\n          t.logEventMap = t.logEvents;\n          _.values(t.logEvents).forEach(e=>{\n            let evt = eventFactory(e);\n            if(evt) {\n              t.logEvents[e.event] = evt;\n            }\n          });\n        }\n\n      }//end txn enrichment loop\n      console.log(\"Forwarding decoded block\", block);\n      //can next proc in flow\n      return next({block});\n    }\n  }\n\n  /**\n   * Decode any logs in the transaction's receipt\n   */\n  _decode(block, txn) {\n    return (dispatch, getState) => {\n      let web3 = getState().chain.chain.web3;\n      let out = [];\n      let logs = txn.receipt.logs;\n      //for all logs in the receipt\n      for(let i=0;i<logs.length;++i) {\n        let log = logs[i];\n\n        //get the topic part of the event. Topic contains the\n        //event signature and up to three indexed attributes\n        let topics = log.topics;\n\n        //all remaining attributes are held in data part of log\n        let data = log.data;\n\n        //pull the sig as the first topic\n        let sig = topics.shift();\n\n        //see if we know about it\n        let def = this.eventSigs[sig];\n        if(def) {\n          let fields = null;\n          try {\n            //do actual decode of the log using the definition's input types, the data and\n            //remaining indexed topic attributes\n            fields = web3.eth.abi.decodeLog(def.inputs, data, topics);\n          } catch (e) {\n            //ignore\n          }\n          if(fields) {\n            //if we have field data, we create a new event locally. This format\n            //mimics web3's log event format\n            let payload = {\n              sender: txn.from.toLowerCase(),\n              fnContext: txn.fn,\n              transactionHash: txn.hash,\n              blockNumber: block.number,\n              transactionIndex: txn.transactionIndex,\n              signature: sig,\n              address: log.address?log.address.toLowerCase():undefined,\n              logIndex: i,\n              timestamp: block.timestamp,\n              event: def.name,\n              returnValues: fields\n            };\n            //instantiate our internal event type\n            let evt = eventFactory(payload);\n            if(evt) {\n              //and make it part of result\n              out.push(evt);\n            }\n          } else {\n            console.log(\"Failed to decode event\", def.name);\n          }\n        } else {\n          console.log(\"WARNING: no log definition with signature\", sig);\n        }\n      }\n      return out;\n    }\n  }\n}\n","/**\n * Captures basic plugin functionality\n */\n\nexport default class Plugin {\n  constructor(props) {\n    this.id = props.id;\n    this.fnContexts = props.fnContexts;\n\n    if(typeof this['process'] !== 'function') {\n      throw new Error(\"Enrichment plugins must implement process function\");\n    }\n  }\n}\n","export const normalizeRequest = req => {\n  let disp = req.disputes || {};\n  let dById = disp.byId || {};\n  let dByHash = disp.byHash || {};\n\n  return {\n    ...req,\n    challenges: {\n      ...req.challenges\n    },\n    disputes: {\n      byId: {\n        ...dById\n      },\n      byHash: {\n        ...dByHash\n      }\n    },\n    tips: [],\n    currentTip: req.currentTip || 0\n  }\n}\n\nexport const normalizeChallenge = (req,ch) => {\n  let miners = ch.minerOrder || [];\n  return {\n    ...ch,\n    symbol: req.symbol,\n    nonces: {\n      ...ch.nonces\n    },\n    finalValue: ch.finalValue?{\n      ...ch.finalValuel\n    }:undefined,\n    minerOrder: [...miners]\n  }\n}\n\nexport const normalizeDispute  = (req, d) => {\n  return {\n    ...d,\n    value: d.value || 0,\n    voteCount: d.voteCount || 0,\n    finalTally: d.finalTally || 0\n  }\n}\n","import Plugin from './Plugin';\nimport * as dbNames from 'Storage/DBNames';\nimport {findRequestById} from 'Chain/utils';\nimport * as ethUtils from 'web3-utils';\nimport {Creators} from 'Redux/requests/actions';\nimport {default as miningOps} from 'Redux/analytics/mining/operations';\n\nimport _ from 'lodash';\nimport {\n  normalizeRequest,\n  normalizeChallenge\n}  from './utils';\n\n/**\n * Enrichment plugin that handles mining solution submissions and any\n * events that result from that fn call.\n */\nexport default class MiningSolutionHandler extends Plugin {\n  constructor(props) {\n    super({\n      ...props,\n      id: \"MiningSolutionHandler\",\n      fnContexts: ['submitMiningSolution']\n    });\n    [\n      'process'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  process(txn, store) {\n    return async (dispatch, getState) => {\n\n      let outData = {};\n      //first, handle nonce submission changes\n      await dispatch(handleNonces({txn, store, outData}));\n\n      //then update nonce order if final value given\n      let outOrdered = {};\n      await dispatch(changeNonceOrder({txn, store, prevData: outData, outData: outOrdered}));\n      if(outOrdered.challenge) {\n        //if there are updates to the previous challenge, we need to\n        //append those to the previous request\n        let req = outData.request;\n        req = {\n          ...req,\n          challenges: {\n            ...req.challenges,\n            [outOrdered.challenge.challengeHash]: outOrdered.challenge\n          }\n        }\n        outData.request = req;\n      }\n\n      //at this point we can safely update redux with previous stuff\n      dispatch(Creators.updateRequest({request: outData.request}));\n\n      //then create new challenge if present in txn\n      let outNew = {};\n      await dispatch(addNewChallenge({txn, store, outPrev: outData, outData: outNew}));\n      if(outNew.challenge) {\n        //if we have a new challenge, make sure the new request gets updated\n        dispatch(Creators.updateRequest({request: outNew.request}));\n\n        //and set the current challenge to the new one\n        dispatch(Creators.updateCurrent({challenge: outNew.challenge}));\n      }\n    }\n  }\n}\n\n/**\n * Get the order of winning miners if available\n */\nconst getMiningOrder = newVal => async (dispatch, getState) => {\n  let con = getState().chain.contract;\n  if(!con) {\n    return null;\n  }\n  newVal = newVal.normalize();\n  //call on-chain to get miners by mining time and request id\n  let miners = await con.getMinersByRequestIdAndTimestamp(newVal.id, newVal.mineTime);\n\n  //make sure miner addresses are lower case for comparisons\n  return miners.map(m=>m.toLowerCase());\n}\n\n/**\n * Find a request by its given id\n **/\nconst findRequest = ({txn, store, id}) => async (dispatch, getState) => {\n  //see if already in redux store\n  let byId = getState().requests.byId;\n  let req = byId[id];\n  if(!req) {\n    //otherwise, find on-chain\n    req = await dispatch(findRequestById(id));\n    if(req) {\n      //store it since we don't have it locally cached yet\n      store({\n        database: dbNames.DataRequested,\n        key: \"\"+req.id,\n        data: req.toJSON()\n      });\n      //setup any initial fields we'll use in dashboard\n      req = normalizeRequest(req);\n    }\n  }\n  return req;\n}\n\n/**\n * Handle incoming nonce submission events\n */\nconst handleNonces = ({txn, store, outData}) => async (dispatch, getState) => {\n  let nonces = txn.logEventMap[dbNames.NonceSubmitted];\n  if(!nonces) {\n    return;\n  }\n\n  //I dont's think this is possible but just in case...treat as an array of submissions\n  if(!Array.isArray(nonces)) {\n    let a = [nonces];\n    nonces = a;\n  }\n  if(nonces.length === 0){\n    return;\n  }\n  //get the request associated with the submission\n  let req = await dispatch(findRequest({id: nonces[0].id, txn, store}));\n  if(!req) {\n    return;\n  }\n\n  //find the challenge within that request associated with the submission\n  let ch = req.challenges[nonces[0].challengeHash];\n  if(!ch) {\n\n    //there is no way to resolve the challenge if we don't know about it.\n    //so we have to fabricate one.\n    ch = {\n      blockNumber: txn.blockNumber-1,//fake it out\n      timestamp: txn.timestamp,\n      finalValue: null,\n      nonces: {},\n      minerOrder: [],\n      multiplier: req.multiplier,\n      id: req.id,\n      queryString: req.queryString,\n      difficulty: 0,\n      tip: 0,\n      name: \"NewChallenge\"\n    };\n    //cache fabricated challenge so that we can recover its metadata later\n    store({database: dbNames.NewChallenge,\n      key: ch.challengeHash,\n      data: ch\n    });\n  }\n\n  ch = {\n    ...ch,\n    //update the challenge's nonce map with new nonces\n    nonces: {\n      ...ch.nonces,\n      ...nonces.reduce((o,n)=>{\n        //internallly keyed by miner address\n        o[n.miner] = n;\n        return o;\n      },{})\n    }\n  };\n\n  //store all nonces locally for later recovery\n  nonces.forEach(n=>{\n    store({\n      database: dbNames.NonceSubmitted,\n      key: ethUtils.sha3(n.challengeHash + n.miner),\n      data: n.toJSON()\n    });\n  });\n\n  //send challenge and updated request back to caller\n  outData.challenge = ch;\n  outData.request = {\n    ...req,\n    //update challenges because nonces have been added to the challenge\n    challenges: {\n      ...req.challenges,\n      [ch.challengeHash]: ch\n    }\n  };\n}\n\n/**\n * Change the nonce sorting by attaching an winning order attribute to each\n * nonce, if we know the order\n */\nconst changeNonceOrder = ({txn, store, prevData, outData}) => async (dispatch, getState) => {\n  //here we use the previously processed challenge because it's the version\n  //that has the updated nonces attached to it.\n  let challenge = prevData.challenge;\n  let newVal = txn.logEventMap[dbNames.NewValue];\n  if(!newVal) {\n    return;\n  }\n  //remember that we've seen the new value locally for recovery\n  store({\n    database: dbNames.NewValue,\n    key: newVal.challengeHash,\n    data: newVal.toJSON()\n  });\n\n  //get the miners for the value's timeslot and request id\n  let miners = await dispatch(getMiningOrder(newVal));\n  if(miners && miners.length > 0) {\n    //we assign a winning order to each nonce associated with the set\n    let updated = _.values(challenge.nonces).map(n=>{\n      //find the index of the nonce's miner address within the winning\n      //miner addresses (which are sorted by winning position)\n      let idx = miners.indexOf(n.miner);\n\n      //flag the nonce with the correct winning order\n      n.winningOrder = idx;\n\n      //create a key that is unique for each nonce. Namely, a miner can never\n      //submit multiple solutions for a challenge. So the combination of challenge\n      //and miner address should be unique as a key\n      let key = ethUtils.sha3(n.challengeHash + n.miner);\n\n      //Record the updated nonce with its winning order idx\n      store({database: dbNames.NonceSubmitted,\n          key,\n          data: {\n            ...n.toJSON(),\n            winningOrder: idx\n          }\n      });\n      return n;\n    });\n\n    outData.miners = miners;\n    //change the challenge to include the mining order\n    //new value, and new nonces\n    outData.challenge = {\n      ...challenge,\n      minerOrder: miners,\n      finalValue: newVal,\n      nonces: updated.reduce((o,n)=>{\n        o[n.miner] = n;\n        return o;\n      },{})\n    }\n\n    //update the top miner redux store\n    dispatch(miningOps.update(outData.challenge));\n  }\n}\n\n/**\n * Add a new challenge if in the transaction logs\n */\nconst addNewChallenge = ({txn, store, outData}) => async (dispatch, getState) => {\n  let ch = txn.logEventMap[dbNames.NewChallenge];\n  if(!ch) {\n    return;\n  }\n  //get the matching request in the redux store\n  let req = getState().requests.byId[ch.id];\n  if(!req) {\n    //or try to find it on-chain\n    req = await dispatch(findRequest({txn, store, id: ch.id}));\n    if(!req) {\n      return;\n    }\n  }\n\n  //normalize the new challege with fields for dashboard\n  ch = normalizeChallenge(req, ch);\n  //update the request to include the new challenge\n  outData.request = {\n    ...req,\n    currentTip: 0, //because any new challenge resets its tip\n    challenges: {\n      ...req.challenges,\n      [ch.challengeHash]: ch\n    }\n  }\n  //and remember we saw the challenge for future recovery\n  store({database: dbNames.NewChallenge,\n      key: ch.challengeHash,\n      data: ch.toJSON()\n  });\n  outData.challenge = ch;\n}\n","import Plugin from './Plugin';\nimport * as dbNames from 'Storage/DBNames';\nimport {Creators} from 'Redux/requests/actions';\nimport {findRequestById, getCurrentTipForRequest} from 'Chain/utils';\nimport {\n  normalizeRequest,\n  normalizeChallenge\n} from './utils';\nimport {default as topOps} from 'Redux/analytics/topRequest/operations';\n\n/**\n * Handles request data and tipping activity\n */\nexport default class RequestDataHandler extends Plugin {\n  constructor(props) {\n    super({\n      ...props,\n      id: \"RequestDataHandler\",\n      fnContexts: ['requestData', 'addTip']\n    });\n    [\n      'process',\n      'handleRequestData',\n      'handleTip'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n\n  process(txn, store) {\n    return async (dispatch,getState)=>{\n      //if context is request data, handle that differently\n      if(txn.fn === 'requestData') {\n        return dispatch(this.handleRequestData(txn, store));\n      }\n\n      //otherwise, handle as a tip\n      return dispatch(this.handleTip(txn, store));\n    }\n  }\n\n\n  handleRequestData(txn, store) {\n    return async (dispatch,getState) => {\n\n      //there is a case where a request data becomes a tip event if\n      //something requests data for an existing request. So we need\n      //to handle that case here.\n      if(txn.logEventMap[dbNames.TipAdded]) {\n        return dispatch(this.handleTip(txn, store));\n      }\n\n      //check for required basic events\n      let req = txn.logEventMap[dbNames.DataRequested];\n      let newChallenge = txn.logEventMap[dbNames.NewChallenge];\n      if(!req && !newChallenge) {\n        return;\n      }\n\n      let state = getState();\n      let byId = state.requests.byId;\n\n      if(req) {\n        //cache event locally for future recovery\n        store({\n          database: dbNames.DataRequested,\n          key: \"\"+req.id,\n          data: req.toJSON()\n        });\n        //add dashboard specific fields to request\n        req = normalizeRequest(req);\n      }\n\n      if(!req) {\n        //if we don't have a request, just a challenge, find the matching request.\n        req = byId[newChallenge.id];\n        if(!req) {\n          req = await dispatch(findRequestById(newChallenge.id));\n\n          if(!req) {\n            console.log(\"Could not find request for new challenge\", newChallenge);\n            //something's wrong\n            return;\n          }\n          //since we read from chain manually, we need to store it locally\n          store({database: dbNames.DataRequested,\n            key: \"\"+req.id,\n            data: req.toJSON()\n          });\n          req = normalizeRequest(req);\n        }\n      }\n\n      if(newChallenge) {\n        //normalize any new challenge to include dashboard fields\n        newChallenge = normalizeChallenge(req, newChallenge);\n\n        //cache it for recovery later\n        store({\n          database: dbNames.NewChallenge,\n          key: newChallenge.challengeHash,\n          data:newChallenge.toJSON()\n        });\n\n        //store the challenge in the request by its hash\n        req.challenges = {\n          ...req.challenges,\n          [newChallenge.challengeHash]: newChallenge\n        };\n\n        //update analytics will new challenge\n        dispatch(topOps.challengeIssued(newChallenge));\n      }\n\n      //update redux with new request or existing request with its added challenge\n      dispatch(Creators.addRequest({request: req}));\n      if(newChallenge) {\n        //update current challenge if new challenge was issued\n        dispatch(Creators.updateCurrent({challenge: req.challenges[newChallenge.challengeHash]}))\n      }\n    }\n  }\n\n  handleTip(txn, store) {\n    return async (dispatch, getState) => {\n\n      //make sure we have tip and maybe a new challenge event\n      let tipEvts = txn.logEventMap[dbNames.TipAdded];\n      let ch = txn.logEventMap[dbNames.NewChallenge];\n      if(!tipEvts) {\n        return;\n      }\n\n      //in case there are multiple tip events in the txn. Not sure how that can\n      //happen but just in case\n      if(!Array.isArray(tipEvts)) {\n        let a = [tipEvts];\n        tipEvts = a;\n      }\n      if(tipEvts.length === 0) {\n        return;\n      }\n\n      //increment tip amount of request\n      for(let i=0;i<tipEvts.length;++i) {\n        let tipEvt = tipEvts[i];\n        //get request from redux store\n        let req = getState().requests.byId[tipEvt.id];\n        if(!req) {\n          //or lookup if we don't know about it yet\n          req = await dispatch(findRequestById(tipEvt.id));\n          if(!req) {\n            console.log(\"Could not find request for incoming tip with id: \" + tipEvt.id);\n            return;\n          }\n          //store locally for future recovery\n          store({\n            database: dbNames.DataRequested,\n            key: \"\"+req.id,\n            data: req.toJSON()\n          });\n          //normalize with fields used by dashboard\n          req = normalizeRequest(req);\n        }\n\n        let tip = tipEvt.totalTips;\n        if(!txn.__recovering) {\n          //we go back on chain to get the actual current tip because the\n          //total tips has been wrong in early versions. If this gets slow\n          //let's check the total tips again or fix it on contract.\n          tip = await dispatch(getCurrentTipForRequest(req.id));\n          if(!tip) {\n            tip  = 0;\n          }\n        }\n\n        //remember the tip event for future recovery\n        store({\n            database: dbNames.TipAdded,\n            key: tipEvt.transactionHash,\n            data: tipEvt.toJSON()\n        });\n\n        //include the tip in the request's tip set\n        let tips = req.tips || [];\n        tips = [\n          ...tips,\n          tipEvt\n        ];\n\n        //only keep last 50 tips. Note that we shift from the\n        //front of the list to keep latest tips\n        while(tips.length > 50) {\n          tips.shift();\n        }\n        req = {\n          ...req,\n          currentTip: tip,\n          tips\n        };\n        //update redux store with changed request\n        dispatch(Creators.updateRequest({request: req}));\n      }//end tip event loop\n\n      if(ch) {\n        //we have a new challenge as well\n\n        //get associated request\n        let req = getState().requests.byId[ch.id];\n        if(!req) {\n          //or find on-chain\n          req = await dispatch(findRequestById(ch.id));\n          if(req) {\n            //store locally for future recovery\n            store({database: dbNames.DataRequested,\n              key: req.id,\n              data: req.toJSON()\n            });\n            //and normalize for dashboard use\n            req = normalizeRequest(req);\n          } else {\n            //no request found bail out\n            return;\n          }\n        }\n\n        //add dashboard specific fields\n        ch = normalizeChallenge(req, ch);\n\n        //and remember the challenge for future recovery\n        store({\n          database: dbNames.NewChallenge,\n          key: ch.challengeHash,\n          data: ch.toJSON()\n        });\n\n        //update request with new challenge\n        req = {\n          ...req,\n          challenges: {\n            ...req.challenges,\n            [ch.challengeHash]: ch\n          }\n        }\n        //update the redux store with new request\n        dispatch(Creators.updateRequest({request: req}));\n\n        //update with new challenge\n        dispatch(Creators.updateCurrent({challenge: ch}));\n\n        //and upate analytics with new challenge info\n        dispatch(topOps.challengeIssued(ch));\n      }\n    }\n  }\n}\n","import Plugin from './Plugin';\nimport * as dbNames from 'Storage/DBNames';\nimport {findRequestById, findDisputedNonce} from 'Chain/utils';\nimport {Creators} from 'Redux/requests/actions';\nimport {\n  normalizeRequest,\n  normalizeDispute\n}  from './utils';\n\n/**\n * Find a request with the given\n */\nconst findRequest = ({txn, store, id}) => async (dispatch, getState) => {\n  let byId = getState().requests.byId;\n  let req = byId[id];\n  if(!req) {\n    //if it's not in the store yet, find it by looking on chain\n    req = await dispatch(findRequestById(id));\n    if(req) {\n      //ask to store the request since we don't have it cached locally.\n      store({\n        database: dbNames.DataRequested,\n        key: \"\"+req.id,\n        data: req.toJSON()\n      });\n      //normalize just sets up some default fields we use throughout the app\n      req = normalizeRequest(req);\n    }\n  }\n  return req;\n}\n\n\n\n/**\n * Handler that enriches the Redux store with updates to request objects\n * that hold dispute information\n */\nexport default class InitDisputeHandler extends Plugin {\n  constructor(props) {\n    super({\n      ...props,\n      id: \"InitDisputeHandler\",\n      fnContexts: ['beginDispute']\n    });\n    [\n      'process'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  process(txn, store) {\n    return async (dispatch, getState) => {\n      let outData = {};\n      //just add any disputes found in txn\n      await dispatch(addNewDispute({txn, store, outData: outData}));\n      if(outData.dispute) {\n        //if we had a new dispute, update the request in redux store\n        //by calling the action--which invokes associated reducer to update store\n        dispatch(Creators.updateRequest({request: outData.request}));\n      }\n    }\n  }\n}\n\n/**\n * Handle the addition of a new dispute event\n */\nconst addNewDispute = ({txn, store, outData}) => async (dispatch, getState) => {\n  //see if there is a dispute even in the txn\n  let d = txn.logEventMap[dbNames.NewDispute];\n  if(!d) {\n    return;\n  }\n\n  //get the request associated with the dispute\n  let req = getState().requests.byId[d.requestId];\n  if(!req) {\n    //or look it up if we don't know about it yet\n    req = await dispatch(findRequest({txn, store, id: d.requestId}));\n    if(!req) {\n      return;\n    }\n  }\n\n  //normalize some fields within the dispute that we use in the dashboard\n  d = normalizeDispute(req, d);\n\n  //get the associated/disputed nonce submission for the dispute\n  let nonce = await dispatch(findDisputedNonce(req, d));\n  d.targetNonce = nonce;\n\n  //make changes to the associated request\n  outData.request = {\n    ...req,\n    //change its disputes\n    disputes: {\n      //to include the new dispute keyed by id\n      byId: {\n        ...req.disputes.byId,\n        [d.id]: d\n      },\n      //and dispute hash\n      byHash: {\n        ...req.disputes.byHash,\n        [d.disputeHash]: d\n      }\n    },\n  }\n\n  //remember that we've seen the dispute for later restoration\n  store({\n    database: dbNames.NewDispute,\n    key: \"\"+d.id,\n    data: d.toJSON()\n  });\n  //pass dispute back to caller\n  outData.dispute = d;\n}\n","import Plugin from './Plugin';\nimport * as dbNames from 'Storage/DBNames';\nimport * as ethUtils from 'web3-utils';\nimport {Creators} from 'Redux/requests/actions';\nimport _ from 'lodash';\nimport eventFactory from 'Chain/LogEvents/EventFactory';\n\n/**\n * Handling voting related events and txns\n */\nexport default class VoteHandler extends Plugin {\n  constructor(props) {\n    super({\n      ...props,\n      id: \"VoteHandler\",\n      fnContexts: ['vote']\n    });\n    [\n      'process'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  process(txn, store) {\n\n    return async (dispatch, getState) => {\n      let outData = {};\n      //extract voting info\n      await dispatch(addVote({txn, store, outData: outData}));\n      if(outData.dispute) {\n        //and if matched up with dispute, update request\n        dispatch(Creators.updateRequest({request: outData.request}));\n      }\n    }\n  }\n}\n\n/**\n * Find a matching dispute for a vote by the dispute id\n */\nconst findDispute = ({txn, store, id}) => async (dispatch, getState) => {\n  let byId = getState().requests.byId;\n  let reqs = _.values(byId);\n  for(let i=0;i<reqs.length;++i) {\n    let req = reqs[i];\n    let d = req.disputes.byId[id];\n    if(d) {\n      return d;\n    }\n  }\n  //we don't have a local match. We need to reconstruct from on-chain info\n  let disp = await getState().chain.contract.getDisputeDetails(id);\n  if(disp) {\n    let payload = {\n      event: dbNames.NewDispute,\n      sender: txn.from,\n      fnContext: txn.fn,\n      transactionHash: txn.transactionHash,\n      blockNumber: txn.blockNumber,\n      transactionIndex: txn.transactionIndex,\n      logIndex: 0,\n      timestamp: txn.timestamp,\n      returnValues: disp\n    };\n    return eventFactory(payload);\n  }\n}\n\n/**\n * Add a vote event if in txn\n */\nconst addVote = ({txn, store, outData}) => async (dispatch, getState) => {\n  let v = txn.logEventMap[dbNames.Voted];\n  if(!v) {\n    return;\n  }\n\n  //find the matching dispute\n  let disp = await dispatch(findDispute({txn, store, id:v.id}));\n  if(!disp) {\n    console.log(\"No dispute found with id\", v.id);\n    return;\n  }\n\n  //cache the vote for future recovery\n  store({\n    database: dbNames.Voted,\n    key: ethUtils.sha3(v.id + \"_\" + v.voter),\n    data: v.toJSON()\n  });\n\n  //see if voter is the current user\n  let user = getState().chain.chain.ethereumAccount;\n  let voteVal = v.position?1:-1;\n  //increment/decrement voter counts\n  disp = {\n    ...disp,\n    voteCount: disp.voteCount + voteVal,\n    //if current user voted or not\n    userVoted: user === v.voter\n  };\n\n  let req = getState().requests.byId[disp.requestId];\n  if(!req) {\n    console.log(\"No request found with id\", disp);\n    return;\n  }\n  outData.dispute = disp;\n  outData.vote = v;\n  //update request with the new dispute event\n  outData.request = {\n    ...req,\n    disputes: {\n      byId: {\n        ...req.disputes.byId,\n        [disp.id]: disp\n      },\n      byHash: {\n        ...req.disputes.byHash,\n        [disp.disputeHash]: disp\n      }\n    }\n  }\n}\n","import MiningHandler from './MiningSolutionHandler';\nimport RequestHandler from './RequestDataHandler';\nimport InitDispute from './InitDispute';\nimport VoteHandler from './VoteHandler';\nimport _ from 'lodash';\n\n//by default, these are the sub-processors that will enrich the\n//redux store as they process txns\nconst PLUGINS = [\n  //used for adding tips or requests to store\n  new RequestHandler(),\n\n  //used for nonce-related activity\n  new MiningHandler(),\n\n  //used for disputes\n  new InitDispute(),\n\n  //used for votes\n  new VoteHandler()\n]\n\n/**\n * Enrichment enriches the Redux store with state changes. Basically, it relies\n * on actions defined for the redux store to modify different parts of the tree\n * depending on what's going on in contract.\n */\nexport default class Enrichment {\n  constructor(props) {\n    this.id = \"Enrichment\";\n    this.plugins = {};\n    [\n      'init',\n      'process'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  init() {\n    return async (dispatch, getState) => {\n\n      //for each plugin we want run to enrich redux store\n      for(let i=0;i<PLUGINS.length;++i) {\n        let p = PLUGINS[i];\n\n        //see if the plugin requires initialization\n        if(typeof p.init === 'function') {\n          await dispatch(p.init());\n        }\n\n        //each plugin specifies the function context in which it's supposed\n        //to run\n        p.fnContexts.forEach(f=>{\n          //we register the plugin with the given fn context\n          let a = this.plugins[f] || [];\n\n          //make sure we only add the plugin once\n          let idx = _.findIndex(a, (pl)=>pl.id===p.id);\n          if(idx >= 0) {\n            throw new Error(\"Attempting to add plugin twice: \" + p.id);\n          }\n          a.push(p);\n          //associate list of plugins with function context\n          this.plugins[f] = a;\n        })\n      }\n    }\n  }\n\n  /**\n   * Main process of event processing flow\n   */\n  process({block}, next, store) {\n    return async (dispatch, getState) => {\n\n      //for each txn in the block\n      let txns = block.transactions;\n      for(let i=0;i<txns.length;++i) {\n        let txn = txns[i];\n\n        //make sure we have logs to process and a known function context\n        let logs = txn.logEvents;\n        if(logs && txn.fn) {\n          //get all plugins that registered to be called in the function context\n          let procs = this.plugins[txn.fn];\n\n          if(procs) {\n            //for each plugin\n            for(let j=0;j<procs.length;++j) {\n              let p = procs[j];\n              try {\n                //ask it to process the transaction\n                await dispatch(p.process(txn, store));\n              } catch (e) {\n                console.log(\"Problem processing txn with plugin\", p.id, e);\n              }\n            }//end proc loop \n          }//end check for registered plugins for fn context\n        }//end check for logs and fn context\n      }//end plugin loop\n\n      //after all plugins run, call next processor in event flow\n      return next({block});\n    }\n  }\n}\n","\n/**\n * The purpose of this processor is to group all log events for\n * transactions and emit as blockEvents in the context of the\n * contract function that was called\n */\nexport default class ContractEmit {\n  constructor() {\n    this.id = \"ContractEmit\";\n    [\n      'init',\n      'process'\n    ].forEach(fn=>this[fn]=this[fn].bind(this));\n  }\n\n  init() {\n    return async (dispatch,getState) => {\n      //no-op\n    }\n  }\n\n  process({block}, next) {\n    return async (dispatch, getState) => {\n      let con = getState().chain.contract;\n\n      //get block's transactions\n      let txns = block.transactions;\n\n      //for each txn\n      txns.forEach(t=>{\n\n        //grab its logs\n        let logs = t.logEvents;\n\n        //if it has logs\n        if(logs && logs.length > 0) {\n          //have contract emit the events in the given context\n          con.emitEvents({context: t.fn, logs});\n        }\n      })\n      //then go to next processor\n      return next({block});\n    }\n  }\n}\n","import EthProcessor from './EthProcessor'\nimport BlockSource from './BlockSource';\nimport ABI from './ABIParser';\nimport Enrichment from './enrich/Enrichment';\nimport ContractEmit from './ContractEmit';\n\n//default configuration for event flow is to start from block puller\n//decode ABI\n//enrichment Redux store with processed transactions/logs\n//and emit any events out of contract as needed\nconst procs = new EthProcessor()\n                        .source(new BlockSource())\n                        .add(new ABI())\n                        .add(new Enrichment())\n                        .add(new ContractEmit());\n\nexport default procs;\n","import {Creators} from './actions';\nimport Chain, {init as chainInit} from 'Chain';\nimport {toastr} from 'react-redux-toastr';\nimport {generateQueryHash, generateDisputeHash} from 'Chain/utils';\nimport ethProcs from './procs';\n\n\nconst init = () => async (dispatch,getState) => {\n  if(getState().chain.chain) {\n    return;\n  }\n\n\n  dispatch(Creators.loadRequest());\n  //initialize the chain class\n  chainInit();\n\n  //create the chain instance\n  let chain = Chain();\n  try {\n    //initialize the instance\n    await dispatch(chain.init());\n\n    //set it on the redux store\n    dispatch(Creators.loadSuccess(chain));\n\n    //initialize the eth processing flow\n    await dispatch(ethProcs.init());\n\n  } catch (e) {\n    dispatch(Creators.failure(e));\n  }\n}\n\n/**\n * Startup the flow and any subscriptions\n */\nconst startSubscriptions = () => async (dispatch,getState) => {\n  try {\n    await dispatch(ethProcs.ready());\n  } catch (e) {\n    console.log(\"Could not start eht processors\", e);\n  }\n}\n\n/**\n * Not guaranteed to be called but is supposed to cleanup\n * any subscriptions\n */\nconst unload = () => async (dispatch, getState) => {\n\n\n    let chain = getState().chain.chain;\n    await dispatch(ethProcs.unload());\n    await chain.unload();\n\n}\n\n\nconst lookupQueryByHash = props => async (dispatch,getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  let hash = generateQueryHash(props.queryString, props.multiplier);\n  let ex = await con.getRequestIdByQueryHash(hash);\n  if(ex && ex.toString) {\n    ex = ex.toString()-0;\n  }\n  return ex || 0;\n}\n\nconst lookupDisputeByHash = props => async (dispatch, getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  let hash = generateDisputeHash({miner: props.miner.address, requestId: props.requestId, timestamp: props.timestamp});\n  let ex = await con.getDisputeIdByDisputeHash(hash);\n  if(ex && ex.toString) {\n    ex = ex.toString()-0;\n  }\n  return ex || 0;\n}\n\n/**\n * Calls the contract's requestData method after verifying\n * that the request doesn't already exist\n */\nconst requestData = props => async (dispatch,getState) => {\n  let ex = await dispatch(lookupQueryByHash(props));\n  if(ex) {\n    throw new Error(\"Query already exists with id: \" + ex);\n  }\n  return dispatch(_doRequestData(props));\n}\n\n/**\n * Calls beginDispute after verifying that the dispute doesn't\n * already exist\n */\nconst initDispute = props => async (dispatch, getState) => {\n  let ex = await dispatch(lookupDisputeByHash(props));\n  if(ex) {\n    toastr.error(\"Error\", \"Dispute already active for miner,requestId,timestamp combination\");\n  } else {\n    await dispatch(_doInitDispute(props));\n  }\n}\n\nconst _doRequestData = props => async (dispatch, getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  //call on-chain to request data\n  await con.requestData(props.queryString, props.symbol, props.multiplier, props.tip)\n    .then(()=>{\n      return toastr.info(\"Submitted data request\");\n    }).catch(e=>{\n      toastr.error(\"Error\", e.message);\n      throw e;\n    });\n}\n\nconst _doInitDispute = props => async (dispatch, getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  //call on-chain to begin a new dispute\n  await con.beginDispute(props.requestId, props.timestamp, props.miner.index)\n    .then(()=>{\n      return toastr.info(\"Submitted dispute request\");\n    }).catch(e=>{\n      toastr.error(\"Error\", e.message);\n      throw e;\n    })\n}\n\n/**\n * Calls contract's addTip function\n */\nconst addToTip = (id,tip) => (dispatch, getState) => {\n  let state = getState();\n  let req = state.requests.byId[id];\n  if(req) {\n    let con = state.chain.contract;\n    return con.addTip(req.id, tip);\n  }\n}\n\n/**\n * Calls contract's lazyCoon function to get tokens\n */\nconst getTokens = () => (dispatch, getState) => {\n  let state = getState();\n  let con = state.chain.contract;\n  return con.getTokens();\n}\n\n\nexport default {\n  init,\n  unload,\n  startSubscriptions,\n  requestData,\n  addToTip,\n  lookupQueryByHash,\n  lookupDisputeByHash,\n  initDispute,\n  getTokens\n}\n","/**\n * There are cases where we want state changes to\n * globally update multiple downstream things. And, more importantly,\n * some of those updates might include asynchronous actions that need\n * be executed as a result of the one state change.\n *\n * This middleware will notify all registered dependencies for a\n * state change type. Dependencies are registered in DepManager.\n**/\n\n\nimport _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport {toastr} from 'react-redux-toastr';\n\nlet instance = null;\n\nconst _err = e => {\n  toastr.error(\"Error\", e.message);\n}\n\nclass DepManager {\n\n  static instance() {\n    if(!instance) {\n      instance = new DepManager();\n    }\n    return instance;\n  }\n\n  constructor() {\n    this.callbacks = {};\n\n    [\n      'addDependency',\n      'addDependencies',\n      'removeDependency',\n      'notify'\n    ].forEach(fn=>{\n      this[fn] = this[fn].bind(this);\n    })\n  }\n\n  addDependencies(types, id, callback) {\n    if(!Array.isArray(types)) {\n      let a = [types];\n      types = a;\n    }\n    types.forEach((t,i)=>{\n      this.addDependency(t, id + \".\" + i, callback)\n    });\n  }\n\n  addDependency(type, id, callback) {\n    let set = this.callbacks[type] || {};\n    set[id] = callback;\n    this.callbacks[type] = set;\n  }\n\n  removeDependency(type, id) {\n    let set = this.callbacks[type];\n    delete set[id];\n    this.callbacks[type] = set;\n  }\n\n  notify(obj, dispatch, getState) {\n    let set = this.callbacks[obj.type];\n    setTimeout(()=>{\n    //  console.log(\"Notifying\", _.keys(set).length, \"subscribers for update\", obj.type);\n      _.keys(set).forEach(id=>{\n        let cb = set[id];\n        try {\n          let r = cb(obj.type, dispatch, getState);\n          if(r instanceof Promise) {\n            r.catch(_err);\n          }\n        } catch (e) {\n          console.log(\"Problem in callback with id: \" + id, e);\n          _err(e);\n        }\n      })\n    });\n  }\n}\n\nexport const registerDeps = (deps, callback) => {\n  DepManager.instance().addDependencies(deps, uuid(), callback);\n}\n\nexport default () =>  ({dispatch, getState}) => next => action => {\n\n    //apply the action\n    let retValue = next(action);\n\n    //call dependent items\n    DepManager.instance().notify(action, dispatch, getState);\n\n    //return orig result\n    return retValue;\n}\n"],"sourceRoot":""}